{
  "address": "0xa61839A53F80d1c2e2158174f4B3822ff2b1B286",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum DataTypes.InterestRateMode",
          "name": "interestRateMode",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowRate",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        }
      ],
      "name": "IsolationModeTotalDebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "RebalanceStableBorrowRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useHTokens",
          "type": "bool"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum DataTypes.InterestRateMode",
          "name": "interestRateMode",
          "type": "uint8"
        }
      ],
      "name": "SwapBorrowRateMode",
      "type": "event"
    }
  ],
  "transactionHash": "0x9c20caecda0d4478f310c7adc76b4ca4e0486d834e2da0c8ae6d0052c00e0b31",
  "receipt": {
    "to": null,
    "from": "0xcbeD65Db7E177D4875dDF5B67E13326A43a7B03f",
    "contractAddress": "0xa61839A53F80d1c2e2158174f4B3822ff2b1B286",
    "transactionIndex": 33,
    "gasUsed": "5035315",
    "logsBloom": "0x
    "blockHash": "0xa7788ad1aa228d26f6ae554f88870d1bf67b775a17a75b80e3bb9baae3200a2d",
    "transactionHash": "0x9c20caecda0d4478f310c7adc76b4ca4e0486d834e2da0c8ae6d0052c00e0b31",
    "logs": [],
    "blockNumber": 3659704,
    "cumulativeGasUsed": "9564922",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a7aa37fda43f044bb98bf2062856f6b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.InterestRateMode\",\"name\":\"interestRateMode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"name\":\"IsolationModeTotalDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RebalanceStableBorrowRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useHTokens\",\"type\":\"bool\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum DataTypes.InterestRateMode\",\"name\":\"interestRateMode\",\"type\":\"uint8\"}],\"name\":\"SwapBorrowRateMode\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"HopeLend\",\"kind\":\"dev\",\"methods\":{\"executeBorrow(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,mapping(uint8 => DataTypes.EModeCategory) storage,DataTypes.UserConfigurationMap storage,DataTypes.ExecuteBorrowParams)\":{\"details\":\"Emits the `Borrow()` event\",\"params\":{\"eModeCategories\":\"The configuration of all the efficiency mode categories\",\"params\":\"The additional parameters needed to execute the borrow function\",\"reservesData\":\"The state of all the reserves\",\"reservesList\":\"The addresses of all the active reserves\",\"userConfig\":\"The user configuration mapping that tracks the supplied/borrowed assets\"}},\"executeRebalanceStableBorrowRate(DataTypes.ReserveData storage,address,address)\":{\"details\":\"The rules that define if a position can be rebalanced are implemented in `ValidationLogic.validateRebalanceStableBorrowRate()`Emits the `RebalanceStableBorrowRate()` event\",\"params\":{\"asset\":\"The asset of the position being rebalanced\",\"reserve\":\"The state of the reserve of the asset being repaid\",\"user\":\"The user being rebalanced\"}},\"executeRepay(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,DataTypes.UserConfigurationMap storage,DataTypes.ExecuteRepayParams)\":{\"details\":\"Emits the `Repay()` event\",\"params\":{\"params\":\"The additional parameters needed to execute the repay function\",\"reservesData\":\"The state of all the reserves\",\"reservesList\":\"The addresses of all the active reserves\",\"userConfig\":\"The user configuration mapping that tracks the supplied/borrowed assets\"},\"returns\":{\"_0\":\"The actual amount being repaid\"}},\"executeSwapBorrowRateMode(DataTypes.ReserveData storage,DataTypes.UserConfigurationMap storage,address,DataTypes.InterestRateMode)\":{\"details\":\"Emits the `Swap()` event\",\"params\":{\"asset\":\"The asset of the position being swapped\",\"interestRateMode\":\"The current interest rate mode of the position being swapped\",\"reserve\":\"The of the reserve of the asset being repaid\",\"userConfig\":\"The user configuration mapping that tracks the supplied/borrowed assets\"}}},\"title\":\"BorrowLogic library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeBorrow(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,mapping(uint8 => DataTypes.EModeCategory) storage,DataTypes.UserConfigurationMap storage,DataTypes.ExecuteBorrowParams)\":{\"notice\":\"Implements the borrow feature. Borrowing allows users that provided collateral to draw liquidity from the HopeLend protocol proportionally to their collateralization power. For isolated positions, it also increases the isolated debt.\"},\"executeRebalanceStableBorrowRate(DataTypes.ReserveData storage,address,address)\":{\"notice\":\"Implements the rebalance stable borrow rate feature. In case of liquidity crunches on the protocol, stable rate borrows might need to be rebalanced to bring back equilibrium between the borrow and supply APYs.\"},\"executeRepay(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,DataTypes.UserConfigurationMap storage,DataTypes.ExecuteRepayParams)\":{\"notice\":\"Implements the repay feature. Repaying transfers the underlying back to the hToken and clears the equivalent amount of debt for the user by burning the corresponding debt token. For isolated positions, it also reduces the isolated debt.\"},\"executeSwapBorrowRateMode(DataTypes.ReserveData storage,DataTypes.UserConfigurationMap storage,address,DataTypes.InterestRateMode)\":{\"notice\":\"Implements the swap borrow rate feature. Borrowers can swap from variable to stable positions at any time.\"}},\"notice\":\"Implements the base logic for all the actions related to borrowing\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lend-core/contracts/protocol/libraries/logic/BorrowLogic.sol\":\"BorrowLogic\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"lend-core/contracts/dependencies/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from '../../openzeppelin/contracts/IERC20.sol';\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n  /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n  /// also when the token returns `false`.\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    bytes4 selector_ = token.transfer.selector;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let freeMemoryPointer := mload(0x40)\\n      mstore(freeMemoryPointer, selector_)\\n      mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n      mstore(add(freeMemoryPointer, 36), value)\\n\\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    require(getLastTransferResult(token), 'GPv2: failed transfer');\\n  }\\n\\n  /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n  /// reverts also when the token returns `false`.\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    bytes4 selector_ = token.transferFrom.selector;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let freeMemoryPointer := mload(0x40)\\n      mstore(freeMemoryPointer, selector_)\\n      mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\n      mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n      mstore(add(freeMemoryPointer, 68), value)\\n\\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    require(getLastTransferResult(token), 'GPv2: failed transferFrom');\\n  }\\n\\n  /// @dev Verifies that the last return was a successful `transfer*` call.\\n  /// This is done by checking that the return data is either empty, or\\n  /// is a valid ABI encoded boolean.\\n  function getLastTransferResult(IERC20 token) private view returns (bool success) {\\n    // NOTE: Inspecting previous return data requires assembly. Note that\\n    // we write the return data to memory 0 in the case where the return\\n    // data size is 32, this is OK since the first 64 bytes of memory are\\n    // reserved by Solidy as a scratch space that can be used within\\n    // assembly blocks.\\n    // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      /// @dev Revert with an ABI encoded Solidity error with a message\\n      /// that fits into 32-bytes.\\n      ///\\n      /// An ABI encoded Solidity error has the following memory layout:\\n      ///\\n      /// ------------+----------------------------------\\n      ///  byte range | value\\n      /// ------------+----------------------------------\\n      ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n      ///  0x04..0x24 |      string offset (always 0x20)\\n      ///  0x24..0x44 |                    string length\\n      ///  0x44..0x64 | string value, padded to 32-bytes\\n      function revertWithMessage(length, message) {\\n        mstore(0x00, '\\\\x08\\\\xc3\\\\x79\\\\xa0')\\n        mstore(0x04, 0x20)\\n        mstore(0x24, length)\\n        mstore(0x44, message)\\n        revert(0x00, 0x64)\\n      }\\n\\n      switch returndatasize()\\n      // Non-standard ERC20 transfer without return.\\n      case 0 {\\n        // NOTE: When the return data size is 0, verify that there\\n        // is code at the address. This is done in order to maintain\\n        // compatibility with Solidity calling conventions.\\n        // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n        if iszero(extcodesize(token)) {\\n          revertWithMessage(20, 'GPv2: not a contract')\\n        }\\n\\n        success := 1\\n      }\\n      // Standard ERC20 transfer returning boolean success value.\\n      case 32 {\\n        returndatacopy(0, 0, returndatasize())\\n\\n        // NOTE: For ABI encoding v1, any non-zero value is accepted\\n        // as `true` for a boolean. In order to stay compatible with\\n        // OpenZeppelin's `SafeERC20` library which is known to work\\n        // with the existing ERC20 implementation we care about,\\n        // make sure we return success for any non-zero return value\\n        // from the `transfer*` call.\\n        success := iszero(iszero(mload(0)))\\n      }\\n      default {\\n        revertWithMessage(31, 'GPv2: malformed transfer result')\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7c5d80edb2e8185fb503069c63caed796a4a8191e495529cad04437f812f4c5c\",\"license\":\"LGPL-3.0-or-later\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\",\"keccak256\":\"0xde91b085e81ba88aecc0491c7f83a39bca7193e2622f01aee9a48b60a303fc84\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xaab45993655e2e30909010506e0a120338362676a4047bb936c300a06297cc0f\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n  /**\\n   * @dev Returns the downcasted uint224 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint224).\\n   *\\n   * Counterpart to Solidity's `uint224` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 224 bits\\n   */\\n  function toUint224(uint256 value) internal pure returns (uint224) {\\n    require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    return uint224(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint128 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint128).\\n   *\\n   * Counterpart to Solidity's `uint128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   */\\n  function toUint128(uint256 value) internal pure returns (uint128) {\\n    require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    return uint128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint96 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint96).\\n   *\\n   * Counterpart to Solidity's `uint96` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 96 bits\\n   */\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\n    require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    return uint96(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint64 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint64).\\n   *\\n   * Counterpart to Solidity's `uint64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   */\\n  function toUint64(uint256 value) internal pure returns (uint64) {\\n    require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    return uint64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint32 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint32).\\n   *\\n   * Counterpart to Solidity's `uint32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   */\\n  function toUint32(uint256 value) internal pure returns (uint32) {\\n    require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    return uint32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint16 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint16).\\n   *\\n   * Counterpart to Solidity's `uint16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   */\\n  function toUint16(uint256 value) internal pure returns (uint16) {\\n    require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    return uint16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint8 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint8).\\n   *\\n   * Counterpart to Solidity's `uint8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   */\\n  function toUint8(uint256 value) internal pure returns (uint8) {\\n    require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    return uint8(value);\\n  }\\n\\n  /**\\n   * @dev Converts a signed int256 into an unsigned uint256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be greater than or equal to 0.\\n   */\\n  function toUint256(int256 value) internal pure returns (uint256) {\\n    require(value >= 0, 'SafeCast: value must be positive');\\n    return uint256(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int128 from int256, reverting on\\n   * overflow (when the input is less than smallest int128 or\\n   * greater than largest int128).\\n   *\\n   * Counterpart to Solidity's `int128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt128(int256 value) internal pure returns (int128) {\\n    require(\\n      value >= type(int128).min && value <= type(int128).max,\\n      \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n    );\\n    return int128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int64 from int256, reverting on\\n   * overflow (when the input is less than smallest int64 or\\n   * greater than largest int64).\\n   *\\n   * Counterpart to Solidity's `int64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt64(int256 value) internal pure returns (int64) {\\n    require(\\n      value >= type(int64).min && value <= type(int64).max,\\n      \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n    );\\n    return int64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int32 from int256, reverting on\\n   * overflow (when the input is less than smallest int32 or\\n   * greater than largest int32).\\n   *\\n   * Counterpart to Solidity's `int32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt32(int256 value) internal pure returns (int32) {\\n    require(\\n      value >= type(int32).min && value <= type(int32).max,\\n      \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n    );\\n    return int32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int16 from int256, reverting on\\n   * overflow (when the input is less than smallest int16 or\\n   * greater than largest int16).\\n   *\\n   * Counterpart to Solidity's `int16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt16(int256 value) internal pure returns (int16) {\\n    require(\\n      value >= type(int16).min && value <= type(int16).max,\\n      \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n    );\\n    return int16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int8 from int256, reverting on\\n   * overflow (when the input is less than smallest int8 or\\n   * greater than largest int8).\\n   *\\n   * Counterpart to Solidity's `int8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt8(int256 value) internal pure returns (int8) {\\n    require(\\n      value >= type(int8).min && value <= type(int8).max,\\n      \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n    );\\n    return int8(value);\\n  }\\n\\n  /**\\n   * @dev Converts an unsigned uint256 into a signed int256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be less than or equal to maxInt256.\\n   */\\n  function toInt256(uint256 value) internal pure returns (int256) {\\n    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n    require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n    return int256(value);\\n  }\\n}\\n\",\"keccak256\":\"0x07e49e2bdfefb9f414444bd6be012b1e07b1f2a56d6a3fca5ab3f5733dd8abd0\",\"license\":\"MIT\"},\"lend-core/contracts/interfaces/IAbsGauge.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {ILendingGauge} from './ILendingGauge.sol';\\n\\n/**\\n * @title IAbsGauge\\n * @author HopeLend\\n * @notice Defines the basic interface for AbsGauge.\\n */\\ninterface IAbsGauge {\\n  function lendingGauge() external view returns (ILendingGauge);\\n}\\n\",\"keccak256\":\"0xafbed0fa6cdc53f1e721353b10f8ed40b18b52ea8ea6d5bbaed29b6490fed101\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\n\\ninterface IGaugeController {\\n    struct Point {\\n        uint256 bias;\\n        uint256 slope;\\n    }\\n\\n    struct VotedSlope {\\n        uint256 slope;\\n        uint256 power;\\n        uint256 end;\\n    }\\n\\n    struct UserPoint {\\n        uint256 bias;\\n        uint256 slope;\\n        uint256 ts;\\n        uint256 blk;\\n    }\\n\\n    event AddType(string name, int128 type_id);\\n\\n    event NewTypeWeight(int128 indexed type_id, uint256 time, uint256 weight, uint256 total_weight);\\n\\n    event NewGaugeWeight(address indexed gauge_address, uint256 time, uint256 weight, uint256 total_weight);\\n\\n    event VoteForGauge(address indexed user, address indexed gauge_address, uint256 time, uint256 weight);\\n\\n    event NewGauge(address indexed gauge_address, int128 gauge_type, uint256 weight);\\n\\n    /**\\n     * @notice Get gauge type for address\\n     *  @param _addr Gauge address\\n     * @return Gauge type id\\n     */\\n    function gaugeTypes(address _addr) external view returns (int128);\\n\\n    /**\\n     * @notice Add gauge `addr` of type `gauge_type` with weight `weight`\\n     * @param addr Gauge address\\n     * @param gaugeType Gauge type\\n     * @param weight Gauge weight\\n     */\\n    function addGauge(address addr, int128 gaugeType, uint256 weight) external;\\n\\n    /**\\n     * @notice Checkpoint to fill data common for all gauges\\n     */\\n    function checkpoint() external;\\n\\n    /**\\n     * @notice Checkpoint to fill data for both a specific gauge and common for all gauge\\n     * @param addr Gauge address\\n     */\\n    function checkpointGauge(address addr) external;\\n\\n    /**\\n     * @notice Get Gauge relative weight (not more than 1.0) normalized to 1e18(e.g. 1.0 == 1e18). Inflation which will be received by\\n     * it is inflation_rate * relative_weight / 1e18\\n     * @param gaugeAddress Gauge address\\n     * @param time Relative weight at the specified timestamp in the past or present\\n     * @return Value of relative weight normalized to 1e18\\n     */\\n    function gaugeRelativeWeight(address gaugeAddress, uint256 time) external view returns (uint256);\\n\\n    /**\\n     *  @notice Get gauge weight normalized to 1e18 and also fill all the unfilled values for type and gauge records\\n     * @dev Any address can call, however nothing is recorded if the values are filled already\\n     * @param gaugeAddress Gauge address\\n     * @param time Relative weight at the specified timestamp in the past or present\\n     * @return Value of relative weight normalized to 1e18\\n     */\\n    function gaugeRelativeWeightWrite(address gaugeAddress, uint256 time) external returns (uint256);\\n\\n    /**\\n     * @notice Add gauge type with name `_name` and weight `weight`\\n     * @dev only owner call\\n     * @param _name Name of gauge type\\n     * @param weight Weight of gauge type\\n     */\\n    function addType(string memory _name, uint256 weight) external;\\n\\n    /**\\n     * @notice Change gauge type `type_id` weight to `weight`\\n     * @dev only owner call\\n     * @param type_id Gauge type id\\n     * @param weight New Gauge weight\\n     */\\n    function changeTypeWeight(int128 type_id, uint256 weight) external;\\n\\n    /**\\n     * @notice Change weight of gauge `addr` to `weight`\\n     * @param gaugeAddress `Gauge` contract address\\n     * @param weight New Gauge weight\\n     */\\n    function changeGaugeWeight(address gaugeAddress, uint256 weight) external;\\n\\n    /**\\n     * @notice Allocate voting power for changing pool weights\\n     * @param gaugeAddress Gauge which `msg.sender` votes for\\n     * @param userWeight Weight for a gauge in bps (units of 0.01%). Minimal is 0.01%. Ignored if 0.\\n     *        example: 10%=1000,3%=300,0.01%=1,100%=10000\\n     */\\n    function voteForGaugeWeights(address gaugeAddress, uint256 userWeight) external;\\n\\n    /**\\n     * @notice Get current gauge weight\\n     * @param addr Gauge address\\n     * @return Gauge weight\\n     */\\n\\n    function getGaugeWeight(address addr) external view returns (uint256);\\n\\n    /**\\n     * @notice Get current type weight\\n     * @param type_id Type id\\n     * @return Type weight\\n     */\\n    function getTypeWeight(int128 type_id) external view returns (uint256);\\n\\n    /**\\n     * @notice Get current total (type-weighted) weight\\n     * @return Total weight\\n     */\\n    function getTotalWeight() external view returns (uint256);\\n\\n    /**\\n     * @notice Get sum of gauge weights per type\\n     * @param type_id Type id\\n     * @return Sum of gauge weights\\n     */\\n    function getWeightsSumPreType(int128 type_id) external view returns (uint256);\\n\\n    function votingEscrow() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2ad7cc0ae48ada235c39fc2337734bc4ddf772a8d0fd67c6cbb677126be5dc73\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IHToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableHToken} from './IInitializableHToken.sol';\\n\\n/**\\n * @title IHToken\\n * @author HopeLend\\n * @notice Defines the basic interface for an HToken.\\n */\\ninterface IHToken is IERC20, IScaledBalanceToken, IInitializableHToken {\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The scaled amount being transferred\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @notice Mints `amount` hTokens to `user`\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted hTokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address caller,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Burns hTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @dev In some instances, the mint event could be emitted from a burn transaction\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the hTokens will be burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The next liquidity index of the reserve\\n   */\\n  function burn(\\n    address from,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @notice Mints hTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @notice Transfers hTokens in the event of a borrow being liquidated, in case the liquidators reclaims the hToken\\n   * @param from The address getting liquidated, current owner of the hTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   */\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external;\\n\\n  /**\\n   * @notice Transfers the underlying asset to `target`.\\n   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n   * @param target The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   */\\n  function transferUnderlyingTo(address target, uint256 amount) external;\\n\\n  /**\\n   * @notice Handles the underlying received by the hToken after the transfer has been completed.\\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\n   * transfer is concluded. However in the future there may be hTokens that allow for example to stake the underlying\\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n   * @param user The user executing the repayment\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed\\n   * @param amount The amount getting repaid\\n   */\\n  function handleRepayment(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Allow passing a signed message to approve spending\\n   * @dev implements the permit function as for\\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner The owner of the funds\\n   * @param spender The spender\\n   * @param value The amount\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n   * @param v Signature param\\n   * @param s Signature param\\n   * @param r Signature param\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this hToken (E.g. WETH for hWETH)\\n   * @return The address of the underlying asset\\n   */\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the HopeLend treasury, receiving the fees on this hToken.\\n   * @return Address of the HopeLend treasury\\n   */\\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Get the domain separator for the token\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the nonce for owner.\\n   * @param owner The address of the owner\\n   * @return The nonce of the owner\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice if the asset is stHOPE, there will be LT rewards.\\n   * @param stHope The address of the stakingHOPE\\n   * @param to The address of the recipient\\n   * @return The amount of withdrew\\n   */\\n  function withdrawLTRewards(address stHope, address to) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6004c749e32ba7c59d9867801318bd83e42a6f7b366166602d1dc8cbe129fd5\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableDebtToken\\n * @author HopeLend\\n * @notice Interface for the initialize function common between debt tokens\\n */\\ninterface IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when a debt token is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param debtTokenDecimals The decimals of the debt token\\n   * @param debtTokenName The name of the debt token\\n   * @param debtTokenSymbol The symbol of the debt token\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    uint8 debtTokenDecimals,\\n    string debtTokenName,\\n    string debtTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the debt token.\\n   * @param pool The pool contract that is initializing this contract\\n   * @param underlyingAsset The address of the underlying asset of this hToken (E.g. WETH for hWETH)\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n   * @param debtTokenName The name of the token\\n   * @param debtTokenSymbol The symbol of the token\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address underlyingAsset,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb167242507f7e67e330f44dd0e638e5c4263d698d82685cd6aab195464f3c120\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IInitializableHToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableHToken\\n * @author HopeLend\\n * @notice Interface for the initialize function on HToken\\n */\\ninterface IInitializableHToken {\\n  /**\\n   * @dev Emitted when an hToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param treasury The address of the treasury\\n   * @param hTokenDecimals The decimals of the underlying\\n   * @param hTokenName The name of the hToken\\n   * @param hTokenSymbol The symbol of the hToken\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    uint8 hTokenDecimals,\\n    string hTokenName,\\n    string hTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the hToken\\n   * @param pool The pool contract that is initializing this contract\\n   * @param treasury The address of the HopeLend treasury, receiving the fees on this hToken\\n   * @param underlyingAsset The address of the underlying asset of this hToken (E.g. WETH for hWETH)\\n   * @param hTokenDecimals The decimals of the hToken, same as the underlying asset's\\n   * @param hTokenName The name of the hToken\\n   * @param hTokenSymbol The symbol of the hToken\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    uint8 hTokenDecimals,\\n    string calldata hTokenName,\\n    string calldata hTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0x51d8e22a1db81544887117d6963be9843e17aefd5807dc898c348d50b957e322\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/ILT.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\n\\ninterface ILT {\\n    /**\\n     * @dev Emitted when LT inflation rate update\\n     *\\n     * Note once a year\\n     */\\n    event UpdateMiningParameters(uint256 time, uint256 rate, uint256 supply);\\n\\n    /**\\n     * @dev Emitted when set LT minter,can set the minter only once, at creation\\n     */\\n    event SetMinter(address indexed minter);\\n\\n    function rate() external view returns (uint256);\\n\\n    /**\\n     * @notice Update mining rate and supply at the start of the epoch\\n     * @dev   Callable by any address, but only once per epoch\\n     *        Total supply becomes slightly larger if this function is called late\\n     */\\n    function updateMiningParameters() external;\\n\\n    /**\\n     * @notice Get timestamp of the next mining epoch start while simultaneously updating mining parameters\\n     * @return Timestamp of the next epoch\\n     */\\n    function futureEpochTimeWrite() external returns (uint256);\\n\\n    /**\\n     * @notice Current number of tokens in existence (claimed or unclaimed)\\n     */\\n    function availableSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice How much supply is mintable from start timestamp till end timestamp\\n     * @param start Start of the time interval (timestamp)\\n     * @param end End of the time interval (timestamp)\\n     * @return Tokens mintable from `start` till `end`\\n     */\\n    function mintableInTimeframe(uint256 start, uint256 end) external view returns (uint256);\\n\\n    /**\\n     *  @notice Set the minter address\\n     *  @dev Only callable once, when minter has not yet been set\\n     *  @param _minter Address of the minter\\n     */\\n    function setMinter(address _minter) external;\\n\\n    /**\\n     *  @notice Mint `value` tokens and assign them to `to`\\n     *   @dev Emits a Transfer event originating from 0x00\\n     *   @param to The account that will receive the created tokens\\n     *   @param value The amount that will be created\\n     *   @return bool success\\n     */\\n    function mint(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @notice Burn `value` tokens belonging to `msg.sender`\\n     * @dev Emits a Transfer event with a destination of 0x00\\n     * @param value The amount that will be burned\\n     * @return bool success\\n     */\\n    function burn(uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5d76c16bf5bc36c059bc40f6f16499ded973a07ff4cdc944e486f7d3965a73a9\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/ILendingGauge.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport './ILT.sol';\\nimport './IGaugeController.sol';\\nimport './IVotingEscrow.sol';\\nimport './IMinter.sol';\\nimport '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingGauge {\\n  /**\\n   * @dev Emitted when LendingGauge is created.\\n   * @param addressesProvider The address of the registered PoolAddressesProvider\\n   * @param assset The address of the underlying asset of the reserve\\n   * @param _phases Utilization rate and allocation ratio parameter configuration\\n   */\\n  event AddPhases(address indexed addressesProvider, address indexed assset, DataTypes.Phase[] _phases);\\n\\n  function initialize(\\n    address _pool,\\n    address _minter,\\n    address _votingEscrow,\\n    address _underlyingAsset\\n  ) external;\\n\\n  function votingEscrow() external view returns (IVotingEscrow);\\n\\n  function controller() external view returns (IGaugeController);\\n\\n  function minter() external view returns (IMinter);\\n\\n  function updateAllocation() external returns (bool);\\n\\n  function isKilled() external returns (bool);\\n\\n  function hvCheckpoint(address _addr) external;\\n\\n  function hvUpdateLiquidityLimit(address _addr) external;\\n}\\n\",\"keccak256\":\"0x77252bef599685bee767d47059cd2992d43e1bea42e59f5ec729386d90cfac05\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IMinter {\\n    function token() external view returns (address);\\n\\n    function controller() external view returns (address);\\n\\n    function minted(address user, address gauge) external view returns (uint256);\\n\\n    function mint(address gaugeAddress) external;\\n}\\n\",\"keccak256\":\"0xed25776681be143c0de2df9b95f3a46f392f4e26db10824fa9761113c79763c0\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author HopeLend\\n * @notice Defines the basic interface for an HopeLend Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the hTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the hTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of hTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useHTokens True if the repayment is done using hTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useHTokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveHToken True if the liquidators wants to receive the collateral hTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveHToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted hTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of hTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the hTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying hTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the hTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of hTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the hTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of hTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent hTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole hToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve hTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual hToken dust balance, if the user hToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithHTokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveHToken True if the liquidators wants to receive the collateral hTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveHToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.hopeLend.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.hopeLend.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an hToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param hTokenAddress The address of the hToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address hTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an hToken transfer\\n   * @dev Only callable by the overlying hToken of the `asset`\\n   * @param asset The address of the underlying asset of the hToken\\n   * @param from The user from which the hTokens are transferred\\n   * @param to The user receiving the hTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The hToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The hToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to hToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Updates the percent fo fee to Vault.\\n   * @param feeToVaultPercent The percent fo fee to Vault. 100% = 1e4\\n   */\\n  function updateFeeToVaultPercent(uint256 feeToVaultPercent) external;\\n\\n    /**\\n   * @notice Returns the percent of fee\\n   * @return feeToVaultPercent The the percent of fee, 100% = 1e4\\n   */\\n  function getFeeToVaultPercent() external view returns (uint256 feeToVaultPercent);\\n\\n  /**\\n   * @notice Returns the address of vault\\n   * @return feeToVault The the address of vault\\n   */\\n  function getFeeToVault() external view returns (address feeToVault);\\n\\n  /**\\n   * @notice Set the address of vault\\n   * @param feeToVault The id of the category\\n   */\\n  function setFeeToVault(address feeToVault) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of hTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying hTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the hTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of hTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc19137da96d8db950726e37ab4ac16f10939f61a2bf119dc4f7a5cf286ed6943\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author HopeLend\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the HopeLend market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple HopeLend markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x38f1da33df9b0e41408d012e128a385ffe79ab22431815fe1e8ce3e77caa5312\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author HopeLend\\n * @notice Interface for the HopeLend price oracle.\\n */\\ninterface IPriceOracleGetter {\\n  /**\\n   * @notice Returns the base currency address\\n   * @dev Address 0x0 is reserved for USD as base currency.\\n   * @return Returns the base currency address.\\n   */\\n  function BASE_CURRENCY() external view returns (address);\\n\\n  /**\\n   * @notice Returns the base currency unit\\n   * @dev 1 ether for ETH, 1e8 for USD.\\n   * @return Returns the base currency unit.\\n   */\\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x22a02e9b76a11483278a396c9934854a4d6ae946649bca4506faf34ee1182dff\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IPriceOracleSentinel.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IPriceOracleSentinel\\n * @author HopeLend\\n * @notice Defines the basic interface for the PriceOracleSentinel\\n */\\ninterface IPriceOracleSentinel {\\n  /**\\n   * @dev Emitted after the sequencer oracle is updated\\n   * @param newSequencerOracle The new sequencer oracle\\n   */\\n  event SequencerOracleUpdated(address newSequencerOracle);\\n\\n  /**\\n   * @dev Emitted after the grace period is updated\\n   * @param newGracePeriod The new grace period value\\n   */\\n  event GracePeriodUpdated(uint256 newGracePeriod);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider contract\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Returns true if the `borrow` operation is allowed.\\n   * @dev Operation not allowed when PriceOracle is down or grace period not passed.\\n   * @return True if the `borrow` operation is allowed, false otherwise.\\n   */\\n  function isBorrowAllowed() external view returns (bool);\\n\\n  /**\\n   * @notice Returns true if the `liquidation` operation is allowed.\\n   * @dev Operation not allowed when PriceOracle is down or grace period not passed.\\n   * @return True if the `liquidation` operation is allowed, false otherwise.\\n   */\\n  function isLiquidationAllowed() external view returns (bool);\\n\\n  /**\\n   * @notice Updates the address of the sequencer oracle\\n   * @param newSequencerOracle The address of the new Sequencer Oracle to use\\n   */\\n  function setSequencerOracle(address newSequencerOracle) external;\\n\\n  /**\\n   * @notice Updates the duration of the grace period\\n   * @param newGracePeriod The value of the new grace period duration\\n   */\\n  function setGracePeriod(uint256 newGracePeriod) external;\\n\\n  /**\\n   * @notice Returns the SequencerOracle\\n   * @return The address of the sequencer oracle contract\\n   */\\n  function getSequencerOracle() external view returns (address);\\n\\n  /**\\n   * @notice Returns the grace period\\n   * @return The duration of the grace period\\n   */\\n  function getGracePeriod() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb3072ead0bae8d0b1ee6e7ca032df8d01881e316f2e6b4a8d646bb22411c485e\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IReserveInterestRateStrategy\\n * @author HopeLend\\n * @notice Interface for the calculation of the interest rates\\n */\\ninterface IReserveInterestRateStrategy {\\n  /**\\n   * @notice Calculates the interest rates depending on the reserve's state and configurations\\n   * @param params The parameters needed to calculate interest rates\\n   * @return liquidityRate The liquidity rate expressed in rays\\n   * @return stableBorrowRate The stable borrow rate expressed in rays\\n   * @return variableBorrowRate The variable borrow rate expressed in rays\\n   */\\n  function calculateInterestRates(DataTypes.CalculateInterestRatesParams memory params)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n}\\n\",\"keccak256\":\"0x27e81a0737556bbf8e51c15c0599b50f58a3d3165adecb54258f7929fdcc72bd\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author HopeLend\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted tokens\\n   * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Mint(\\n    address indexed caller,\\n    address indexed onBehalfOf,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted after the burn action\\n   * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n   * @param from The address from which the tokens will be burned\\n   * @param target The address that will receive the underlying, if any\\n   * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Burn(\\n    address indexed from,\\n    address indexed target,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @notice Returns the scaled balance of the user.\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n   * at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   */\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled total supply\\n   */\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   */\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns last index interest was accrued to the user's balance\\n   * @param user The address of the user\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\n   */\\n  function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x434eb17cb12dcfbb562a5be9a811f2c71672ed96e79c5ff1b7e0c9e53dcca19b\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IStableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IInitializableDebtToken} from './IInitializableDebtToken.sol';\\n\\n/**\\n * @title IStableDebtToken\\n * @author HopeLend\\n * @notice Defines the interface for the stable debt token\\n * @dev It does not inherit from IERC20 to save in code size\\n */\\ninterface IStableDebtToken is IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when new stable debt is minted\\n   * @param user The address of the user who triggered the minting\\n   * @param onBehalfOf The recipient of stable debt tokens\\n   * @param amount The amount minted (user entered amount + balance increase from interest)\\n   * @param currentBalance The balance of the user based on the previous balance and balance increase from interest\\n   * @param balanceIncrease The increase in balance since the last action of the user 'onBehalfOf'\\n   * @param newRate The rate of the debt after the minting\\n   * @param avgStableRate The next average stable rate after the minting\\n   * @param newTotalSupply The next total supply of the stable debt token after the action\\n   */\\n  event Mint(\\n    address indexed user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 newRate,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Emitted when new stable debt is burned\\n   * @param from The address from which the debt will be burned\\n   * @param amount The amount being burned (user entered amount - balance increase from interest)\\n   * @param currentBalance The balance of the user based on the previous balance and balance increase from interest\\n   * @param balanceIncrease The increase in balance since the last action of 'from'\\n   * @param avgStableRate The next average stable rate after the burning\\n   * @param newTotalSupply The next total supply of the stable debt token after the action\\n   */\\n  event Burn(\\n    address indexed from,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @notice Mints debt token to the `onBehalfOf` address.\\n   * @dev The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt tokens to mint\\n   * @param rate The rate of the debt being minted\\n   * @return True if it is the first borrow, false otherwise\\n   * @return The total stable debt\\n   * @return The average stable borrow rate\\n   */\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 rate\\n  )\\n    external\\n    returns (\\n      bool,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice Burns debt of `user`\\n   * @dev The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @dev In some instances, a burn transaction will emit a mint event\\n   * if the amount to burn is less than the interest the user earned\\n   * @param from The address from which the debt will be burned\\n   * @param amount The amount of debt tokens getting burned\\n   * @return The total stable debt\\n   * @return The average stable borrow rate\\n   */\\n  function burn(address from, uint256 amount) external returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the average rate of all the stable rate loans.\\n   * @return The average stable rate\\n   */\\n  function getAverageStableRate() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the stable rate of the user debt\\n   * @param user The address of the user\\n   * @return The stable rate of the user\\n   */\\n  function getUserStableRate(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the timestamp of the last update of the user\\n   * @param user The address of the user\\n   * @return The timestamp\\n   */\\n  function getUserLastUpdated(address user) external view returns (uint40);\\n\\n  /**\\n   * @notice Returns the principal, the total supply, the average stable rate and the timestamp for the last update\\n   * @return The principal\\n   * @return The total supply\\n   * @return The average stable rate\\n   * @return The timestamp of the last update\\n   */\\n  function getSupplyData()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint40\\n    );\\n\\n  /**\\n   * @notice Returns the timestamp of the last update of the total supply\\n   * @return The timestamp\\n   */\\n  function getTotalSupplyLastUpdated() external view returns (uint40);\\n\\n  /**\\n   * @notice Returns the total supply and the average stable rate\\n   * @return The total supply\\n   * @return The average rate\\n   */\\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the principal debt balance of the user\\n   * @return The debt balance of the user since the last burn/mint action\\n   */\\n  function principalBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this stableDebtToken (E.g. WETH for stableDebtWETH)\\n   * @return The address of the underlying asset\\n   */\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x80474428c8c696316a4e4a8ffaf63c48b6a42c1a907ae4df11d96af4fbd5702c\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableDebtToken} from './IInitializableDebtToken.sol';\\n\\n/**\\n * @title IVariableDebtToken\\n * @author HopeLend\\n * @notice Defines the basic interface for a variable debt token.\\n */\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n  /**\\n   * @notice Mints debt token to the `onBehalfOf` address\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt being minted\\n   * @param index The variable debt index of the reserve\\n   * @return True if the previous balance of the user is 0, false otherwise\\n   * @return The scaled total debt of the reserve\\n   */\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool, uint256);\\n\\n  /**\\n   * @notice Burns user variable debt\\n   * @dev In some instances, a burn transaction will emit a mint event\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the debt will be burned\\n   * @param amount The amount getting burned\\n   * @param index The variable debt index of the reserve\\n   * @return The scaled total debt of the reserve\\n   */\\n  function burn(\\n    address from,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\\n   * @return The address of the underlying asset\\n   */\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x91a13971bbb8d5f8586006b94e6f7d75d56e0916bf2015ff87cc08399518c7c7\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IVotingEscrow {\\n    struct Point {\\n        int256 bias;\\n        int256 slope;\\n        uint256 ts;\\n        uint256 blk;\\n    }\\n\\n    struct LockedBalance {\\n        int256 amount;\\n        uint256 end;\\n    }\\n\\n    event Deposit(\\n        address indexed provider,\\n        address indexed beneficiary,\\n        uint256 value,\\n        uint256 afterAmount,\\n        uint256 indexed locktime,\\n        uint256 _type,\\n        uint256 ts\\n    );\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n\\n    event Supply(uint256 prevSupply, uint256 supply);\\n\\n    event SetSmartWalletChecker(address sender, address indexed newChecker, address oldChecker);\\n\\n    event SetPermit2Address(address oldAddress, address newAddress);\\n\\n    /***\\n     * @dev Get the most recently recorded rate of voting power decrease for `_addr`\\n     * @param _addr Address of the user wallet\\n     * @return Value of the slope\\n     */\\n    function getLastUserSlope(address _addr) external view returns (int256);\\n\\n    /***\\n     * @dev Get the timestamp for checkpoint `_idx` for `_addr`\\n     * @param _addr User wallet address\\n     * @param _idx User epoch number\\n     * @return Epoch time of the checkpoint\\n     */\\n    function userPointHistoryTs(address _addr, uint256 _idx) external view returns (uint256);\\n\\n    /***\\n     * @dev Get timestamp when `_addr`'s lock finishes\\n     * @param _addr User wallet\\n     * @return Epoch time of the lock end\\n     */\\n    function lockedEnd(address _addr) external view returns (uint256);\\n\\n    function createLock(uint256 _value, uint256 _unlockTime, uint256 nonce, uint256 deadline, bytes memory signature) external;\\n\\n    function createLockFor(\\n        address _beneficiary,\\n        uint256 _value,\\n        uint256 _unlockTime,\\n        uint256 nonce,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n\\n    function increaseAmount(uint256 _value, uint256 nonce, uint256 deadline, bytes memory signature) external;\\n\\n    function increaseAmountFor(address _beneficiary, uint256 _value, uint256 nonce, uint256 deadline, bytes memory signature) external;\\n\\n    function increaseUnlockTime(uint256 _unlockTime) external;\\n\\n    function checkpointSupply() external;\\n\\n    function withdraw() external;\\n\\n    function epoch() external view returns (uint256);\\n\\n    function getUserPointHistory(address _userAddress, uint256 _index) external view returns (Point memory);\\n\\n    function supplyPointHistory(uint256 _index) external view returns (int256 bias, int256 slope, uint256 ts, uint256 blk);\\n\\n    /***\\n     * @notice Get the current voting power for `msg.sender`\\n     * @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n     * @param _addr User wallet address\\n     * @param _t Epoch time to return voting power at\\n     * @return User voting power\\n     * @dev return the present voting power if _t is 0\\n     */\\n    function balanceOfAtTime(address _addr, uint256 _t) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalSupplyAtTime(uint256 _t) external view returns (uint256);\\n\\n    function userPointEpoch(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaedac39ee5a1099b6fd2a58f417cd0c8c0891399e1fc73f0a5f636dee861d09b\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author HopeLend\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n  uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n  uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n  uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n  uint256 internal constant MAX_VALID_LTV = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n  uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n  uint256 public constant DEBT_CEILING_DECIMALS = 2;\\n  uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n  /**\\n   * @notice Sets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @param ltv The new ltv\\n   */\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /**\\n   * @notice Gets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @return The loan to value\\n   */\\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return self.data & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   */\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold)\\n    internal\\n    pure\\n  {\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation threshold\\n   */\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @param bonus The new liquidation bonus\\n   */\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus)\\n    internal\\n    pure\\n  {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_BONUS_MASK) |\\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation bonus\\n   */\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @param decimals The decimals\\n   */\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals)\\n    internal\\n    pure\\n  {\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @return The decimals of the asset\\n   */\\n  function getDecimals(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @param active The active state\\n   */\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n    self.data =\\n      (self.data & ACTIVE_MASK) |\\n      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @return The active state\\n   */\\n  function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~ACTIVE_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @param frozen The frozen state\\n   */\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n    self.data =\\n      (self.data & FROZEN_MASK) |\\n      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @return The frozen state\\n   */\\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @param paused The paused state\\n   */\\n  function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {\\n    self.data =\\n      (self.data & PAUSED_MASK) |\\n      (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @return The paused state\\n   */\\n  function getPaused(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~PAUSED_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the borrowable in isolation flag for the reserve.\\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\n   * amount will be accumulated in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @param borrowable True if the asset is borrowable\\n   */\\n  function setBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self, bool borrowable)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\n      (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowable in isolation flag for the reserve.\\n   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\n   * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @return The borrowable in isolation flag\\n   */\\n  function getBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @param siloed True if the asset is siloed\\n   */\\n  function setSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self, bool siloed)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & SILOED_BORROWING_MASK) |\\n      (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @return The siloed borrowing flag\\n   */\\n  function getSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\n   */\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrowing state\\n   */\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables stable rate borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n   */\\n  function setStableRateBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool enabled\\n  ) internal pure {\\n    self.data =\\n      (self.data & STABLE_BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the stable rate borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The stable rate borrowing state\\n   */\\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @param reserveFactor The reserve factor\\n   */\\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor)\\n    internal\\n    pure\\n  {\\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);\\n\\n    self.data =\\n      (self.data & RESERVE_FACTOR_MASK) |\\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @return The reserve factor\\n   */\\n  function getReserveFactor(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @param borrowCap The borrow cap\\n   */\\n  function setBorrowCap(DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap)\\n    internal\\n    pure\\n  {\\n    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrow cap\\n   */\\n  function getBorrowCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @param supplyCap The supply cap\\n   */\\n  function setSupplyCap(DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap)\\n    internal\\n    pure\\n  {\\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The supply cap\\n   */\\n  function getSupplyCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the debt ceiling in isolation mode for the asset\\n   * @param self The reserve configuration\\n   * @param ceiling The maximum debt ceiling for the asset\\n   */\\n  function setDebtCeiling(DataTypes.ReserveConfigurationMap memory self, uint256 ceiling)\\n    internal\\n    pure\\n  {\\n    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\n\\n    self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\n   * @param self The reserve configuration\\n   * @return The debt ceiling (0 = isolation mode disabled)\\n   */\\n  function getDebtCeiling(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation protocol fee of the reserve\\n   * @param self The reserve configuration\\n   * @param liquidationProtocolFee The liquidation protocol fee\\n   */\\n  function setLiquidationProtocolFee(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 liquidationProtocolFee\\n  ) internal pure {\\n    require(\\n      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n      Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n    );\\n\\n    self.data =\\n      (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n      (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the liquidation protocol fee\\n   * @param self The reserve configuration\\n   * @return The liquidation protocol fee\\n   */\\n  function getLiquidationProtocolFee(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return\\n      (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @param unbackedMintCap The unbacked mint cap\\n   */\\n  function setUnbackedMintCap(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 unbackedMintCap\\n  ) internal pure {\\n    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);\\n\\n    self.data =\\n      (self.data & UNBACKED_MINT_CAP_MASK) |\\n      (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The unbacked mint cap\\n   */\\n  function getUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the eMode asset category\\n   * @param self The reserve configuration\\n   * @param category The asset category when the user selects the eMode\\n   */\\n  function setEModeCategory(DataTypes.ReserveConfigurationMap memory self, uint256 category)\\n    internal\\n    pure\\n  {\\n    require(category <= MAX_VALID_EMODE_CATEGORY, Errors.INVALID_EMODE_CATEGORY);\\n\\n    self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the eMode asset category\\n   * @param self The reserve configuration\\n   * @return The eMode category for the asset\\n   */\\n  function getEModeCategory(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the flashloanable flag for the reserve\\n   * @param self The reserve configuration\\n   * @param flashLoanEnabled True if the asset is flashloanable, false otherwise\\n   */\\n  function setFlashLoanEnabled(DataTypes.ReserveConfigurationMap memory self, bool flashLoanEnabled)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & FLASHLOAN_ENABLED_MASK) |\\n      (uint256(flashLoanEnabled ? 1 : 0) << FLASHLOAN_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the flashloanable flag for the reserve\\n   * @param self The reserve configuration\\n   * @return The flashloanable flag\\n   */\\n  function getFlashLoanEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Gets the configuration flags of the reserve\\n   * @param self The reserve configuration\\n   * @return The state flag representing active\\n   * @return The state flag representing frozen\\n   * @return The state flag representing borrowing enabled\\n   * @return The state flag representing stableRateBorrowing enabled\\n   * @return The state flag representing paused\\n   */\\n  function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      bool,\\n      bool,\\n      bool,\\n      bool,\\n      bool\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~ACTIVE_MASK) != 0,\\n      (dataLocal & ~FROZEN_MASK) != 0,\\n      (dataLocal & ~BORROWING_MASK) != 0,\\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n      (dataLocal & ~PAUSED_MASK) != 0\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the configuration parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing ltv\\n   * @return The state param representing liquidation threshold\\n   * @return The state param representing liquidation bonus\\n   * @return The state param representing reserve decimals\\n   * @return The state param representing reserve factor\\n   * @return The state param representing eMode category\\n   */\\n  function getParams(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\\n      (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the caps parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing borrow cap\\n   * @return The state param representing supply cap.\\n   */\\n  function getCaps(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256, uint256)\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n      (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xb7e43350baabec8a35ef6749feb733cb279d41da7e29ad1b92a78638fa425a7a\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/configuration/UserConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\nimport {ReserveConfiguration} from './ReserveConfiguration.sol';\\n\\n/**\\n * @title UserConfiguration library\\n * @author HopeLend\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserConfiguration {\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n  uint256 internal constant BORROWING_MASK =\\n    0x5555555555555555555555555555555555555555555555555555555555555555;\\n  uint256 internal constant COLLATERAL_MASK =\\n    0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\\n\\n  /**\\n   * @notice Sets if the user is borrowing the reserve identified by reserveIndex\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @param borrowing True if the user is borrowing the reserve, false otherwise\\n   */\\n  function setBorrowing(\\n    DataTypes.UserConfigurationMap storage self,\\n    uint256 reserveIndex,\\n    bool borrowing\\n  ) internal {\\n    unchecked {\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\\n      uint256 bit = 1 << (reserveIndex << 1);\\n      if (borrowing) {\\n        self.data |= bit;\\n      } else {\\n        self.data &= ~bit;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets if the user is using as collateral the reserve identified by reserveIndex\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @param usingAsCollateral True if the user is using the reserve as collateral, false otherwise\\n   */\\n  function setUsingAsCollateral(\\n    DataTypes.UserConfigurationMap storage self,\\n    uint256 reserveIndex,\\n    bool usingAsCollateral\\n  ) internal {\\n    unchecked {\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\\n      uint256 bit = 1 << ((reserveIndex << 1) + 1);\\n      if (usingAsCollateral) {\\n        self.data |= bit;\\n      } else {\\n        self.data &= ~bit;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns if a user has been using the reserve for borrowing or as collateral\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\n   */\\n  function isUsingAsCollateralOrBorrowing(\\n    DataTypes.UserConfigurationMap memory self,\\n    uint256 reserveIndex\\n  ) internal pure returns (bool) {\\n    unchecked {\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\\n      return (self.data >> (reserveIndex << 1)) & 3 != 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Validate a user has been using the reserve for borrowing\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @return True if the user has been using a reserve for borrowing, false otherwise\\n   */\\n  function isBorrowing(DataTypes.UserConfigurationMap memory self, uint256 reserveIndex)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    unchecked {\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\\n      return (self.data >> (reserveIndex << 1)) & 1 != 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Validate a user has been using the reserve as collateral\\n   * @param self The configuration object\\n   * @param reserveIndex The index of the reserve in the bitmap\\n   * @return True if the user has been using a reserve as collateral, false otherwise\\n   */\\n  function isUsingAsCollateral(DataTypes.UserConfigurationMap memory self, uint256 reserveIndex)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    unchecked {\\n      require(reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT, Errors.INVALID_RESERVE_INDEX);\\n      return (self.data >> ((reserveIndex << 1) + 1)) & 1 != 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if a user has been supplying only one reserve as collateral\\n   * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\n   * @param self The configuration object\\n   * @return True if the user has been supplying as collateral one reserve, false otherwise\\n   */\\n  function isUsingAsCollateralOne(DataTypes.UserConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    uint256 collateralData = self.data & COLLATERAL_MASK;\\n    return collateralData != 0 && (collateralData & (collateralData - 1) == 0);\\n  }\\n\\n  /**\\n   * @notice Checks if a user has been supplying any reserve as collateral\\n   * @param self The configuration object\\n   * @return True if the user has been supplying as collateral any reserve, false otherwise\\n   */\\n  function isUsingAsCollateralAny(DataTypes.UserConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return self.data & COLLATERAL_MASK != 0;\\n  }\\n\\n  /**\\n   * @notice Checks if a user has been borrowing only one asset\\n   * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\n   * @param self The configuration object\\n   * @return True if the user has been supplying as collateral one reserve, false otherwise\\n   */\\n  function isBorrowingOne(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n    uint256 borrowingData = self.data & BORROWING_MASK;\\n    return borrowingData != 0 && (borrowingData & (borrowingData - 1) == 0);\\n  }\\n\\n  /**\\n   * @notice Checks if a user has been borrowing from any reserve\\n   * @param self The configuration object\\n   * @return True if the user has been borrowing any reserve, false otherwise\\n   */\\n  function isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n    return self.data & BORROWING_MASK != 0;\\n  }\\n\\n  /**\\n   * @notice Checks if a user has not been using any reserve for borrowing or supply\\n   * @param self The configuration object\\n   * @return True if the user has not been borrowing or supplying any reserve, false otherwise\\n   */\\n  function isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n    return self.data == 0;\\n  }\\n\\n  /**\\n   * @notice Returns the Isolation Mode state of the user\\n   * @param self The configuration object\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @return True if the user is in isolation mode, false otherwise\\n   * @return The address of the only asset used as collateral\\n   * @return The debt ceiling of the reserve\\n   */\\n  function getIsolationModeState(\\n    DataTypes.UserConfigurationMap memory self,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList\\n  )\\n    internal\\n    view\\n    returns (\\n      bool,\\n      address,\\n      uint256\\n    )\\n  {\\n    if (isUsingAsCollateralOne(self)) {\\n      uint256 assetId = _getFirstAssetIdByMask(self, COLLATERAL_MASK);\\n\\n      address assetAddress = reservesList[assetId];\\n      uint256 ceiling = reservesData[assetAddress].configuration.getDebtCeiling();\\n      if (ceiling != 0) {\\n        return (true, assetAddress, ceiling);\\n      }\\n    }\\n    return (false, address(0), 0);\\n  }\\n\\n  /**\\n   * @notice Returns the siloed borrowing state for the user\\n   * @param self The configuration object\\n   * @param reservesData The data of all the reserves\\n   * @param reservesList The reserve list\\n   * @return True if the user has borrowed a siloed asset, false otherwise\\n   * @return The address of the only borrowed asset\\n   */\\n  function getSiloedBorrowingState(\\n    DataTypes.UserConfigurationMap memory self,\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList\\n  ) internal view returns (bool, address) {\\n    if (isBorrowingOne(self)) {\\n      uint256 assetId = _getFirstAssetIdByMask(self, BORROWING_MASK);\\n      address assetAddress = reservesList[assetId];\\n      if (reservesData[assetAddress].configuration.getSiloedBorrowing()) {\\n        return (true, assetAddress);\\n      }\\n    }\\n\\n    return (false, address(0));\\n  }\\n\\n  /**\\n   * @notice Returns the address of the first asset flagged in the bitmap given the corresponding bitmask\\n   * @param self The configuration object\\n   * @return The index of the first asset flagged in the bitmap once the corresponding mask is applied\\n   */\\n  function _getFirstAssetIdByMask(DataTypes.UserConfigurationMap memory self, uint256 mask)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    unchecked {\\n      uint256 bitmapData = self.data & mask;\\n      uint256 firstAssetPosition = bitmapData & ~(bitmapData - 1);\\n      uint256 id;\\n\\n      while ((firstAssetPosition >>= 2) != 0) {\\n        id += 1;\\n      }\\n      return id;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xbe2976e0873c46202a992e9cd74d67b28b95555fb7981b6aaabfb96ed488ad17\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Errors library\\n * @author HopeLend\\n * @notice Defines the error messages emitted by the different contracts of the HopeLend protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_HTOKEN = '11'; // 'The caller of the function is not an HToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (hToken supply or accruedToTreasury)'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\n  string public constant FAILOVER_ALREADY_ACTIVE = '92'; // Failover is already active\\n  string public constant FAILOVER_ALREADY_DEACTIVATED = '93'; // Failover is already deactivated\\n  string public constant CALLER_MUST_BE_LENDING_GAUGE = '94'; // 'The caller of this function must be a lending gauge'\\n  string public constant PARAMETER_ADDRESS_NOT_ZERO = '95'; // 'Parameter address is not zero'\\n  string public constant LENDING_GAUGE_PERCENTAGE_NOT_MATCH = '96'; // 'LendingGauge end percentage must greater than start percentage && start percentage must be increasing'\\n  string public constant INVALID_PHASES_LENGTH = '97'; // 'LendingGauge phases length invalid'\\n  string public constant PHASES_NOT_DEFINED = '98'; // 'LendingGauge phases not defined'\\n  string public constant MUST_BE_NON_NEGATIVE = '99'; // 'Result must be non-negative'\\n  string public constant INVALID_FEE_TO_VAULT_PERCENT = '100'; // Invalid FeeToVaultPercent \\n}\\n\",\"keccak256\":\"0xe154c34ecd3b9b957750d4b1f48a50ae6b58be3e6ea67566f8a35bf75ce1569f\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/helpers/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title Helpers library\\n * @author HopeLend\\n */\\nlibrary Helpers {\\n  /**\\n   * @notice Fetches the user current stable and variable debt balances\\n   * @param user The user address\\n   * @param reserveCache The reserve cache data object\\n   * @return The stable debt balance\\n   * @return The variable debt balance\\n   */\\n  function getUserCurrentDebt(address user, DataTypes.ReserveCache memory reserveCache)\\n    internal\\n    view\\n    returns (uint256, uint256)\\n  {\\n    return (\\n      IERC20(reserveCache.stableDebtTokenAddress).balanceOf(user),\\n      IERC20(reserveCache.variableDebtTokenAddress).balanceOf(user)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x429565c39e8a7afd76cc733cbda2ed68bbb6bdf9ceb73390bd46d1341e0c20b9\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/logic/BorrowLogic.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';\\nimport {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IStableDebtToken} from '../../../interfaces/IStableDebtToken.sol';\\nimport {IVariableDebtToken} from '../../../interfaces/IVariableDebtToken.sol';\\nimport {IHToken} from '../../../interfaces/IHToken.sol';\\nimport {IAbsGauge} from '../../../interfaces/IAbsGauge.sol';\\nimport {ILendingGauge} from '../../../interfaces/ILendingGauge.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {Helpers} from '../helpers/Helpers.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\nimport {ValidationLogic} from './ValidationLogic.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {IsolationModeLogic} from './IsolationModeLogic.sol';\\n\\n/**\\n * @title BorrowLogic library\\n * @author HopeLend\\n * @notice Implements the base logic for all the actions related to borrowing\\n */\\nlibrary BorrowLogic {\\n  using ReserveLogic for DataTypes.ReserveCache;\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using GPv2SafeERC20 for IERC20;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using SafeCast for uint256;\\n\\n  // See `IPool` for descriptions\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useHTokens\\n  );\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @notice Implements the borrow feature. Borrowing allows users that provided collateral to draw liquidity from the\\n   * HopeLend protocol proportionally to their collateralization power. For isolated positions, it also increases the\\n   * isolated debt.\\n   * @dev  Emits the `Borrow()` event\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param eModeCategories The configuration of all the efficiency mode categories\\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\n   * @param params The additional parameters needed to execute the borrow function\\n   */\\n  function executeBorrow(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    DataTypes.ExecuteBorrowParams memory params\\n  ) public {\\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n\\n    reserve.updateState(reserveCache);\\n\\n    (\\n      bool isolationModeActive,\\n      address isolationModeCollateralAddress,\\n      uint256 isolationModeDebtCeiling\\n    ) = userConfig.getIsolationModeState(reservesData, reservesList);\\n\\n    ValidationLogic.validateBorrow(\\n      reservesData,\\n      reservesList,\\n      eModeCategories,\\n      DataTypes.ValidateBorrowParams({\\n        reserveCache: reserveCache,\\n        userConfig: userConfig,\\n        asset: params.asset,\\n        userAddress: params.onBehalfOf,\\n        amount: params.amount,\\n        interestRateMode: params.interestRateMode,\\n        maxStableLoanPercent: params.maxStableRateBorrowSizePercent,\\n        reservesCount: params.reservesCount,\\n        oracle: params.oracle,\\n        userEModeCategory: params.userEModeCategory,\\n        priceOracleSentinel: params.priceOracleSentinel,\\n        isolationModeActive: isolationModeActive,\\n        isolationModeCollateralAddress: isolationModeCollateralAddress,\\n        isolationModeDebtCeiling: isolationModeDebtCeiling\\n      })\\n    );\\n\\n    uint256 currentStableRate = 0;\\n    bool isFirstBorrowing = false;\\n\\n    if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n      currentStableRate = reserve.currentStableBorrowRate;\\n\\n      (\\n        isFirstBorrowing,\\n        reserveCache.nextTotalStableDebt,\\n        reserveCache.nextAvgStableBorrowRate\\n      ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).mint(\\n        params.user,\\n        params.onBehalfOf,\\n        params.amount,\\n        currentStableRate\\n      );\\n    } else {\\n      (isFirstBorrowing, reserveCache.nextScaledVariableDebt) = IVariableDebtToken(\\n        reserveCache\\n          .variableDebtTokenAddress\\n      )\\n        .mint(params.user, params.onBehalfOf, params.amount, reserveCache.nextVariableBorrowIndex);\\n    }\\n\\n    if (isFirstBorrowing) {\\n      userConfig.setBorrowing(reserve.id, true);\\n    }\\n\\n    if (isolationModeActive) {\\n      uint256 nextIsolationModeTotalDebt = reservesData[isolationModeCollateralAddress]\\n        .isolationModeTotalDebt += (params.amount /\\n        10 **\\n          (reserveCache.reserveConfiguration.getDecimals() -\\n            ReserveConfiguration.DEBT_CEILING_DECIMALS))\\n        .toUint128();\\n      emit IsolationModeTotalDebtUpdated(\\n        isolationModeCollateralAddress,\\n        nextIsolationModeTotalDebt\\n      );\\n    }\\n\\n    reserve.updateInterestRates(\\n      reserveCache,\\n      params.asset,\\n      0,\\n      params.releaseUnderlying ? params.amount : 0\\n    );\\n\\n    if (params.releaseUnderlying) {\\n      IHToken(reserveCache.hTokenAddress).transferUnderlyingTo(params.user, params.amount);\\n    }\\n\\n    {\\n      ILendingGauge lendingGauge = IAbsGauge(reserveCache.hTokenAddress).lendingGauge();\\n      if (address(lendingGauge) != address(0)) {\\n        lendingGauge.updateAllocation();\\n      }\\n    }\\n\\n    emit Borrow(\\n      params.asset,\\n      params.user,\\n      params.onBehalfOf,\\n      params.amount,\\n      params.interestRateMode,\\n      params.interestRateMode == DataTypes.InterestRateMode.STABLE\\n        ? currentStableRate\\n        : reserve.currentVariableBorrowRate,\\n      params.referralCode\\n    );\\n  }\\n\\n  /**\\n   * @notice Implements the repay feature. Repaying transfers the underlying back to the hToken and clears the\\n   * equivalent amount of debt for the user by burning the corresponding debt token. For isolated positions, it also\\n   * reduces the isolated debt.\\n   * @dev  Emits the `Repay()` event\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\n   * @param params The additional parameters needed to execute the repay function\\n   * @return The actual amount being repaid\\n   */\\n  function executeRepay(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    DataTypes.ExecuteRepayParams memory params\\n  ) external returns (uint256) {\\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n    reserve.updateState(reserveCache);\\n\\n    (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(\\n      params.onBehalfOf,\\n      reserveCache\\n    );\\n\\n    ValidationLogic.validateRepay(\\n      reserveCache,\\n      params.amount,\\n      params.interestRateMode,\\n      params.onBehalfOf,\\n      stableDebt,\\n      variableDebt\\n    );\\n\\n    uint256 paybackAmount = params.interestRateMode == DataTypes.InterestRateMode.STABLE\\n      ? stableDebt\\n      : variableDebt;\\n\\n    // Allows a user to repay with hTokens without leaving dust from interest.\\n    if (params.useHTokens && params.amount == type(uint256).max) {\\n      params.amount = IHToken(reserveCache.hTokenAddress).balanceOf(msg.sender);\\n    }\\n\\n    if (params.amount < paybackAmount) {\\n      paybackAmount = params.amount;\\n    }\\n\\n    if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n      (reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(\\n        reserveCache\\n          .stableDebtTokenAddress\\n      )\\n        .burn(params.onBehalfOf, paybackAmount);\\n    } else {\\n      reserveCache.nextScaledVariableDebt = IVariableDebtToken(\\n        reserveCache\\n          .variableDebtTokenAddress\\n      )\\n        .burn(params.onBehalfOf, paybackAmount, reserveCache.nextVariableBorrowIndex);\\n    }\\n\\n    reserve.updateInterestRates(\\n      reserveCache,\\n      params.asset,\\n      params.useHTokens ? 0 : paybackAmount,\\n      0\\n    );\\n    if (stableDebt + variableDebt - paybackAmount == 0) {\\n      userConfig.setBorrowing(reserve.id, false);\\n    }\\n\\n    IsolationModeLogic.updateIsolatedDebtIfIsolated(\\n      reservesData,\\n      reservesList,\\n      userConfig,\\n      reserveCache,\\n      paybackAmount\\n    );\\n\\n    if (params.useHTokens) {\\n      IHToken(reserveCache.hTokenAddress).burn(\\n        msg.sender,\\n        reserveCache.hTokenAddress,\\n        paybackAmount,\\n        reserveCache.nextLiquidityIndex\\n      );\\n    } else {\\n      IERC20(params.asset).safeTransferFrom(msg.sender, reserveCache.hTokenAddress, paybackAmount);\\n      IHToken(reserveCache.hTokenAddress).handleRepayment(\\n        msg.sender,\\n        params.onBehalfOf,\\n        paybackAmount\\n      );\\n    }\\n\\n    ILendingGauge lendingGauge = IAbsGauge(reserveCache.hTokenAddress).lendingGauge();\\n    if (address(lendingGauge) != address(0)) {\\n      lendingGauge.updateAllocation();\\n    }\\n\\n    emit Repay(params.asset, params.onBehalfOf, msg.sender, paybackAmount, params.useHTokens);\\n\\n    return paybackAmount;\\n  }\\n\\n  /**\\n   * @notice Implements the rebalance stable borrow rate feature. In case of liquidity crunches on the protocol, stable\\n   * rate borrows might need to be rebalanced to bring back equilibrium between the borrow and supply APYs.\\n   * @dev The rules that define if a position can be rebalanced are implemented in `ValidationLogic.validateRebalanceStableBorrowRate()`\\n   * @dev Emits the `RebalanceStableBorrowRate()` event\\n   * @param reserve The state of the reserve of the asset being repaid\\n   * @param asset The asset of the position being rebalanced\\n   * @param user The user being rebalanced\\n   */\\n  function executeRebalanceStableBorrowRate(\\n    DataTypes.ReserveData storage reserve,\\n    address asset,\\n    address user\\n  ) external {\\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n    reserve.updateState(reserveCache);\\n\\n    ValidationLogic.validateRebalanceStableBorrowRate(reserve, reserveCache, asset);\\n\\n    IStableDebtToken stableDebtToken = IStableDebtToken(reserveCache.stableDebtTokenAddress);\\n    uint256 stableDebt = IERC20(address(stableDebtToken)).balanceOf(user);\\n\\n    stableDebtToken.burn(user, stableDebt);\\n\\n    (, reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = stableDebtToken\\n      .mint(user, user, stableDebt, reserve.currentStableBorrowRate);\\n\\n    reserve.updateInterestRates(reserveCache, asset, 0, 0);\\n\\n    emit RebalanceStableBorrowRate(asset, user);\\n  }\\n\\n  /**\\n   * @notice Implements the swap borrow rate feature. Borrowers can swap from variable to stable positions at any time.\\n   * @dev Emits the `Swap()` event\\n   * @param reserve The of the reserve of the asset being repaid\\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\n   * @param asset The asset of the position being swapped\\n   * @param interestRateMode The current interest rate mode of the position being swapped\\n   */\\n  function executeSwapBorrowRateMode(\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    address asset,\\n    DataTypes.InterestRateMode interestRateMode\\n  ) external {\\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\\n\\n    reserve.updateState(reserveCache);\\n\\n    (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(\\n      msg.sender,\\n      reserveCache\\n    );\\n\\n    ValidationLogic.validateSwapRateMode(\\n      reserve,\\n      reserveCache,\\n      userConfig,\\n      stableDebt,\\n      variableDebt,\\n      interestRateMode\\n    );\\n\\n    if (interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n      (reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(\\n        reserveCache\\n          .stableDebtTokenAddress\\n      )\\n        .burn(msg.sender, stableDebt);\\n\\n      (, reserveCache.nextScaledVariableDebt) = IVariableDebtToken(\\n        reserveCache\\n          .variableDebtTokenAddress\\n      )\\n        .mint(msg.sender, msg.sender, stableDebt, reserveCache.nextVariableBorrowIndex);\\n    } else {\\n      reserveCache.nextScaledVariableDebt = IVariableDebtToken(\\n        reserveCache\\n          .variableDebtTokenAddress\\n      )\\n        .burn(msg.sender, variableDebt, reserveCache.nextVariableBorrowIndex);\\n\\n      (, reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(\\n        reserveCache\\n          .stableDebtTokenAddress\\n      )\\n        .mint(msg.sender, msg.sender, variableDebt, reserve.currentStableBorrowRate);\\n    }\\n\\n    reserve.updateInterestRates(reserveCache, asset, 0, 0);\\n\\n    emit SwapBorrowRateMode(asset, msg.sender, interestRateMode);\\n  }\\n}\\n\",\"keccak256\":\"0x78cbae503dc98e6d0e25d2c0bc2734ba444bed88655d512d2d95de544d0c37be\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/logic/EModeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IPriceOracleGetter} from '../../../interfaces/IPriceOracleGetter.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {WadRayMath} from '../math/WadRayMath.sol';\\nimport {PercentageMath} from '../math/PercentageMath.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\nimport {ValidationLogic} from './ValidationLogic.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\n\\n/**\\n * @title EModeLogic library\\n * @author HopeLend\\n * @notice Implements the base logic for all the actions related to the eMode\\n */\\nlibrary EModeLogic {\\n  using ReserveLogic for DataTypes.ReserveCache;\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using GPv2SafeERC20 for IERC20;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n\\n  // See `IPool` for descriptions\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @notice Updates the user efficiency mode category\\n   * @dev Will revert if user is borrowing non-compatible asset or change will drop HF < HEALTH_FACTOR_LIQUIDATION_THRESHOLD\\n   * @dev Emits the `UserEModeSet` event\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param eModeCategories The configuration of all the efficiency mode categories\\n   * @param usersEModeCategory The state of all users efficiency mode category\\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\n   * @param params The additional parameters needed to execute the setUserEMode function\\n   */\\n  function executeSetUserEMode(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\n    mapping(address => uint8) storage usersEModeCategory,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    DataTypes.ExecuteSetUserEModeParams memory params\\n  ) external {\\n    ValidationLogic.validateSetUserEMode(\\n      reservesData,\\n      reservesList,\\n      eModeCategories,\\n      userConfig,\\n      params.reservesCount,\\n      params.categoryId\\n    );\\n\\n    uint8 prevCategoryId = usersEModeCategory[msg.sender];\\n    usersEModeCategory[msg.sender] = params.categoryId;\\n\\n    if (prevCategoryId != 0) {\\n      ValidationLogic.validateHealthFactor(\\n        reservesData,\\n        reservesList,\\n        eModeCategories,\\n        userConfig,\\n        msg.sender,\\n        params.categoryId,\\n        params.reservesCount,\\n        params.oracle\\n      );\\n    }\\n    emit UserEModeSet(msg.sender, params.categoryId);\\n  }\\n\\n  /**\\n   * @notice Gets the eMode configuration and calculates the eMode asset price if a custom oracle is configured\\n   * @dev The eMode asset price returned is 0 if no oracle is specified\\n   * @param category The user eMode category\\n   * @param oracle The price oracle\\n   * @return The eMode ltv\\n   * @return The eMode liquidation threshold\\n   * @return The eMode asset price\\n   */\\n  function getEModeConfiguration(\\n    DataTypes.EModeCategory storage category,\\n    IPriceOracleGetter oracle\\n  )\\n    internal\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 eModeAssetPrice = 0;\\n    address eModePriceSource = category.priceSource;\\n\\n    if (eModePriceSource != address(0)) {\\n      eModeAssetPrice = oracle.getAssetPrice(eModePriceSource);\\n    }\\n\\n    return (category.ltv, category.liquidationThreshold, eModeAssetPrice);\\n  }\\n\\n  /**\\n   * @notice Checks if eMode is active for a user and if yes, if the asset belongs to the eMode category chosen\\n   * @param eModeUserCategory The user eMode category\\n   * @param eModeAssetCategory The asset eMode category\\n   * @return True if eMode is active and the asset belongs to the eMode category chosen by the user, false otherwise\\n   */\\n  function isInEModeCategory(uint256 eModeUserCategory, uint256 eModeAssetCategory)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (eModeUserCategory != 0 && eModeAssetCategory == eModeUserCategory);\\n  }\\n}\\n\",\"keccak256\":\"0x0d2ab4e7fdef8e293bc9799cba5344b3c57ea0eca39304d579be862433865cb3\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from '../../../interfaces/IScaledBalanceToken.sol';\\nimport {IPriceOracleGetter} from '../../../interfaces/IPriceOracleGetter.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {PercentageMath} from '../math/PercentageMath.sol';\\nimport {WadRayMath} from '../math/WadRayMath.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {EModeLogic} from './EModeLogic.sol';\\n\\n/**\\n * @title GenericLogic library\\n * @author HopeLend\\n * @notice Implements protocol-level logic to calculate and validate the state of a user\\n */\\nlibrary GenericLogic {\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n  struct CalculateUserAccountDataVars {\\n    uint256 assetPrice;\\n    uint256 assetUnit;\\n    uint256 userBalanceInBaseCurrency;\\n    uint256 decimals;\\n    uint256 ltv;\\n    uint256 liquidationThreshold;\\n    uint256 i;\\n    uint256 healthFactor;\\n    uint256 totalCollateralInBaseCurrency;\\n    uint256 totalDebtInBaseCurrency;\\n    uint256 avgLtv;\\n    uint256 avgLiquidationThreshold;\\n    uint256 eModeAssetPrice;\\n    uint256 eModeLtv;\\n    uint256 eModeLiqThreshold;\\n    uint256 eModeAssetCategory;\\n    address currentReserveAddress;\\n    bool hasZeroLtvCollateral;\\n    bool isInEModeCategory;\\n  }\\n\\n  /**\\n   * @notice Calculates the user data across the reserves.\\n   * @dev It includes the total liquidity/collateral/borrow balances in the base currency used by the price feed,\\n   * the average Loan To Value, the average Liquidation Ratio, and the Health factor.\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param eModeCategories The configuration of all the efficiency mode categories\\n   * @param params Additional parameters needed for the calculation\\n   * @return The total collateral of the user in the base currency used by the price feed\\n   * @return The total debt of the user in the base currency used by the price feed\\n   * @return The average ltv of the user\\n   * @return The average liquidation threshold of the user\\n   * @return The health factor of the user\\n   * @return True if the ltv is zero, false otherwise\\n   */\\n  function calculateUserAccountData(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\n    DataTypes.CalculateUserAccountDataParams memory params\\n  )\\n    internal\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      bool\\n    )\\n  {\\n    if (params.userConfig.isEmpty()) {\\n      return (0, 0, 0, 0, type(uint256).max, false);\\n    }\\n\\n    CalculateUserAccountDataVars memory vars;\\n\\n    if (params.userEModeCategory != 0) {\\n      (vars.eModeLtv, vars.eModeLiqThreshold, vars.eModeAssetPrice) = EModeLogic\\n        .getEModeConfiguration(\\n          eModeCategories[params.userEModeCategory],\\n          IPriceOracleGetter(params.oracle)\\n        );\\n    }\\n\\n    while (vars.i < params.reservesCount) {\\n      if (!params.userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {\\n        unchecked {\\n          ++vars.i;\\n        }\\n        continue;\\n      }\\n\\n      vars.currentReserveAddress = reservesList[vars.i];\\n\\n      if (vars.currentReserveAddress == address(0)) {\\n        unchecked {\\n          ++vars.i;\\n        }\\n        continue;\\n      }\\n\\n      DataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];\\n\\n      (\\n        vars.ltv,\\n        vars.liquidationThreshold,\\n        ,\\n        vars.decimals,\\n        ,\\n        vars.eModeAssetCategory\\n      ) = currentReserve.configuration.getParams();\\n\\n      unchecked {\\n        vars.assetUnit = 10**vars.decimals;\\n      }\\n\\n      vars.assetPrice = vars.eModeAssetPrice != 0 &&\\n        params.userEModeCategory == vars.eModeAssetCategory\\n        ? vars.eModeAssetPrice\\n        : IPriceOracleGetter(params.oracle).getAssetPrice(vars.currentReserveAddress);\\n\\n      if (vars.liquidationThreshold != 0 && params.userConfig.isUsingAsCollateral(vars.i)) {\\n        vars.userBalanceInBaseCurrency = _getUserBalanceInBaseCurrency(\\n          params.user,\\n          currentReserve,\\n          vars.assetPrice,\\n          vars.assetUnit\\n        );\\n\\n        vars.totalCollateralInBaseCurrency += vars.userBalanceInBaseCurrency;\\n\\n        vars.isInEModeCategory = EModeLogic.isInEModeCategory(\\n          params.userEModeCategory,\\n          vars.eModeAssetCategory\\n        );\\n\\n        if (vars.ltv != 0) {\\n          vars.avgLtv +=\\n            vars.userBalanceInBaseCurrency *\\n            (vars.isInEModeCategory ? vars.eModeLtv : vars.ltv);\\n        } else {\\n          vars.hasZeroLtvCollateral = true;\\n        }\\n\\n        vars.avgLiquidationThreshold +=\\n          vars.userBalanceInBaseCurrency *\\n          (vars.isInEModeCategory ? vars.eModeLiqThreshold : vars.liquidationThreshold);\\n      }\\n\\n      if (params.userConfig.isBorrowing(vars.i)) {\\n        vars.totalDebtInBaseCurrency += _getUserDebtInBaseCurrency(\\n          params.user,\\n          currentReserve,\\n          vars.assetPrice,\\n          vars.assetUnit\\n        );\\n      }\\n\\n      unchecked {\\n        ++vars.i;\\n      }\\n    }\\n\\n    unchecked {\\n      vars.avgLtv = vars.totalCollateralInBaseCurrency != 0\\n        ? vars.avgLtv / vars.totalCollateralInBaseCurrency\\n        : 0;\\n      vars.avgLiquidationThreshold = vars.totalCollateralInBaseCurrency != 0\\n        ? vars.avgLiquidationThreshold / vars.totalCollateralInBaseCurrency\\n        : 0;\\n    }\\n\\n    vars.healthFactor = (vars.totalDebtInBaseCurrency == 0)\\n      ? type(uint256).max\\n      : (vars.totalCollateralInBaseCurrency.percentMul(vars.avgLiquidationThreshold)).wadDiv(\\n        vars.totalDebtInBaseCurrency\\n      );\\n    return (\\n      vars.totalCollateralInBaseCurrency,\\n      vars.totalDebtInBaseCurrency,\\n      vars.avgLtv,\\n      vars.avgLiquidationThreshold,\\n      vars.healthFactor,\\n      vars.hasZeroLtvCollateral\\n    );\\n  }\\n\\n  /**\\n   * @notice Calculates the maximum amount that can be borrowed depending on the available collateral, the total debt\\n   * and the average Loan To Value\\n   * @param totalCollateralInBaseCurrency The total collateral in the base currency used by the price feed\\n   * @param totalDebtInBaseCurrency The total borrow balance in the base currency used by the price feed\\n   * @param ltv The average loan to value\\n   * @return The amount available to borrow in the base currency of the used by the price feed\\n   */\\n  function calculateAvailableBorrows(\\n    uint256 totalCollateralInBaseCurrency,\\n    uint256 totalDebtInBaseCurrency,\\n    uint256 ltv\\n  ) internal pure returns (uint256) {\\n    uint256 availableBorrowsInBaseCurrency = totalCollateralInBaseCurrency.percentMul(ltv);\\n\\n    if (availableBorrowsInBaseCurrency < totalDebtInBaseCurrency) {\\n      return 0;\\n    }\\n\\n    availableBorrowsInBaseCurrency = availableBorrowsInBaseCurrency - totalDebtInBaseCurrency;\\n    return availableBorrowsInBaseCurrency;\\n  }\\n\\n  /**\\n   * @notice Calculates total debt of the user in the based currency used to normalize the values of the assets\\n   * @dev This fetches the `balanceOf` of the stable and variable debt tokens for the user. For gas reasons, the\\n   * variable debt balance is calculated by fetching `scaledBalancesOf` normalized debt, which is cheaper than\\n   * fetching `balanceOf`\\n   * @param user The address of the user\\n   * @param reserve The data of the reserve for which the total debt of the user is being calculated\\n   * @param assetPrice The price of the asset for which the total debt of the user is being calculated\\n   * @param assetUnit The value representing one full unit of the asset (10^decimals)\\n   * @return The total debt of the user normalized to the base currency\\n   */\\n  function _getUserDebtInBaseCurrency(\\n    address user,\\n    DataTypes.ReserveData storage reserve,\\n    uint256 assetPrice,\\n    uint256 assetUnit\\n  ) private view returns (uint256) {\\n    // fetching variable debt\\n    uint256 userTotalDebt = IScaledBalanceToken(reserve.variableDebtTokenAddress).scaledBalanceOf(\\n      user\\n    );\\n    if (userTotalDebt != 0) {\\n      userTotalDebt = userTotalDebt.rayMul(reserve.getNormalizedDebt());\\n    }\\n\\n    userTotalDebt = userTotalDebt + IERC20(reserve.stableDebtTokenAddress).balanceOf(user);\\n\\n    userTotalDebt = assetPrice * userTotalDebt;\\n\\n    unchecked {\\n      return userTotalDebt / assetUnit;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates total hToken balance of the user in the based currency used by the price oracle\\n   * @dev For gas reasons, the hToken balance is calculated by fetching `scaledBalancesOf` normalized debt, which\\n   * is cheaper than fetching `balanceOf`\\n   * @param user The address of the user\\n   * @param reserve The data of the reserve for which the total hToken balance of the user is being calculated\\n   * @param assetPrice The price of the asset for which the total hToken balance of the user is being calculated\\n   * @param assetUnit The value representing one full unit of the asset (10^decimals)\\n   * @return The total hToken balance of the user normalized to the base currency of the price oracle\\n   */\\n  function _getUserBalanceInBaseCurrency(\\n    address user,\\n    DataTypes.ReserveData storage reserve,\\n    uint256 assetPrice,\\n    uint256 assetUnit\\n  ) private view returns (uint256) {\\n    uint256 normalizedIncome = reserve.getNormalizedIncome();\\n    uint256 balance = (\\n      IScaledBalanceToken(reserve.hTokenAddress).scaledBalanceOf(user).rayMul(normalizedIncome)\\n    ) * assetPrice;\\n\\n    unchecked {\\n      return balance / assetUnit;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x980ddc7bfc6a8a0946839b2408da1cd1eec6d4bce4eb3e6383d7dfa97fd85c45\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/logic/IsolationModeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {DataTypes} from '../types/DataTypes.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\n\\n/**\\n * @title IsolationModeLogic library\\n * @author HopeLend\\n * @notice Implements the base logic for handling repayments for assets borrowed in isolation mode\\n */\\nlibrary IsolationModeLogic {\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n  using SafeCast for uint256;\\n\\n  // See `IPool` for descriptions\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @notice updated the isolated debt whenever a position collateralized by an isolated asset is repaid or liquidated\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param userConfig The user configuration mapping\\n   * @param reserveCache The cached data of the reserve\\n   * @param repayAmount The amount being repaid\\n   */\\n  function updateIsolatedDebtIfIsolated(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    DataTypes.ReserveCache memory reserveCache,\\n    uint256 repayAmount\\n  ) internal {\\n    (bool isolationModeActive, address isolationModeCollateralAddress, ) = userConfig\\n      .getIsolationModeState(reservesData, reservesList);\\n\\n    if (isolationModeActive) {\\n      uint128 isolationModeTotalDebt = reservesData[isolationModeCollateralAddress]\\n        .isolationModeTotalDebt;\\n\\n      uint128 isolatedDebtRepaid = (repayAmount /\\n        10 **\\n          (reserveCache.reserveConfiguration.getDecimals() -\\n            ReserveConfiguration.DEBT_CEILING_DECIMALS)).toUint128();\\n\\n      // since the debt ceiling does not take into account the interest accrued, it might happen that amount\\n      // repaid > debt in isolation mode\\n      if (isolationModeTotalDebt <= isolatedDebtRepaid) {\\n        reservesData[isolationModeCollateralAddress].isolationModeTotalDebt = 0;\\n        emit IsolationModeTotalDebtUpdated(isolationModeCollateralAddress, 0);\\n      } else {\\n        uint256 nextIsolationModeTotalDebt = reservesData[isolationModeCollateralAddress]\\n          .isolationModeTotalDebt = isolationModeTotalDebt - isolatedDebtRepaid;\\n        emit IsolationModeTotalDebtUpdated(\\n          isolationModeCollateralAddress,\\n          nextIsolationModeTotalDebt\\n        );\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x65564d04630dffc2a95bf5e3cfa0678d37a65698f73ec4f48955d6b90bcc5fe0\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';\\nimport {IStableDebtToken} from '../../../interfaces/IStableDebtToken.sol';\\nimport {IVariableDebtToken} from '../../../interfaces/IVariableDebtToken.sol';\\nimport {IReserveInterestRateStrategy} from '../../../interfaces/IReserveInterestRateStrategy.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {MathUtils} from '../math/MathUtils.sol';\\nimport {WadRayMath} from '../math/WadRayMath.sol';\\nimport {PercentageMath} from '../math/PercentageMath.sol';\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\nimport {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author HopeLend\\n * @notice Implements the logic to update the reserves state\\n */\\nlibrary ReserveLogic {\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using SafeCast for uint256;\\n  using GPv2SafeERC20 for IERC20;\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n  // See `IPool` for descriptions\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @notice Returns the ongoing normalized income for the reserve.\\n   * @dev A value of 1e27 means there is no income. As time passes, the income is accrued\\n   * @dev A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n   * @param reserve The reserve object\\n   * @return The normalized income, expressed in ray\\n   */\\n  function getNormalizedIncome(DataTypes.ReserveData storage reserve)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n    //solium-disable-next-line\\n    if (timestamp == block.timestamp) {\\n      //if the index was updated in the same block, no need to perform any calculation\\n      return reserve.liquidityIndex;\\n    } else {\\n      return\\n        MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\\n          reserve.liquidityIndex\\n        );\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the ongoing normalized variable debt for the reserve.\\n   * @dev A value of 1e27 means there is no debt. As time passes, the debt is accrued\\n   * @dev A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n   * @param reserve The reserve object\\n   * @return The normalized variable debt, expressed in ray\\n   */\\n  function getNormalizedDebt(DataTypes.ReserveData storage reserve)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n    //solium-disable-next-line\\n    if (timestamp == block.timestamp) {\\n      //if the index was updated in the same block, no need to perform any calculation\\n      return reserve.variableBorrowIndex;\\n    } else {\\n      return\\n        MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\\n          reserve.variableBorrowIndex\\n        );\\n    }\\n  }\\n\\n  /**\\n   * @notice Updates the liquidity cumulative index and the variable borrow index.\\n   * @param reserve The reserve object\\n   * @param reserveCache The caching layer for the reserve data\\n   */\\n  function updateState(\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.ReserveCache memory reserveCache\\n  ) internal {\\n    // If time didn't pass since last stored timestamp, skip state update\\n    //solium-disable-next-line\\n    if (reserve.lastUpdateTimestamp == uint40(block.timestamp)) {\\n      return;\\n    }\\n\\n    _updateIndexes(reserve, reserveCache);\\n    _accrueToTreasury(reserve, reserveCache);\\n\\n    //solium-disable-next-line\\n    reserve.lastUpdateTimestamp = uint40(block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example\\n   * to accumulate the flashloan fee to the reserve, and spread it between all the suppliers.\\n   * @param reserve The reserve object\\n   * @param totalLiquidity The total liquidity available in the reserve\\n   * @param amount The amount to accumulate\\n   * @return The next liquidity index of the reserve\\n   */\\n  function cumulateToLiquidityIndex(\\n    DataTypes.ReserveData storage reserve,\\n    uint256 totalLiquidity,\\n    uint256 amount\\n  ) internal returns (uint256) {\\n    //next liquidity index is calculated this way: `((amount / totalLiquidity) + 1) * liquidityIndex`\\n    //division `amount / totalLiquidity` done in ray for precision\\n    uint256 result = (amount.wadToRay().rayDiv(totalLiquidity.wadToRay()) + WadRayMath.RAY).rayMul(\\n      reserve.liquidityIndex\\n    );\\n    reserve.liquidityIndex = result.toUint128();\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Initializes a reserve.\\n   * @param reserve The reserve object\\n   * @param hTokenAddress The address of the overlying htoken contract\\n   * @param stableDebtTokenAddress The address of the overlying stable debt token contract\\n   * @param variableDebtTokenAddress The address of the overlying variable debt token contract\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function init(\\n    DataTypes.ReserveData storage reserve,\\n    address hTokenAddress,\\n    address stableDebtTokenAddress,\\n    address variableDebtTokenAddress,\\n    address interestRateStrategyAddress\\n  ) internal {\\n    require(reserve.hTokenAddress == address(0), Errors.RESERVE_ALREADY_INITIALIZED);\\n\\n    reserve.liquidityIndex = uint128(WadRayMath.RAY);\\n    reserve.variableBorrowIndex = uint128(WadRayMath.RAY);\\n    reserve.hTokenAddress = hTokenAddress;\\n    reserve.stableDebtTokenAddress = stableDebtTokenAddress;\\n    reserve.variableDebtTokenAddress = variableDebtTokenAddress;\\n    reserve.interestRateStrategyAddress = interestRateStrategyAddress;\\n  }\\n\\n  struct UpdateInterestRatesLocalVars {\\n    uint256 nextLiquidityRate;\\n    uint256 nextStableRate;\\n    uint256 nextVariableRate;\\n    uint256 totalVariableDebt;\\n  }\\n\\n  /**\\n   * @notice Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate.\\n   * @param reserve The reserve reserve to be updated\\n   * @param reserveCache The caching layer for the reserve data\\n   * @param reserveAddress The address of the reserve to be updated\\n   * @param liquidityAdded The amount of liquidity added to the protocol (supply or repay) in the previous action\\n   * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\\n   */\\n  function updateInterestRates(\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.ReserveCache memory reserveCache,\\n    address reserveAddress,\\n    uint256 liquidityAdded,\\n    uint256 liquidityTaken\\n  ) internal {\\n    UpdateInterestRatesLocalVars memory vars;\\n\\n    vars.totalVariableDebt = reserveCache.nextScaledVariableDebt.rayMul(\\n      reserveCache.nextVariableBorrowIndex\\n    );\\n\\n    (\\n      vars.nextLiquidityRate,\\n      vars.nextStableRate,\\n      vars.nextVariableRate\\n    ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress).calculateInterestRates(\\n      DataTypes.CalculateInterestRatesParams({\\n        unbacked: reserve.unbacked,\\n        liquidityAdded: liquidityAdded,\\n        liquidityTaken: liquidityTaken,\\n        totalStableDebt: reserveCache.nextTotalStableDebt,\\n        totalVariableDebt: vars.totalVariableDebt,\\n        averageStableBorrowRate: reserveCache.nextAvgStableBorrowRate,\\n        reserveFactor: reserveCache.reserveFactor,\\n        reserve: reserveAddress,\\n        hToken: reserveCache.hTokenAddress\\n      })\\n    );\\n\\n    reserve.currentLiquidityRate = vars.nextLiquidityRate.toUint128();\\n    reserve.currentStableBorrowRate = vars.nextStableRate.toUint128();\\n    reserve.currentVariableBorrowRate = vars.nextVariableRate.toUint128();\\n\\n    emit ReserveDataUpdated(\\n      reserveAddress,\\n      vars.nextLiquidityRate,\\n      vars.nextStableRate,\\n      vars.nextVariableRate,\\n      reserveCache.nextLiquidityIndex,\\n      reserveCache.nextVariableBorrowIndex\\n    );\\n  }\\n\\n  struct AccrueToTreasuryLocalVars {\\n    uint256 prevTotalStableDebt;\\n    uint256 prevTotalVariableDebt;\\n    uint256 currTotalVariableDebt;\\n    uint256 cumulatedStableInterest;\\n    uint256 totalDebtAccrued;\\n    uint256 amountToMint;\\n  }\\n\\n  /**\\n   * @notice Mints part of the repaid interest to the reserve treasury as a function of the reserve factor for the\\n   * specific asset.\\n   * @param reserve The reserve to be updated\\n   * @param reserveCache The caching layer for the reserve data\\n   */\\n  function _accrueToTreasury(\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.ReserveCache memory reserveCache\\n  ) internal {\\n    AccrueToTreasuryLocalVars memory vars;\\n\\n    if (reserveCache.reserveFactor == 0) {\\n      return;\\n    }\\n\\n    //calculate the total variable debt at moment of the last interaction\\n    vars.prevTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(\\n      reserveCache.currVariableBorrowIndex\\n    );\\n\\n    //calculate the new total variable debt after accumulation of the interest on the index\\n    vars.currTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(\\n      reserveCache.nextVariableBorrowIndex\\n    );\\n\\n    //calculate the stable debt until the last timestamp update\\n    vars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(\\n      reserveCache.currAvgStableBorrowRate,\\n      reserveCache.stableDebtLastUpdateTimestamp,\\n      reserveCache.reserveLastUpdateTimestamp\\n    );\\n\\n    vars.prevTotalStableDebt = reserveCache.currPrincipalStableDebt.rayMul(\\n      vars.cumulatedStableInterest\\n    );\\n\\n    //debt accrued is the sum of the current debt minus the sum of the debt at the last update\\n    vars.totalDebtAccrued =\\n      vars.currTotalVariableDebt +\\n      reserveCache.currTotalStableDebt -\\n      vars.prevTotalVariableDebt -\\n      vars.prevTotalStableDebt;\\n\\n    vars.amountToMint = vars.totalDebtAccrued.percentMul(reserveCache.reserveFactor);\\n\\n    if (vars.amountToMint != 0) {\\n      reserve.accruedToTreasury += vars\\n        .amountToMint\\n        .rayDiv(reserveCache.nextLiquidityIndex)\\n        .toUint128();\\n    }\\n  }\\n\\n  /**\\n   * @notice Updates the reserve indexes and the timestamp of the update.\\n   * @param reserve The reserve reserve to be updated\\n   * @param reserveCache The cache layer holding the cached protocol data\\n   */\\n  function _updateIndexes(\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.ReserveCache memory reserveCache\\n  ) internal {\\n    // Only cumulating on the supply side if there is any income being produced\\n    // The case of Reserve Factor 100% is not a problem (currentLiquidityRate == 0),\\n    // as liquidity index should not be updated\\n    if (reserveCache.currLiquidityRate != 0) {\\n      uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(\\n        reserveCache.currLiquidityRate,\\n        reserveCache.reserveLastUpdateTimestamp\\n      );\\n      reserveCache.nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n        reserveCache.currLiquidityIndex\\n      );\\n      reserve.liquidityIndex = reserveCache.nextLiquidityIndex.toUint128();\\n    }\\n\\n    // Variable borrow index only gets updated if there is any variable debt.\\n    // reserveCache.currVariableBorrowRate != 0 is not a correct validation,\\n    // because a positive base variable rate can be stored on\\n    // reserveCache.currVariableBorrowRate, but the index should not increase\\n    if (reserveCache.currScaledVariableDebt != 0) {\\n      uint256 cumulatedVariableBorrowInterest = MathUtils.calculateCompoundedInterest(\\n        reserveCache.currVariableBorrowRate,\\n        reserveCache.reserveLastUpdateTimestamp\\n      );\\n      reserveCache.nextVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(\\n        reserveCache.currVariableBorrowIndex\\n      );\\n      reserve.variableBorrowIndex = reserveCache.nextVariableBorrowIndex.toUint128();\\n    }\\n  }\\n\\n  /**\\n   * @notice Creates a cache object to avoid repeated storage reads and external contract calls when updating state and\\n   * interest rates.\\n   * @param reserve The reserve object for which the cache will be filled\\n   * @return The cache object\\n   */\\n  function cache(DataTypes.ReserveData storage reserve)\\n    internal\\n    view\\n    returns (DataTypes.ReserveCache memory)\\n  {\\n    DataTypes.ReserveCache memory reserveCache;\\n\\n    reserveCache.reserveConfiguration = reserve.configuration;\\n    reserveCache.reserveFactor = reserveCache.reserveConfiguration.getReserveFactor();\\n    reserveCache.currLiquidityIndex = reserveCache.nextLiquidityIndex = reserve.liquidityIndex;\\n    reserveCache.currVariableBorrowIndex = reserveCache.nextVariableBorrowIndex = reserve\\n      .variableBorrowIndex;\\n    reserveCache.currLiquidityRate = reserve.currentLiquidityRate;\\n    reserveCache.currVariableBorrowRate = reserve.currentVariableBorrowRate;\\n\\n    reserveCache.hTokenAddress = reserve.hTokenAddress;\\n    reserveCache.stableDebtTokenAddress = reserve.stableDebtTokenAddress;\\n    reserveCache.variableDebtTokenAddress = reserve.variableDebtTokenAddress;\\n\\n    reserveCache.reserveLastUpdateTimestamp = reserve.lastUpdateTimestamp;\\n\\n    reserveCache.currScaledVariableDebt = reserveCache.nextScaledVariableDebt = IVariableDebtToken(\\n      reserveCache\\n        .variableDebtTokenAddress\\n    )\\n      .scaledTotalSupply();\\n\\n    (\\n      reserveCache.currPrincipalStableDebt,\\n      reserveCache.currTotalStableDebt,\\n      reserveCache.currAvgStableBorrowRate,\\n      reserveCache.stableDebtLastUpdateTimestamp\\n    ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).getSupplyData();\\n\\n    // by default the actions are considered as not affecting the debt balances.\\n    // if the action involves mint/burn of debt, the cache needs to be updated\\n    reserveCache.nextTotalStableDebt = reserveCache.currTotalStableDebt;\\n    reserveCache.nextAvgStableBorrowRate = reserveCache.currAvgStableBorrowRate;\\n\\n    return reserveCache;\\n  }\\n}\\n\",\"keccak256\":\"0x499113e26bba9d66e9e44a0ebcdf36dfec5190a88d3380095a4bdd1a0a416e1b\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {Address} from '../../../dependencies/openzeppelin/contracts/Address.sol';\\nimport {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';\\nimport {IReserveInterestRateStrategy} from '../../../interfaces/IReserveInterestRateStrategy.sol';\\nimport {IStableDebtToken} from '../../../interfaces/IStableDebtToken.sol';\\nimport {IScaledBalanceToken} from '../../../interfaces/IScaledBalanceToken.sol';\\nimport {IPriceOracleGetter} from '../../../interfaces/IPriceOracleGetter.sol';\\nimport {IHToken} from '../../../interfaces/IHToken.sol';\\nimport {IPriceOracleSentinel} from '../../../interfaces/IPriceOracleSentinel.sol';\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {WadRayMath} from '../math/WadRayMath.sol';\\nimport {PercentageMath} from '../math/PercentageMath.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\nimport {ReserveLogic} from './ReserveLogic.sol';\\nimport {GenericLogic} from './GenericLogic.sol';\\nimport {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author HopeLend\\n * @notice Implements functions to validate the different actions of the protocol\\n */\\nlibrary ValidationLogic {\\n  using ReserveLogic for DataTypes.ReserveData;\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using SafeCast for uint256;\\n  using GPv2SafeERC20 for IERC20;\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\n  using Address for address;\\n\\n  // Factor to apply to \\\"only-variable-debt\\\" liquidity rate to get threshold for rebalancing, expressed in bps\\n  // A value of 0.9e4 results in 90%\\n  uint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 0.9e4;\\n\\n  // Minimum health factor allowed under any circumstance\\n  // A value of 0.95e18 results in 0.95\\n  uint256 public constant MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 0.95e18;\\n\\n  /**\\n   * @dev Minimum health factor to consider a user position healthy\\n   * A value of 1e18 results in 1\\n   */\\n  uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1e18;\\n\\n  /**\\n   * @notice Validates a supply action.\\n   * @param reserveCache The cached data of the reserve\\n   * @param amount The amount to be supplied\\n   */\\n  function validateSupply(\\n    DataTypes.ReserveCache memory reserveCache,\\n    DataTypes.ReserveData storage reserve,\\n    uint256 amount\\n  ) internal view {\\n    require(amount != 0, Errors.INVALID_AMOUNT);\\n\\n    (bool isActive, bool isFrozen, , , bool isPaused) = reserveCache\\n      .reserveConfiguration\\n      .getFlags();\\n    require(isActive, Errors.RESERVE_INACTIVE);\\n    require(!isPaused, Errors.RESERVE_PAUSED);\\n    require(!isFrozen, Errors.RESERVE_FROZEN);\\n\\n    uint256 supplyCap = reserveCache.reserveConfiguration.getSupplyCap();\\n    require(\\n      supplyCap == 0 ||\\n        ((IHToken(reserveCache.hTokenAddress).scaledTotalSupply() +\\n          uint256(reserve.accruedToTreasury)).rayMul(reserveCache.nextLiquidityIndex) + amount) <=\\n        supplyCap * (10**reserveCache.reserveConfiguration.getDecimals()),\\n      Errors.SUPPLY_CAP_EXCEEDED\\n    );\\n  }\\n\\n  /**\\n   * @notice Validates a withdraw action.\\n   * @param reserveCache The cached data of the reserve\\n   * @param amount The amount to be withdrawn\\n   * @param userBalance The balance of the user\\n   */\\n  function validateWithdraw(\\n    DataTypes.ReserveCache memory reserveCache,\\n    uint256 amount,\\n    uint256 userBalance\\n  ) internal pure {\\n    require(amount != 0, Errors.INVALID_AMOUNT);\\n    require(amount <= userBalance, Errors.NOT_ENOUGH_AVAILABLE_USER_BALANCE);\\n\\n    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();\\n    require(isActive, Errors.RESERVE_INACTIVE);\\n    require(!isPaused, Errors.RESERVE_PAUSED);\\n  }\\n\\n  struct ValidateBorrowLocalVars {\\n    uint256 currentLtv;\\n    uint256 collateralNeededInBaseCurrency;\\n    uint256 userCollateralInBaseCurrency;\\n    uint256 userDebtInBaseCurrency;\\n    uint256 availableLiquidity;\\n    uint256 healthFactor;\\n    uint256 totalDebt;\\n    uint256 totalSupplyVariableDebt;\\n    uint256 reserveDecimals;\\n    uint256 borrowCap;\\n    uint256 amountInBaseCurrency;\\n    uint256 assetUnit;\\n    address eModePriceSource;\\n    address siloedBorrowingAddress;\\n    bool isActive;\\n    bool isFrozen;\\n    bool isPaused;\\n    bool borrowingEnabled;\\n    bool stableRateBorrowingEnabled;\\n    bool siloedBorrowingEnabled;\\n  }\\n\\n  /**\\n   * @notice Validates a borrow action.\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param eModeCategories The configuration of all the efficiency mode categories\\n   * @param params Additional params needed for the validation\\n   */\\n  function validateBorrow(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\n    DataTypes.ValidateBorrowParams memory params\\n  ) internal view {\\n    require(params.amount != 0, Errors.INVALID_AMOUNT);\\n\\n    ValidateBorrowLocalVars memory vars;\\n\\n    (\\n      vars.isActive,\\n      vars.isFrozen,\\n      vars.borrowingEnabled,\\n      vars.stableRateBorrowingEnabled,\\n      vars.isPaused\\n    ) = params.reserveCache.reserveConfiguration.getFlags();\\n\\n    require(vars.isActive, Errors.RESERVE_INACTIVE);\\n    require(!vars.isPaused, Errors.RESERVE_PAUSED);\\n    require(!vars.isFrozen, Errors.RESERVE_FROZEN);\\n    require(vars.borrowingEnabled, Errors.BORROWING_NOT_ENABLED);\\n\\n    require(\\n      params.priceOracleSentinel == address(0) ||\\n        IPriceOracleSentinel(params.priceOracleSentinel).isBorrowAllowed(),\\n      Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED\\n    );\\n\\n    //validate interest rate mode\\n    require(\\n      params.interestRateMode == DataTypes.InterestRateMode.VARIABLE ||\\n        params.interestRateMode == DataTypes.InterestRateMode.STABLE,\\n      Errors.INVALID_INTEREST_RATE_MODE_SELECTED\\n    );\\n\\n    vars.reserveDecimals = params.reserveCache.reserveConfiguration.getDecimals();\\n    vars.borrowCap = params.reserveCache.reserveConfiguration.getBorrowCap();\\n    unchecked {\\n      vars.assetUnit = 10**vars.reserveDecimals;\\n    }\\n\\n    if (vars.borrowCap != 0) {\\n      vars.totalSupplyVariableDebt = params.reserveCache.currScaledVariableDebt.rayMul(\\n        params.reserveCache.nextVariableBorrowIndex\\n      );\\n\\n      vars.totalDebt =\\n        params.reserveCache.currTotalStableDebt +\\n        vars.totalSupplyVariableDebt +\\n        params.amount;\\n\\n      unchecked {\\n        require(vars.totalDebt <= vars.borrowCap * vars.assetUnit, Errors.BORROW_CAP_EXCEEDED);\\n      }\\n    }\\n\\n    if (params.isolationModeActive) {\\n      // check that the asset being borrowed is borrowable in isolation mode AND\\n      // the total exposure is no bigger than the collateral debt ceiling\\n      require(\\n        params.reserveCache.reserveConfiguration.getBorrowableInIsolation(),\\n        Errors.ASSET_NOT_BORROWABLE_IN_ISOLATION\\n      );\\n\\n      require(\\n        reservesData[params.isolationModeCollateralAddress].isolationModeTotalDebt +\\n          (params.amount / 10**(vars.reserveDecimals - ReserveConfiguration.DEBT_CEILING_DECIMALS))\\n            .toUint128() <=\\n          params.isolationModeDebtCeiling,\\n        Errors.DEBT_CEILING_EXCEEDED\\n      );\\n    }\\n\\n    if (params.userEModeCategory != 0) {\\n      require(\\n        params.reserveCache.reserveConfiguration.getEModeCategory() == params.userEModeCategory,\\n        Errors.INCONSISTENT_EMODE_CATEGORY\\n      );\\n      vars.eModePriceSource = eModeCategories[params.userEModeCategory].priceSource;\\n    }\\n\\n    (\\n      vars.userCollateralInBaseCurrency,\\n      vars.userDebtInBaseCurrency,\\n      vars.currentLtv,\\n      ,\\n      vars.healthFactor,\\n\\n    ) = GenericLogic.calculateUserAccountData(\\n      reservesData,\\n      reservesList,\\n      eModeCategories,\\n      DataTypes.CalculateUserAccountDataParams({\\n        userConfig: params.userConfig,\\n        reservesCount: params.reservesCount,\\n        user: params.userAddress,\\n        oracle: params.oracle,\\n        userEModeCategory: params.userEModeCategory\\n      })\\n    );\\n\\n    require(vars.userCollateralInBaseCurrency != 0, Errors.COLLATERAL_BALANCE_IS_ZERO);\\n    require(vars.currentLtv != 0, Errors.LTV_VALIDATION_FAILED);\\n\\n    require(\\n      vars.healthFactor > HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n      Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\\n    );\\n\\n    vars.amountInBaseCurrency =\\n      IPriceOracleGetter(params.oracle).getAssetPrice(\\n        vars.eModePriceSource != address(0) ? vars.eModePriceSource : params.asset\\n      ) *\\n      params.amount;\\n    unchecked {\\n      vars.amountInBaseCurrency /= vars.assetUnit;\\n    }\\n\\n    //add the current already borrowed amount to the amount requested to calculate the total collateral needed.\\n    vars.collateralNeededInBaseCurrency = (vars.userDebtInBaseCurrency + vars.amountInBaseCurrency)\\n      .percentDiv(vars.currentLtv); //LTV is calculated in percentage\\n\\n    require(\\n      vars.collateralNeededInBaseCurrency <= vars.userCollateralInBaseCurrency,\\n      Errors.COLLATERAL_CANNOT_COVER_NEW_BORROW\\n    );\\n\\n    /**\\n     * Following conditions need to be met if the user is borrowing at a stable rate:\\n     * 1. Reserve must be enabled for stable rate borrowing\\n     * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency\\n     *    they are borrowing, to prevent abuses.\\n     * 3. Users will be able to borrow only a portion of the total available liquidity\\n     */\\n\\n    if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n      //check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve\\n\\n      require(vars.stableRateBorrowingEnabled, Errors.STABLE_BORROWING_NOT_ENABLED);\\n\\n      require(\\n        !params.userConfig.isUsingAsCollateral(reservesData[params.asset].id) ||\\n          params.reserveCache.reserveConfiguration.getLtv() == 0 ||\\n          params.amount > IERC20(params.reserveCache.hTokenAddress).balanceOf(params.userAddress),\\n        Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n      );\\n\\n      vars.availableLiquidity = IERC20(params.asset).balanceOf(params.reserveCache.hTokenAddress);\\n\\n      //calculate the max available loan size in stable rate mode as a percentage of the\\n      //available liquidity\\n      uint256 maxLoanSizeStable = vars.availableLiquidity.percentMul(params.maxStableLoanPercent);\\n\\n      require(params.amount <= maxLoanSizeStable, Errors.AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE);\\n    }\\n\\n    if (params.userConfig.isBorrowingAny()) {\\n      (vars.siloedBorrowingEnabled, vars.siloedBorrowingAddress) = params\\n        .userConfig\\n        .getSiloedBorrowingState(reservesData, reservesList);\\n\\n      if (vars.siloedBorrowingEnabled) {\\n        require(vars.siloedBorrowingAddress == params.asset, Errors.SILOED_BORROWING_VIOLATION);\\n      } else {\\n        require(\\n          !params.reserveCache.reserveConfiguration.getSiloedBorrowing(),\\n          Errors.SILOED_BORROWING_VIOLATION\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Validates a repay action.\\n   * @param reserveCache The cached data of the reserve\\n   * @param amountSent The amount sent for the repayment. Can be an actual value or uint(-1)\\n   * @param interestRateMode The interest rate mode of the debt being repaid\\n   * @param onBehalfOf The address of the user msg.sender is repaying for\\n   * @param stableDebt The borrow balance of the user\\n   * @param variableDebt The borrow balance of the user\\n   */\\n  function validateRepay(\\n    DataTypes.ReserveCache memory reserveCache,\\n    uint256 amountSent,\\n    DataTypes.InterestRateMode interestRateMode,\\n    address onBehalfOf,\\n    uint256 stableDebt,\\n    uint256 variableDebt\\n  ) internal view {\\n    require(amountSent != 0, Errors.INVALID_AMOUNT);\\n    require(\\n      amountSent != type(uint256).max || msg.sender == onBehalfOf,\\n      Errors.NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\\n    );\\n\\n    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();\\n    require(isActive, Errors.RESERVE_INACTIVE);\\n    require(!isPaused, Errors.RESERVE_PAUSED);\\n\\n    require(\\n      (stableDebt != 0 && interestRateMode == DataTypes.InterestRateMode.STABLE) ||\\n        (variableDebt != 0 && interestRateMode == DataTypes.InterestRateMode.VARIABLE),\\n      Errors.NO_DEBT_OF_SELECTED_TYPE\\n    );\\n  }\\n\\n  /**\\n   * @notice Validates a swap of borrow rate mode.\\n   * @param reserve The reserve state on which the user is swapping the rate\\n   * @param reserveCache The cached data of the reserve\\n   * @param userConfig The user reserves configuration\\n   * @param stableDebt The stable debt of the user\\n   * @param variableDebt The variable debt of the user\\n   * @param currentRateMode The rate mode of the debt being swapped\\n   */\\n  function validateSwapRateMode(\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.ReserveCache memory reserveCache,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    uint256 stableDebt,\\n    uint256 variableDebt,\\n    DataTypes.InterestRateMode currentRateMode\\n  ) internal view {\\n    (bool isActive, bool isFrozen, , bool stableRateEnabled, bool isPaused) = reserveCache\\n      .reserveConfiguration\\n      .getFlags();\\n    require(isActive, Errors.RESERVE_INACTIVE);\\n    require(!isPaused, Errors.RESERVE_PAUSED);\\n    require(!isFrozen, Errors.RESERVE_FROZEN);\\n\\n    if (currentRateMode == DataTypes.InterestRateMode.STABLE) {\\n      require(stableDebt != 0, Errors.NO_OUTSTANDING_STABLE_DEBT);\\n    } else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {\\n      require(variableDebt != 0, Errors.NO_OUTSTANDING_VARIABLE_DEBT);\\n      /**\\n       * user wants to swap to stable, before swapping we need to ensure that\\n       * 1. stable borrow rate is enabled on the reserve\\n       * 2. user is not trying to abuse the reserve by supplying\\n       * more collateral than he is borrowing, artificially lowering\\n       * the interest rate, borrowing at variable, and switching to stable\\n       */\\n      require(stableRateEnabled, Errors.STABLE_BORROWING_NOT_ENABLED);\\n\\n      require(\\n        !userConfig.isUsingAsCollateral(reserve.id) ||\\n          reserveCache.reserveConfiguration.getLtv() == 0 ||\\n          stableDebt + variableDebt > IERC20(reserveCache.hTokenAddress).balanceOf(msg.sender),\\n        Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n      );\\n    } else {\\n      revert(Errors.INVALID_INTEREST_RATE_MODE_SELECTED);\\n    }\\n  }\\n\\n  /**\\n   * @notice Validates a stable borrow rate rebalance action.\\n   * @dev Rebalancing is accepted when depositors are earning <= 90% of their earnings in pure supply/demand market (variable rate only)\\n   * For this to be the case, there has to be quite large stable debt with an interest rate below the current variable rate.\\n   * @param reserve The reserve state on which the user is getting rebalanced\\n   * @param reserveCache The cached state of the reserve\\n   * @param reserveAddress The address of the reserve\\n   */\\n  function validateRebalanceStableBorrowRate(\\n    DataTypes.ReserveData storage reserve,\\n    DataTypes.ReserveCache memory reserveCache,\\n    address reserveAddress\\n  ) internal view {\\n    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();\\n    require(isActive, Errors.RESERVE_INACTIVE);\\n    require(!isPaused, Errors.RESERVE_PAUSED);\\n\\n    uint256 totalDebt = IERC20(reserveCache.stableDebtTokenAddress).totalSupply() +\\n      IERC20(reserveCache.variableDebtTokenAddress).totalSupply();\\n\\n    (uint256 liquidityRateVariableDebtOnly, , ) = IReserveInterestRateStrategy(\\n      reserve.interestRateStrategyAddress\\n    ).calculateInterestRates(\\n        DataTypes.CalculateInterestRatesParams({\\n          unbacked: reserve.unbacked,\\n          liquidityAdded: 0,\\n          liquidityTaken: 0,\\n          totalStableDebt: 0,\\n          totalVariableDebt: totalDebt,\\n          averageStableBorrowRate: 0,\\n          reserveFactor: reserveCache.reserveFactor,\\n          reserve: reserveAddress,\\n          hToken: reserveCache.hTokenAddress\\n        })\\n      );\\n\\n    require(\\n      reserveCache.currLiquidityRate <=\\n        liquidityRateVariableDebtOnly.percentMul(REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD),\\n      Errors.INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\\n    );\\n  }\\n\\n  /**\\n   * @notice Validates the action of setting an asset as collateral.\\n   * @param reserveCache The cached data of the reserve\\n   * @param userBalance The balance of the user\\n   */\\n  function validateSetUseReserveAsCollateral(\\n    DataTypes.ReserveCache memory reserveCache,\\n    uint256 userBalance\\n  ) internal pure {\\n    require(userBalance != 0, Errors.UNDERLYING_BALANCE_ZERO);\\n\\n    (bool isActive, , , , bool isPaused) = reserveCache.reserveConfiguration.getFlags();\\n    require(isActive, Errors.RESERVE_INACTIVE);\\n    require(!isPaused, Errors.RESERVE_PAUSED);\\n  }\\n\\n  /**\\n   * @notice Validates a flashloan action.\\n   * @param reservesData The state of all the reserves\\n   * @param assets The assets being flash-borrowed\\n   * @param amounts The amounts for each asset being borrowed\\n   */\\n  function validateFlashloan(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    address[] memory assets,\\n    uint256[] memory amounts\\n  ) internal view {\\n    require(assets.length == amounts.length, Errors.INCONSISTENT_FLASHLOAN_PARAMS);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      validateFlashloanSimple(reservesData[assets[i]]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Validates a flashloan action.\\n   * @param reserve The state of the reserve\\n   */\\n  function validateFlashloanSimple(DataTypes.ReserveData storage reserve) internal view {\\n    DataTypes.ReserveConfigurationMap memory configuration = reserve.configuration;\\n    require(!configuration.getPaused(), Errors.RESERVE_PAUSED);\\n    require(configuration.getActive(), Errors.RESERVE_INACTIVE);\\n    require(configuration.getFlashLoanEnabled(), Errors.FLASHLOAN_DISABLED);\\n  }\\n\\n  struct ValidateLiquidationCallLocalVars {\\n    bool collateralReserveActive;\\n    bool collateralReservePaused;\\n    bool principalReserveActive;\\n    bool principalReservePaused;\\n    bool isCollateralEnabled;\\n  }\\n\\n  /**\\n   * @notice Validates the liquidation action.\\n   * @param userConfig The user configuration mapping\\n   * @param collateralReserve The reserve data of the collateral\\n   * @param params Additional parameters needed for the validation\\n   */\\n  function validateLiquidationCall(\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    DataTypes.ReserveData storage collateralReserve,\\n    DataTypes.ValidateLiquidationCallParams memory params\\n  ) internal view {\\n    ValidateLiquidationCallLocalVars memory vars;\\n\\n    (vars.collateralReserveActive, , , , vars.collateralReservePaused) = collateralReserve\\n      .configuration\\n      .getFlags();\\n\\n    (vars.principalReserveActive, , , , vars.principalReservePaused) = params\\n      .debtReserveCache\\n      .reserveConfiguration\\n      .getFlags();\\n\\n    require(vars.collateralReserveActive && vars.principalReserveActive, Errors.RESERVE_INACTIVE);\\n    require(!vars.collateralReservePaused && !vars.principalReservePaused, Errors.RESERVE_PAUSED);\\n\\n    require(\\n      params.priceOracleSentinel == address(0) ||\\n        params.healthFactor < MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD ||\\n        IPriceOracleSentinel(params.priceOracleSentinel).isLiquidationAllowed(),\\n      Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED\\n    );\\n\\n    require(\\n      params.healthFactor < HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n      Errors.HEALTH_FACTOR_NOT_BELOW_THRESHOLD\\n    );\\n\\n    vars.isCollateralEnabled =\\n      collateralReserve.configuration.getLiquidationThreshold() != 0 &&\\n      userConfig.isUsingAsCollateral(collateralReserve.id);\\n\\n    //if collateral isn't enabled as collateral by user, it cannot be liquidated\\n    require(vars.isCollateralEnabled, Errors.COLLATERAL_CANNOT_BE_LIQUIDATED);\\n    require(params.totalDebt != 0, Errors.SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER);\\n  }\\n\\n  /**\\n   * @notice Validates the health factor of a user.\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param eModeCategories The configuration of all the efficiency mode categories\\n   * @param userConfig The state of the user for the specific reserve\\n   * @param user The user to validate health factor of\\n   * @param userEModeCategory The users active efficiency mode category\\n   * @param reservesCount The number of available reserves\\n   * @param oracle The price oracle\\n   */\\n  function validateHealthFactor(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\n    DataTypes.UserConfigurationMap memory userConfig,\\n    address user,\\n    uint8 userEModeCategory,\\n    uint256 reservesCount,\\n    address oracle\\n  ) internal view returns (uint256, bool) {\\n    (, , , , uint256 healthFactor, bool hasZeroLtvCollateral) = GenericLogic\\n      .calculateUserAccountData(\\n        reservesData,\\n        reservesList,\\n        eModeCategories,\\n        DataTypes.CalculateUserAccountDataParams({\\n          userConfig: userConfig,\\n          reservesCount: reservesCount,\\n          user: user,\\n          oracle: oracle,\\n          userEModeCategory: userEModeCategory\\n        })\\n      );\\n\\n    require(\\n      healthFactor >= HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n      Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\\n    );\\n\\n    return (healthFactor, hasZeroLtvCollateral);\\n  }\\n\\n  /**\\n   * @notice Validates the health factor of a user and the ltv of the asset being withdrawn.\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param eModeCategories The configuration of all the efficiency mode categories\\n   * @param userConfig The state of the user for the specific reserve\\n   * @param asset The asset for which the ltv will be validated\\n   * @param from The user from which the hTokens are being transferred\\n   * @param reservesCount The number of available reserves\\n   * @param oracle The price oracle\\n   * @param userEModeCategory The users active efficiency mode category\\n   */\\n  function validateHFAndLtv(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\n    DataTypes.UserConfigurationMap memory userConfig,\\n    address asset,\\n    address from,\\n    uint256 reservesCount,\\n    address oracle,\\n    uint8 userEModeCategory\\n  ) internal view {\\n    DataTypes.ReserveData memory reserve = reservesData[asset];\\n\\n    (, bool hasZeroLtvCollateral) = validateHealthFactor(\\n      reservesData,\\n      reservesList,\\n      eModeCategories,\\n      userConfig,\\n      from,\\n      userEModeCategory,\\n      reservesCount,\\n      oracle\\n    );\\n\\n    require(\\n      !hasZeroLtvCollateral || reserve.configuration.getLtv() == 0,\\n      Errors.LTV_VALIDATION_FAILED\\n    );\\n  }\\n\\n  /**\\n   * @notice Validates a transfer action.\\n   * @param reserve The reserve object\\n   */\\n  function validateTransfer(DataTypes.ReserveData storage reserve) internal view {\\n    require(!reserve.configuration.getPaused(), Errors.RESERVE_PAUSED);\\n  }\\n\\n  /**\\n   * @notice Validates a drop reserve action.\\n   * @param reservesList The addresses of all the active reserves\\n   * @param reserve The reserve object\\n   * @param asset The address of the reserve's underlying asset\\n   */\\n  function validateDropReserve(\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.ReserveData storage reserve,\\n    address asset\\n  ) internal view {\\n    require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    require(reserve.id != 0 || reservesList[0] == asset, Errors.ASSET_NOT_LISTED);\\n    require(IERC20(reserve.stableDebtTokenAddress).totalSupply() == 0, Errors.STABLE_DEBT_NOT_ZERO);\\n    require(\\n      IERC20(reserve.variableDebtTokenAddress).totalSupply() == 0,\\n      Errors.VARIABLE_DEBT_SUPPLY_NOT_ZERO\\n    );\\n    require(\\n      IERC20(reserve.hTokenAddress).totalSupply() == 0 && reserve.accruedToTreasury == 0,\\n      Errors.UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO\\n    );\\n  }\\n\\n  /**\\n   * @notice Validates the action of setting efficiency mode.\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param eModeCategories a mapping storing configurations for all efficiency mode categories\\n   * @param userConfig the user configuration\\n   * @param reservesCount The total number of valid reserves\\n   * @param categoryId The id of the category\\n   */\\n  function validateSetUserEMode(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\n    DataTypes.UserConfigurationMap memory userConfig,\\n    uint256 reservesCount,\\n    uint8 categoryId\\n  ) internal view {\\n    // category is invalid if the liq threshold is not set\\n    require(\\n      categoryId == 0 || eModeCategories[categoryId].liquidationThreshold != 0,\\n      Errors.INCONSISTENT_EMODE_CATEGORY\\n    );\\n\\n    //eMode can always be enabled if the user hasn't supplied anything\\n    if (userConfig.isEmpty()) {\\n      return;\\n    }\\n\\n    // if user is trying to set another category than default we require that\\n    // either the user is not borrowing, or it's borrowing assets of categoryId\\n    if (categoryId != 0) {\\n      unchecked {\\n        for (uint256 i = 0; i < reservesCount; i++) {\\n          if (userConfig.isBorrowing(i)) {\\n            DataTypes.ReserveConfigurationMap memory configuration = reservesData[reservesList[i]]\\n              .configuration;\\n            require(\\n              configuration.getEModeCategory() == categoryId,\\n              Errors.INCONSISTENT_EMODE_CATEGORY\\n            );\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Validates if an asset can be activated as collateral in the following actions: supply, transfer,\\n   * set as collateral, mint unbacked, and liquidate\\n   * @dev This is used to ensure that the constraints for isolated assets are respected by all the actions that\\n   * generate transfers of hTokens\\n   * @param reservesData The state of all the reserves\\n   * @param reservesList The addresses of all the active reserves\\n   * @param userConfig the user configuration\\n   * @param reserveConfig The reserve configuration\\n   * @return True if the asset can be activated as collateral, false otherwise\\n   */\\n  function validateUseAsCollateral(\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\n    mapping(uint256 => address) storage reservesList,\\n    DataTypes.UserConfigurationMap storage userConfig,\\n    DataTypes.ReserveConfigurationMap memory reserveConfig\\n  ) internal view returns (bool) {\\n    if (!userConfig.isUsingAsCollateralAny()) {\\n      return true;\\n    }\\n    (bool isolationModeActive, , ) = userConfig.getIsolationModeState(reservesData, reservesList);\\n\\n    return (!isolationModeActive && reserveConfig.getDebtCeiling() == 0);\\n  }\\n}\\n\",\"keccak256\":\"0xef1029568f8b4b29397b38c5673358b213b2d1ab12676b33a4d7c0a6b35fb8e7\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\n/**\\n * @title MathUtils library\\n * @author HopeLend\\n * @notice Provides functions to perform linear and compounded interest calculations\\n */\\nlibrary MathUtils {\\n  using WadRayMath for uint256;\\n\\n  /// @dev Ignoring leap years\\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n  /**\\n   * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate linearly accumulated during the timeDelta, in ray\\n   */\\n  function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    //solium-disable-next-line\\n    uint256 result = rate * (block.timestamp - uint256(lastUpdateTimestamp));\\n    unchecked {\\n      result = result / SECONDS_PER_YEAR;\\n    }\\n\\n    return WadRayMath.RAY + result;\\n  }\\n\\n  /**\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great\\n   * gas cost reductions. The whitepaper contains reference to the approximation and a table showing the margin of\\n   * error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   */\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint40 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n    if (exp == 0) {\\n      return WadRayMath.RAY;\\n    }\\n\\n    uint256 expMinusOne;\\n    uint256 expMinusTwo;\\n    uint256 basePowerTwo;\\n    uint256 basePowerThree;\\n    unchecked {\\n      expMinusOne = exp - 1;\\n\\n      expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n      basePowerTwo = rate.rayMul(rate) / (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\n      basePowerThree = basePowerTwo.rayMul(rate) / SECONDS_PER_YEAR;\\n    }\\n\\n    uint256 secondTerm = exp * expMinusOne * basePowerTwo;\\n    unchecked {\\n      secondTerm /= 2;\\n    }\\n    uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\\n    unchecked {\\n      thirdTerm /= 6;\\n    }\\n\\n    return WadRayMath.RAY + (rate * exp) / SECONDS_PER_YEAR + secondTerm + thirdTerm;\\n  }\\n\\n  /**\\n   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n   * @param rate The interest rate (in ray)\\n   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n   * @return The interest rate compounded between lastUpdateTimestamp and current block timestamp, in ray\\n   */\\n  function calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x70689286acfd976aa2bd449c2402fc3ad150e44d1afa32784d69d780659a0eb2\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title PercentageMath library\\n * @author HopeLend\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary PercentageMath {\\n  // Maximum percentage factor (100.00%)\\n  uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n  // Half percentage factor (50.00%)\\n  uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n  /**\\n   * @notice Executes a percentage multiplication\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return result value percentmul percentage\\n   */\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\n    // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n    assembly {\\n      if iszero(\\n        or(\\n          iszero(percentage),\\n          iszero(gt(value, div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)))\\n        )\\n      ) {\\n        revert(0, 0)\\n      }\\n\\n      result := div(add(mul(value, percentage), HALF_PERCENTAGE_FACTOR), PERCENTAGE_FACTOR)\\n    }\\n  }\\n\\n  /**\\n   * @notice Executes a percentage division\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return result value percentdiv percentage\\n   */\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256 result) {\\n    // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n    assembly {\\n      if or(\\n        iszero(percentage),\\n        iszero(iszero(gt(value, div(sub(not(0), div(percentage, 2)), PERCENTAGE_FACTOR))))\\n      ) {\\n        revert(0, 0)\\n      }\\n\\n      result := div(add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)), percentage)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe456d835d27b4eb69e9f2599a7e08bff9d88e54e4708fbd89486d2cdd14b8618\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title WadRayMath library\\n * @author HopeLend\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary WadRayMath {\\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant HALF_WAD = 0.5e18;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant HALF_RAY = 0.5e27;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a*b, in wad\\n   */\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_WAD), WAD)\\n    }\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a/b, in wad\\n   */\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, WAD), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raymul b\\n   */\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_RAY), RAY)\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raydiv b\\n   */\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, RAY), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @return b = a converted to wad, rounded half up to the nearest wad\\n   */\\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n    assembly {\\n      b := div(a, WAD_RAY_RATIO)\\n      let remainder := mod(a, WAD_RAY_RATIO)\\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n        b := add(b, 1)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @return b = a converted in ray\\n   */\\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n    // to avoid overflow, b/WAD_RAY_RATIO == a\\n    assembly {\\n      b := mul(a, WAD_RAY_RATIO)\\n\\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n        revert(0, 0)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x29a4cb6ebf96b3829c062f42a6b5ab3886b40f2a57d19d60f4aae47de6a08710\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //hToken address\\n    address hTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked hTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address hTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveHToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useHTokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address hToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address hTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n\\n  struct Phase {\\n    uint256 start;\\n    uint256 end;\\n    int256 k;\\n    uint256 b;\\n  }\\n\\n  struct CheckPointParameters {\\n    uint256 period;\\n    uint256 periodTime;\\n    uint256 rate;\\n    uint256 newRate;\\n    uint256 prevFutureEpoch;\\n  }\\n}\\n\",\"keccak256\":\"0x916e79cfe08070ef69e40cc77f5bc7a87aff0e9ed72c657329747d72b89b6d0c\",\"license\":\"LGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x615aef6200003b600b82828239805160001a60731461002e57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80631e6473f91461005b57806340e95de61461007d5780636973f744146100af578063eac4d703146100cf575b600080fd5b81801561006757600080fd5b5061007b610076366004615360565b6100ef565b005b81801561008957600080fd5b5061009d61009836600461549c565b61087a565b60405190815260200160405180910390f35b8180156100bb57600080fd5b5061007b6100ca36600461555b565b610eea565b8180156100db57600080fd5b5061007b6100ea36600461559d565b61117e565b805173ffffffffffffffffffffffffffffffffffffffff1660009081526020869052604081209061011f8261152d565b905061012b8282611746565b6040805160208101909152845481526000908190819061014c908b8b6117cf565b92509250925061027c8a8a8a604051806101c001604052808981526020018c60405180602001604052908160008201548152505081526020018b6000015173ffffffffffffffffffffffffffffffffffffffff1681526020018b6040015173ffffffffffffffffffffffffffffffffffffffff1681526020018b6060015181526020018b6080015160028111156101e5576101e56155e5565b81526020018b60e0015181526020018b610100015181526020018b610120015173ffffffffffffffffffffffffffffffffffffffff1681526020018b610140015160ff1681526020018b610160015173ffffffffffffffffffffffffffffffffffffffff16815260200188151581526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186815250611887565b600080600188608001516002811115610297576102976155e5565b0361038557600387015461020087015160208a01516040808c015160608d015191517fb3f1c93d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820152908316602482015260448101919091526fffffffffffffffffffffffffffffffff909316606484018190529450169063b3f1c93d906084016060604051808303816000875af1158015610350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103749190615614565b60a089015260c0880152905061044e565b61022086015160208901516040808b015160608c01516101408b015192517fb3f1c93d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff948516600482015291841660248301526044820152606481019190915291169063b3f1c93d9060840160408051808303816000875af1158015610422573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610446919061564b565b602088015290505b8015610483576003870154610483908a907501000000000000000000000000000000000000000000900461ffff166001612986565b84156105ae576101c0860151516000906104c99060029060301c60ff166104aa91906156a8565b6104b590600a6157db565b8a606001516104c49190615816565b612a1b565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260208f90526040812060090180549091906105139084906fffffffffffffffffffffffffffffffff16615851565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790556fffffffffffffffffffffffffffffffff1690508473ffffffffffffffffffffffffffffffffffffffff167faef84d3b40895fd58c561f3998000f0583abb992a52fbdc99ace8e8de4d676a5826040516105a491815260200190565b60405180910390a2505b6105d986896000015160008b60c001516105c95760006105cf565b8b606001515b8b93929190612ac1565b8760c001511561067d576101e0860151602089015160608a01516040517f4efecaa500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810191909152911690634efecaa590604401600060405180830381600087803b15801561066457600080fd5b505af1158015610678573d6000803e3d6000fd5b505050505b6000866101e0015173ffffffffffffffffffffffffffffffffffffffff166310c282b86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190615881565b905073ffffffffffffffffffffffffffffffffffffffff811615610784578073ffffffffffffffffffffffffffffffffffffffff16636ecb81146040518163ffffffff1660e01b81526004016020604051808303816000875af115801561075e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610782919061589e565b505b508760a0015161ffff16886040015173ffffffffffffffffffffffffffffffffffffffff16896000015173ffffffffffffffffffffffffffffffffffffffff167fb3d084820fb1a9decffb176436bd02558d15fac9b0ddfed8c465bc7359d7dce08b602001518c606001518d6080015160016002811115610807576108076155e5565b8f60800151600281111561081d5761081d6155e5565b146108525760028e015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16610854565b885b60405161086494939291906158f6565b60405180910390a4505050505050505050505050565b805173ffffffffffffffffffffffffffffffffffffffff166000908152602085905260408120816108aa8261152d565b90506108b68282611746565b6000806108c7866060015184612e02565b915091506108e5838760200151886040015189606001518686612f3f565b60006001876040015160028111156108ff576108ff6155e5565b1461090a578161090c565b825b90508660800151801561094257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8760200151145b156109e2576101e08401516040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190615936565b60208801525b80876020015110156109f5575060208601515b600187604001516002811115610a0d57610a0d6155e5565b03610ac45761020084015160608801516040517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260248101849052911690639dc29fac9060440160408051808303816000875af1158015610a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab5919061594f565b60a086015260c0850152610b7c565b61022084015160608801516101408601516040517ff5298aca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015260248101859052604481019190915291169063f5298aca906064016020604051808303816000875af1158015610b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b769190615936565b60208501525b610ba28488600001518960800151610b945783610b97565b60005b889291906000612ac1565b80610bad8385615973565b610bb791906156a8565b600003610bed576003850154610bed9089907501000000000000000000000000000000000000000000900461ffff166000612986565b610bfa8a8a8a8785613257565b866080015115610cab576101e08401516101008501516040517fd7020d0a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909216602483018190526044830184905260648301919091529063d7020d0a90608401600060405180830381600087803b158015610c8e57600080fd5b505af1158015610ca2573d6000803e3d6000fd5b50505050610d72565b6101e08401518751610cd89173ffffffffffffffffffffffffffffffffffffffff90911690339084613459565b6101e084015160608801516040517f6fd9767600000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff918216602482015260448101849052911690636fd9767690606401600060405180830381600087803b158015610d5957600080fd5b505af1158015610d6d573d6000803e3d6000fd5b505050505b6000846101e0015173ffffffffffffffffffffffffffffffffffffffff166310c282b86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de89190615881565b905073ffffffffffffffffffffffffffffffffffffffff811615610e79578073ffffffffffffffffffffffffffffffffffffffff16636ecb81146040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e77919061589e565b505b6060880151885160808a0151604080518681529115156020830152339373ffffffffffffffffffffffffffffffffffffffff9081169316917fa534c8dbe71f871f9f3530e97a74601fea17b426cae02e1c5aee42c96c784051910160405180910390a4509998505050505050505050565b6000610ef58461152d565b9050610f018482611746565b610f0c848285613534565b6102008101516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600091908316906370a0823190602401602060405180830381865afa158015610f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa69190615936565b6040517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820183905291925090831690639dc29fac9060440160408051808303816000875af115801561101e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611042919061594f565b505060038601546040517fb3f1c93d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483018190526024830152604482018490526fffffffffffffffffffffffffffffffff90921660648201529083169063b3f1c93d906084016060604051808303816000875af11580156110df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111039190615614565b60a086015260c08501525061111c868487600080612ac1565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f9f439ae0c81e41a04d3fdfe07aed54e6a179fb0db15be7702eb66fa8ef6f530060405160405180910390a3505050505050565b60006111898561152d565b90506111958582611746565b6000806111a23384612e02565b915091506111b487848885858961398a565b60018460028111156111c8576111c86155e5565b03611331576102008301516040517f9dc29fac0000000000000000000000000000000000000000000000000000000081523360048201526024810184905273ffffffffffffffffffffffffffffffffffffffff90911690639dc29fac9060440160408051808303816000875af1158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a919061594f565b60a085015260c08401526102208301516101408401516040517fb3f1c93d0000000000000000000000000000000000000000000000000000000081523360048201819052602482015260448101859052606481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063b3f1c93d9060840160408051808303816000875af1158015611302573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611326919061564b565b6020850152506114b1565b6102208301516101408401516040517ff5298aca00000000000000000000000000000000000000000000000000000000815233600482015260248101849052604481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063f5298aca906064016020604051808303816000875af11580156113b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dd9190615936565b602084015261020083015160038801546040517fb3f1c93d00000000000000000000000000000000000000000000000000000000815233600482018190526024820152604481018490526fffffffffffffffffffffffffffffffff909116606482015273ffffffffffffffffffffffffffffffffffffffff9091169063b3f1c93d906084016060604051808303816000875af1158015611481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a59190615614565b60a086015260c0850152505b6114bf878487600080612ac1565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f7962b394d85a534033ba2efcf43cd36de57b7ebeb3de0ca4428965d9b3ddc4818660405161151c9190615986565b60405180910390a350505050505050565b611535615198565b61153d615198565b60408051602081018252845481526101c0830181905251901c61ffff166101a082015260018301546fffffffffffffffffffffffffffffffff808216610100840181905260e0840152600285015480821661014085018190526101208501527001000000000000000000000000000000009283900482166101608501528290041661018083015260048085015473ffffffffffffffffffffffffffffffffffffffff9081166101e085015260058601548116610200850152600686015416610220840181905260038601549290920464ffffffffff16610240840152604080517fb1bf962d000000000000000000000000000000000000000000000000000000008152905163b1bf962d928281019260209291908290030181865afa15801561166a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168e9190615936565b816020018181525081600001818152505080610200015173ffffffffffffffffffffffffffffffffffffffff1663797743386040518163ffffffff1660e01b8152600401608060405180830381865afa1580156116ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117139190615994565b64ffffffffff166102608501526060840181905260808401829052604084019290925260c083015260a082015292915050565b600382015464ffffffffff4281167001000000000000000000000000000000009092041603611773575050565b61177d8282613e88565b6117878282613fa9565b5060030180547fffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffffff167001000000000000000000000000000000004264ffffffffff1602179055565b60008060006117dd8661412c565b1561187457600061180e877faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa614173565b6000818152602087815260408083205473ffffffffffffffffffffffffffffffffffffffff168084528a8352818420825193840190925290549182905292935060d41c64ffffffffff16905080156118705760019550909350915061187e9050565b5050505b5060009150819050805b93509350939050565b608081015160408051808201909152600281527f3236000000000000000000000000000000000000000000000000000000000000602082015290611901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b60405180910390fd5b506119d6604051806102800160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016000151581526020016000151581526020016000151581526020016000151581526020016000151581525090565b81516101c09081015151671000000000000000811615156102008401526708000000000000008116151561024084015267040000000000000081161515610220840152670200000000000000811615156101e084015267010000000000000016151590820181905260408051808201909152600281527f3237000000000000000000000000000000000000000000000000000000000000602082015290611aaa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50806102000151156040518060400160405280600281526020017f323900000000000000000000000000000000000000000000000000000000000081525090611b20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50806101e00151156040518060400160405280600281526020017f323800000000000000000000000000000000000000000000000000000000000081525090611b96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b508061022001516040518060400160405280600281526020017f333000000000000000000000000000000000000000000000000000000000000081525090611c0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5061014082015173ffffffffffffffffffffffffffffffffffffffff161580611ca3575081610140015173ffffffffffffffffffffffffffffffffffffffff166349aa2e816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca3919061589e565b6040518060400160405280600281526020017f353900000000000000000000000000000000000000000000000000000000000081525090611d11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060028260a001516002811115611d2a57611d2a6155e5565b1480611d4b575060018260a001516002811115611d4957611d496155e5565b145b6040518060400160405280600281526020017f333300000000000000000000000000000000000000000000000000000000000081525090611db9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5081516101c001515160301c60ff1661010082015281516101c001515160501c640fffffffff166101208201819052610100820151600a0a61016083015215611ebc5781516101408101519051611e0f916141c2565b60e082018190526080808401518451909101519091611e2d91615973565b611e379190615973565b60c0820181905261016082015161012083015160408051808201909152600281527f353000000000000000000000000000000000000000000000000000000000000060208201529291021015611eba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b505b8161016001511561204d5781516101c00151516720000000000000001615156040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090611f49576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50816101a00151611f7f6002836101000151611f6591906156a8565b611f7090600a6157db565b84608001516104c49190615816565b61018084015173ffffffffffffffffffffffffffffffffffffffff16600090815260208890526040902060090154611fc991906fffffffffffffffffffffffffffffffff16615851565b6fffffffffffffffffffffffffffffffff1611156040518060400160405280600281526020017f35330000000000000000000000000000000000000000000000000000000000008152509061204b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b505b61012082015160ff16156121255761012082015182516101c001515160ff9182169160a89190911c16146040518060400160405280600281526020017f3538000000000000000000000000000000000000000000000000000000000000815250906120e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5061012082015160ff166000908152602084905260409020546601000000000000900473ffffffffffffffffffffffffffffffffffffffff166101808201525b61219c8585856040518060a00160405280876020015181526020018760e001518152602001876060015173ffffffffffffffffffffffffffffffffffffffff16815260200187610100015173ffffffffffffffffffffffffffffffffffffffff16815260200187610120015160ff16815250614219565b5060a0860152508352606083015260408083018290528051808201909152600281527f333400000000000000000000000000000000000000000000000000000000000060208201529061221c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50805160408051808201909152600281527f353700000000000000000000000000000000000000000000000000000000000060208201529061228b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50670de0b6b3a76400008160a00151116040518060400160405280600281526020017f333500000000000000000000000000000000000000000000000000000000000081525090612309576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50608082015161010083015161018083015173ffffffffffffffffffffffffffffffffffffffff9182169163b3596f079116612349578460400151612350565b8361018001515b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd9190615936565b6123e79190615a4b565b610140820181815261016083015191829081612405576124056157e7565b049052508051610140820151606083015161242a929161242491615973565b90614789565b60208083018290526040808401518151808301909252600282527f3336000000000000000000000000000000000000000000000000000000000000928201929092529111156124a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060018260a0015160028111156124bf576124bf6155e5565b036127ec578061024001516040518060400160405280600281526020017f333100000000000000000000000000000000000000000000000000000000000081525090612538576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408281015173ffffffffffffffffffffffffffffffffffffffff16600090815260208781529190206003015490830151612590917501000000000000000000000000000000000000000000900461ffff166147b4565b15806125a5575081516101c001515161ffff16155b8061264e575081516101e0015160608301516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529116906370a0823190602401602060405180830381865afa158015612623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126479190615936565b8260800151115b6040518060400160405280600281526020017f3337000000000000000000000000000000000000000000000000000000000000815250906126bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408281015183516101e0015191517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116906370a0823190602401602060405180830381865afa158015612735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127599190615936565b6080820181905260c083015160009161277191614838565b905080836080015111156040518060400160405280600281526020017f3338000000000000000000000000000000000000000000000000000000000000815250906127e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50505b6020820151517f5555555555555555555555555555555555555555555555555555555555555555161561297f57602082015161282990868661487b565b73ffffffffffffffffffffffffffffffffffffffff166101a08301521580156102608301526128fe57816040015173ffffffffffffffffffffffffffffffffffffffff16816101a0015173ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f3839000000000000000000000000000000000000000000000000000000000000815250906128f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5061297f565b81516101c001515160408051808201909152600281527f3839000000000000000000000000000000000000000000000000000000000000602082015290674000000000000000161561297d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b505b5050505050565b60408051808201909152600281527f37340000000000000000000000000000000000000000000000000000000000006020820152608083106129f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50600182811b1b8115612a0d57835481178455612a15565b835481191684555b50505050565b60006fffffffffffffffffffffffffffffffff821115612abd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016118f8565b5090565b612aec6040518060800160405280600081526020016000815260200160008152602001600081525090565b6101408501516020860151612b00916141c2565b60608083019182526007880154604080516101208101825260088b01546fffffffffffffffffffffffffffffffff7001000000000000000000000000000000009091041681526020810188905280820187905260c0808b0151948201949094529351608085015260a0808a0151908501526101a08901519284019290925273ffffffffffffffffffffffffffffffffffffffff87811660e08501526101e0890151811661010085015291517fa589870900000000000000000000000000000000000000000000000000000000815291169163a589870991612c619190600401600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015173ffffffffffffffffffffffffffffffffffffffff80821660e0850152610100915080828601511682850152505092915050565b606060405180830381865afa158015612c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca29190615a62565b60408401526020830152808252612cb890612a1b565b6001870180546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000292169190911790556020810151612cfb90612a1b565b6003870180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556040810151612d4c90612a1b565b6002870180546fffffffffffffffffffffffffffffffff92831670010000000000000000000000000000000002921691909117905580516020808301516040808501516101008a01516101408b0151835196875294860193909352908401526060830152608082015273ffffffffffffffffffffffffffffffffffffffff8516907f804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a9060a00160405180910390a2505050505050565b6102008101516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260009283929116906370a0823190602401602060405180830381865afa158015612e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9d9190615936565b6102208401516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a0823190602401602060405180830381865afa158015612f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f349190615936565b915091509250929050565b60408051808201909152600281527f3236000000000000000000000000000000000000000000000000000000000000602082015285612fab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85141580612ff057503373ffffffffffffffffffffffffffffffffffffffff8416145b6040518060400160405280600281526020017f34300000000000000000000000000000000000000000000000000000000000008152509061305e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b506000806130b3886101c0015151670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b94505050509150816040518060400160405280600281526020017f323700000000000000000000000000000000000000000000000000000000000081525090613129576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408051808201909152600281527f323900000000000000000000000000000000000000000000000000000000000060208201528115613197576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5083158015906131b8575060018660028111156131b6576131b66155e5565b145b806131de575082158015906131de575060028660028111156131dc576131dc6155e5565b145b6040518060400160405280600281526020017f33390000000000000000000000000000000000000000000000000000000000008152509061324c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b505050505050505050565b60408051602081019091528354815260009081906132769088886117cf565b509150915081156134505773ffffffffffffffffffffffffffffffffffffffff81166000908152602088905260408120600901546101c0860151516fffffffffffffffffffffffffffffffff90911691906132f39060029060301c60ff166132de91906156a8565b6132e990600a6157db565b6104c49087615816565b9050806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff16116133a35773ffffffffffffffffffffffffffffffffffffffff8316600081815260208b8152604080832060090180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055519182527faef84d3b40895fd58c561f3998000f0583abb992a52fbdc99ace8e8de4d676a5910160405180910390a261324c565b60006133af8284615a90565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260208d815260409182902060090180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff959095169485179055905183815292935090917faef84d3b40895fd58c561f3998000f0583abb992a52fbdc99ace8e8de4d676a5910160405180910390a25050505b50505050505050565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8581166004840152841660248301526044820183905290600080606483828a5af16134c4573d6000803e3d6000fd5b506134ce85614927565b61297f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d0000000000000060448201526064016118f8565b600080613588846101c0015151670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b94505050509150816040518060400160405280600281526020017f3237000000000000000000000000000000000000000000000000000000000000815250906135fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408051808201909152600281527f32390000000000000000000000000000000000000000000000000000000000006020820152811561366c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50600084610220015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e39190615936565b85610200015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137579190615936565b6137619190615973565b6007870154604080516101208101825260088a01546fffffffffffffffffffffffffffffffff700100000000000000000000000000000000909104168152600060208201819052818301819052606082018190526080820185905260a082018190526101a08a015160c083015273ffffffffffffffffffffffffffffffffffffffff89811660e08401526101e08b0151811661010084015292517fa589870900000000000000000000000000000000000000000000000000000000815294955093919092169163a5898709916138b79190600401600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015173ffffffffffffffffffffffffffffffffffffffff80821660e0850152610100915080828601511682850152505092915050565b606060405180830381865afa1580156138d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138f89190615a62565b5090915061390a905081612328614838565b86610160015111156040518060400160405280600281526020017f343400000000000000000000000000000000000000000000000000000000000081525090613980576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5050505050505050565b6000806000806139e1896101c0015151670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b945094505093509350836040518060400160405280600281526020017f323700000000000000000000000000000000000000000000000000000000000081525090613a59576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408051808201909152600281527f323900000000000000000000000000000000000000000000000000000000000060208201528115613ac7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408051808201909152600281527f323800000000000000000000000000000000000000000000000000000000000060208201528315613b35576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b506001856002811115613b4a57613b4a6155e5565b03613bc15760408051808201909152600281527f3431000000000000000000000000000000000000000000000000000000000000602082015287613bbb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50613e7c565b6002856002811115613bd557613bd56155e5565b03613e175760408051808201909152600281527f3432000000000000000000000000000000000000000000000000000000000000602082015286613c46576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408051808201909152600281527f3331000000000000000000000000000000000000000000000000000000000000602082015282613cb3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060038a0154604080516020810190915289548152613cee917501000000000000000000000000000000000000000000900461ffff166147b4565b1580613d0257506101c08901515161ffff16155b80613da957506101e08901516040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015613d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d9d9190615936565b613da78789615973565b115b6040518060400160405280600281526020017f333700000000000000000000000000000000000000000000000000000000000081525090613bbb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b604080518082018252600281527f3333000000000000000000000000000000000000000000000000000000000000602082015290517f08c379a00000000000000000000000000000000000000000000000000000000081526118f891906004016159df565b50505050505050505050565b61016081015115613f18576000613ea98261016001518361024001516149f2565b9050613ec28260e00151826141c290919063ffffffff16565b6101008301819052613ed390612a1b565b6001840180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055505b805115613fa5576000613f35826101800151836102400151614a37565b9050613f4f826101200151826141c290919063ffffffff16565b6101408301819052613f6090612a1b565b6002840180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055505b5050565b613fe26040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b816101a00151600003613ff457505050565b6101208201518251614005916141c2565b6020820152610140820151825161401b916141c2565b6040820152606082015161026083015161024084015161404392919064ffffffffff16614a40565b606082018190526040830151614058916141c2565b8082526020820151608084015160408401516140749190615973565b61407e91906156a8565b61408891906156a8565b608082018190526101a083015161409f9190614838565b60a0820181905215614127576140ca6104c48361010001518360a00151614b8a90919063ffffffff16565b6008840180546000906140f09084906fffffffffffffffffffffffffffffffff16615851565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b505050565b80516000907faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa16801580159061416c57506141686001826156a8565b8116155b9392505050565b815160009082167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101198116825b60029190911c9081156141b7576001016141a2565b925050505b92915050565b600081157ffffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff839004841115176141f757600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b60008060008060008061422f8760000151511590565b1561426b5750600094508493508392508291507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90508161477c565b61431a60405180610260016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016000151581525090565b608088015160ff161561435f57608088015160ff16600090815260208a905260409020606089015161434c9190614bc9565b6101808401526101c08301526101a08201525b87602001518160c00151101561467e5760c0810151885161437f91614ca8565b6143935760c081018051600101905261435f565b60c0810151600090815260208b9052604090205473ffffffffffffffffffffffffffffffffffffffff1661020082018190526143d95760c081018051600101905261435f565b61020081015173ffffffffffffffffffffffffffffffffffffffff16600090815260208c8152604091829020825180830190935280549283905260ff60a884901c81166101e0860152603084901c166060850181905261ffff601085901c811660a08701529093166080850152600a9290920a908301526101808201511580159061446f5750816101e00151896080015160ff16145b6145135760608901516102008301516040517fb3596f0700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015291169063b3596f0790602401602060405180830381865afa1580156144ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061450e9190615936565b61451a565b8161018001515b825260a08201511580159061453a575060c0820151895161453a916147b4565b1561462a5761455789604001518284600001518560200151614d2d565b6040830181905261010083018051614570908390615973565b90525060808901516101e083015161458b9160ff1690614e0c565b15156102408301526080820151156145e1578161024001516145b15781608001516145b8565b816101a001515b82604001516145c79190615a4b565b82610140018181516145d99190615973565b9052506145ea565b60016102208301525b8161024001516145fe578160a00151614605565b816101c001515b82604001516146149190615a4b565b82610160018181516146269190615973565b9052505b60c0820151895161463a91614e1d565b1561466d5761465789604001518284600001518560200151614e9f565b82610120018181516146699190615973565b9052505b5060c081018051600101905261435f565b8061010001516000036146925760006146ad565b806101000151816101400151816146ab576146ab6157e7565b045b6101408201526101008101516000036146c75760006146e2565b806101000151816101600151816146e0576146e06157e7565b045b610160820152610120810151156147245761471f81610120015161471983610160015184610100015161483890919063ffffffff16565b9061501f565b614746565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b60e0820181905261010082015161012083015161014084015161016085015161022090950151929a509098509650919450925090505b9499939850945094509450565b60008115612710600284041904841117156147a357600080fd5b506127109190910260028204010490565b60408051808201909152600281527f3734000000000000000000000000000000000000000000000000000000000000602082015260009060808310614826576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50509051600191821b82011c16151590565b600081157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec778390048411151761486d57600080fd5b506127109102611388010490565b60008061488785615056565b156149185760006148b8867f5555555555555555555555555555555555555555555555555555555555555555614173565b6000818152602086815260408083205473ffffffffffffffffffffffffffffffffffffffff1680845289835292819020815192830190915254908190529192509067400000000000000016156149155760019350915061491f9050565b50505b5060009050805b935093915050565b6000614966565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d80156149a557602081146149df576149a07f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f61492e565b6149ec565b823b6149d6576149d67f475076323a206e6f74206120636f6e7472616374000000000000000000000000601461492e565b600191506149ec565b3d6000803e600051151591505b50919050565b600080614a0664ffffffffff8416426156a8565b614a109085615a4b565b6301e1338090049050614a2f816b033b2e3c9fd0803ce8000000615973565b949350505050565b600061416c8383425b600080614a5464ffffffffff8516846156a8565b905080600003614a73576b033b2e3c9fd0803ce800000091505061416c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81016000808060028511614aa9576000614aae565b600285035b925066038882915c4000614ac28a806141c2565b81614acf57614acf6157e7565b0491506301e13380614ae1838b6141c2565b81614aee57614aee6157e7565b049050600082614afe8688615a4b565b614b089190615a4b565b60029004905060008285614b1c888a615a4b565b614b269190615a4b565b614b309190615a4b565b60069004905080826301e13380614b478a8f615a4b565b614b519190615816565b614b67906b033b2e3c9fd0803ce8000000615973565b614b719190615973565b614b7b9190615973565b9b9a5050505050505050505050565b600081156b033b2e3c9fd0803ce800000060028404190484111715614bae57600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b81546000908190819081906601000000000000900473ffffffffffffffffffffffffffffffffffffffff168015614c8d576040517fb3596f0700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015287169063b3596f0790602401602060405180830381865afa158015614c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c8a9190615936565b91505b50945461ffff80821697620100009092041695945092505050565b60408051808201909152600281527f3734000000000000000000000000000000000000000000000000000000000000602082015260009060808310614d1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5050905160019190911b1c600316151590565b600080614d3985615092565b6004868101546040517f1da24f3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116938201939093529293506000928792614de5928692911690631da24f3e90602401602060405180830381865afa158015614dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ddf9190615936565b906141c2565b614def9190615a4b565b9050838181614e0057614e006157e7565b04979650505050505050565b6000821580159061416c5750501490565b60408051808201909152600281527f3734000000000000000000000000000000000000000000000000000000000000602082015260009060808310614e8f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50509051600191821b1c16151590565b60068301546040517f1da24f3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526000928392911690631da24f3e90602401602060405180830381865afa158015614f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f399190615936565b90508015614f5757614f54614f4d86615115565b82906141c2565b90505b60058501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152909116906370a0823190602401602060405180830381865afa158015614fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fed9190615936565b614ff79082615973565b90506150038185615a4b565b9050828181615014576150146157e7565b049695505050505050565b60008115670de0b6b3a76400006002840419048411171561503f57600080fd5b50670de0b6b3a76400009190910260028204010490565b80516000907f555555555555555555555555555555555555555555555555555555555555555516801580159061416c57506141686001826156a8565b6003810154600090700100000000000000000000000000000000900464ffffffffff164281036150d7575050600101546fffffffffffffffffffffffffffffffff1690565b600183015461416c906fffffffffffffffffffffffffffffffff80821691614ddf9170010000000000000000000000000000000090910416846149f2565b6003810154600090700100000000000000000000000000000000900464ffffffffff1642810361515a575050600201546fffffffffffffffffffffffffffffffff1690565b600283015461416c906fffffffffffffffffffffffffffffffff80821691614ddf917001000000000000000000000000000000009091041684614a37565b604051806102800160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161521c6040518060200160405280600081525090565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b604051610180810167ffffffffffffffff81118282101715615290577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b60405160a0810167ffffffffffffffff81118282101715615290577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461530257600080fd5b50565b8035615310816152e0565b919050565b80356003811061531057600080fd5b803561ffff8116811461531057600080fd5b801515811461530257600080fd5b803561531081615336565b803560ff8116811461531057600080fd5b600080600080600085870361020081121561537a57600080fd5b86359550602087013594506040870135935060608701359250610180807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80830112156153c557600080fd5b6153cd615245565b91506153db60808901615305565b82526153e960a08901615305565b60208301526153fa60c08901615305565b604083015260e08801356060830152610100615417818a01615315565b608084015261012061542a818b01615324565b60a085015261014061543d818c01615344565b60c0860152610160808c013560e0870152848c0135848701526154636101a08d01615305565b838701526154746101c08d0161534f565b828701526154856101e08d01615305565b818701525050505050809150509295509295909350565b6000806000808486036101008112156154b457600080fd5b85359450602086013593506040860135925060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0820112156154f657600080fd5b506154ff615296565b606086013561550d816152e0565b81526080860135602082015261552560a08701615315565b604082015260c0860135615538816152e0565b606082015260e086013561554b81615336565b6080820152939692955090935050565b60008060006060848603121561557057600080fd5b833592506020840135615582816152e0565b91506040840135615592816152e0565b809150509250925092565b600080600080608085870312156155b357600080fd5b843593506020850135925060408501356155cc816152e0565b91506155da60608601615315565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008060006060848603121561562957600080fd5b835161563481615336565b602085015160409095015190969495509392505050565b6000806040838503121561565e57600080fd5b825161566981615336565b6020939093015192949293505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156141bc576141bc615679565b600181815b8085111561571457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156156fa576156fa615679565b8085161561570757918102915b93841c93908002906156c0565b509250929050565b60008261572b575060016141bc565b81615738575060006141bc565b816001811461574e576002811461575857615774565b60019150506141bc565b60ff84111561576957615769615679565b50506001821b6141bc565b5060208310610133831016604e8410600b8410161715615797575081810a6141bc565b6157a183836156bb565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156157d3576157d3615679565b029392505050565b600061416c838361571c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261584c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6fffffffffffffffffffffffffffffffff81811683821601908082111561587a5761587a615679565b5092915050565b60006020828403121561589357600080fd5b815161416c816152e0565b6000602082840312156158b057600080fd5b815161416c81615336565b600381106158f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b73ffffffffffffffffffffffffffffffffffffffff85168152602081018490526080810161592760408301856158bb565b82606083015295945050505050565b60006020828403121561594857600080fd5b5051919050565b6000806040838503121561596257600080fd5b505080516020909101519092909150565b808201808211156141bc576141bc615679565b602081016141bc82846158bb565b600080600080608085870312156159aa57600080fd5b845193506020850151925060408501519150606085015164ffffffffff811681146159d457600080fd5b939692955090935050565b600060208083528351808285015260005b81811015615a0c578581018301518582016040015282016159f0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b80820281158282048414176141bc576141bc615679565b600080600060608486031215615a7757600080fd5b8351925060208401519150604084015190509250925092565b6fffffffffffffffffffffffffffffffff82811682821603908082111561587a5761587a61567956fea2646970667358221220ca3ceb10166a13a25e5d74267d08ae07d1516428274f1b8773dbd47d9a819b2e64736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80631e6473f91461005b57806340e95de61461007d5780636973f744146100af578063eac4d703146100cf575b600080fd5b81801561006757600080fd5b5061007b610076366004615360565b6100ef565b005b81801561008957600080fd5b5061009d61009836600461549c565b61087a565b60405190815260200160405180910390f35b8180156100bb57600080fd5b5061007b6100ca36600461555b565b610eea565b8180156100db57600080fd5b5061007b6100ea36600461559d565b61117e565b805173ffffffffffffffffffffffffffffffffffffffff1660009081526020869052604081209061011f8261152d565b905061012b8282611746565b6040805160208101909152845481526000908190819061014c908b8b6117cf565b92509250925061027c8a8a8a604051806101c001604052808981526020018c60405180602001604052908160008201548152505081526020018b6000015173ffffffffffffffffffffffffffffffffffffffff1681526020018b6040015173ffffffffffffffffffffffffffffffffffffffff1681526020018b6060015181526020018b6080015160028111156101e5576101e56155e5565b81526020018b60e0015181526020018b610100015181526020018b610120015173ffffffffffffffffffffffffffffffffffffffff1681526020018b610140015160ff1681526020018b610160015173ffffffffffffffffffffffffffffffffffffffff16815260200188151581526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186815250611887565b600080600188608001516002811115610297576102976155e5565b0361038557600387015461020087015160208a01516040808c015160608d015191517fb3f1c93d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820152908316602482015260448101919091526fffffffffffffffffffffffffffffffff909316606484018190529450169063b3f1c93d906084016060604051808303816000875af1158015610350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103749190615614565b60a089015260c0880152905061044e565b61022086015160208901516040808b015160608c01516101408b015192517fb3f1c93d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff948516600482015291841660248301526044820152606481019190915291169063b3f1c93d9060840160408051808303816000875af1158015610422573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610446919061564b565b602088015290505b8015610483576003870154610483908a907501000000000000000000000000000000000000000000900461ffff166001612986565b84156105ae576101c0860151516000906104c99060029060301c60ff166104aa91906156a8565b6104b590600a6157db565b8a606001516104c49190615816565b612a1b565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260208f90526040812060090180549091906105139084906fffffffffffffffffffffffffffffffff16615851565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790556fffffffffffffffffffffffffffffffff1690508473ffffffffffffffffffffffffffffffffffffffff167faef84d3b40895fd58c561f3998000f0583abb992a52fbdc99ace8e8de4d676a5826040516105a491815260200190565b60405180910390a2505b6105d986896000015160008b60c001516105c95760006105cf565b8b606001515b8b93929190612ac1565b8760c001511561067d576101e0860151602089015160608a01516040517f4efecaa500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810191909152911690634efecaa590604401600060405180830381600087803b15801561066457600080fd5b505af1158015610678573d6000803e3d6000fd5b505050505b6000866101e0015173ffffffffffffffffffffffffffffffffffffffff166310c282b86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190615881565b905073ffffffffffffffffffffffffffffffffffffffff811615610784578073ffffffffffffffffffffffffffffffffffffffff16636ecb81146040518163ffffffff1660e01b81526004016020604051808303816000875af115801561075e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610782919061589e565b505b508760a0015161ffff16886040015173ffffffffffffffffffffffffffffffffffffffff16896000015173ffffffffffffffffffffffffffffffffffffffff167fb3d084820fb1a9decffb176436bd02558d15fac9b0ddfed8c465bc7359d7dce08b602001518c606001518d6080015160016002811115610807576108076155e5565b8f60800151600281111561081d5761081d6155e5565b146108525760028e015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16610854565b885b60405161086494939291906158f6565b60405180910390a4505050505050505050505050565b805173ffffffffffffffffffffffffffffffffffffffff166000908152602085905260408120816108aa8261152d565b90506108b68282611746565b6000806108c7866060015184612e02565b915091506108e5838760200151886040015189606001518686612f3f565b60006001876040015160028111156108ff576108ff6155e5565b1461090a578161090c565b825b90508660800151801561094257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8760200151145b156109e2576101e08401516040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190615936565b60208801525b80876020015110156109f5575060208601515b600187604001516002811115610a0d57610a0d6155e5565b03610ac45761020084015160608801516040517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260248101849052911690639dc29fac9060440160408051808303816000875af1158015610a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab5919061594f565b60a086015260c0850152610b7c565b61022084015160608801516101408601516040517ff5298aca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015260248101859052604481019190915291169063f5298aca906064016020604051808303816000875af1158015610b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b769190615936565b60208501525b610ba28488600001518960800151610b945783610b97565b60005b889291906000612ac1565b80610bad8385615973565b610bb791906156a8565b600003610bed576003850154610bed9089907501000000000000000000000000000000000000000000900461ffff166000612986565b610bfa8a8a8a8785613257565b866080015115610cab576101e08401516101008501516040517fd7020d0a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909216602483018190526044830184905260648301919091529063d7020d0a90608401600060405180830381600087803b158015610c8e57600080fd5b505af1158015610ca2573d6000803e3d6000fd5b50505050610d72565b6101e08401518751610cd89173ffffffffffffffffffffffffffffffffffffffff90911690339084613459565b6101e084015160608801516040517f6fd9767600000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff918216602482015260448101849052911690636fd9767690606401600060405180830381600087803b158015610d5957600080fd5b505af1158015610d6d573d6000803e3d6000fd5b505050505b6000846101e0015173ffffffffffffffffffffffffffffffffffffffff166310c282b86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de89190615881565b905073ffffffffffffffffffffffffffffffffffffffff811615610e79578073ffffffffffffffffffffffffffffffffffffffff16636ecb81146040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e77919061589e565b505b6060880151885160808a0151604080518681529115156020830152339373ffffffffffffffffffffffffffffffffffffffff9081169316917fa534c8dbe71f871f9f3530e97a74601fea17b426cae02e1c5aee42c96c784051910160405180910390a4509998505050505050505050565b6000610ef58461152d565b9050610f018482611746565b610f0c848285613534565b6102008101516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600091908316906370a0823190602401602060405180830381865afa158015610f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa69190615936565b6040517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820183905291925090831690639dc29fac9060440160408051808303816000875af115801561101e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611042919061594f565b505060038601546040517fb3f1c93d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483018190526024830152604482018490526fffffffffffffffffffffffffffffffff90921660648201529083169063b3f1c93d906084016060604051808303816000875af11580156110df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111039190615614565b60a086015260c08501525061111c868487600080612ac1565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f9f439ae0c81e41a04d3fdfe07aed54e6a179fb0db15be7702eb66fa8ef6f530060405160405180910390a3505050505050565b60006111898561152d565b90506111958582611746565b6000806111a23384612e02565b915091506111b487848885858961398a565b60018460028111156111c8576111c86155e5565b03611331576102008301516040517f9dc29fac0000000000000000000000000000000000000000000000000000000081523360048201526024810184905273ffffffffffffffffffffffffffffffffffffffff90911690639dc29fac9060440160408051808303816000875af1158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a919061594f565b60a085015260c08401526102208301516101408401516040517fb3f1c93d0000000000000000000000000000000000000000000000000000000081523360048201819052602482015260448101859052606481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063b3f1c93d9060840160408051808303816000875af1158015611302573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611326919061564b565b6020850152506114b1565b6102208301516101408401516040517ff5298aca00000000000000000000000000000000000000000000000000000000815233600482015260248101849052604481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063f5298aca906064016020604051808303816000875af11580156113b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dd9190615936565b602084015261020083015160038801546040517fb3f1c93d00000000000000000000000000000000000000000000000000000000815233600482018190526024820152604481018490526fffffffffffffffffffffffffffffffff909116606482015273ffffffffffffffffffffffffffffffffffffffff9091169063b3f1c93d906084016060604051808303816000875af1158015611481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a59190615614565b60a086015260c0850152505b6114bf878487600080612ac1565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f7962b394d85a534033ba2efcf43cd36de57b7ebeb3de0ca4428965d9b3ddc4818660405161151c9190615986565b60405180910390a350505050505050565b611535615198565b61153d615198565b60408051602081018252845481526101c0830181905251901c61ffff166101a082015260018301546fffffffffffffffffffffffffffffffff808216610100840181905260e0840152600285015480821661014085018190526101208501527001000000000000000000000000000000009283900482166101608501528290041661018083015260048085015473ffffffffffffffffffffffffffffffffffffffff9081166101e085015260058601548116610200850152600686015416610220840181905260038601549290920464ffffffffff16610240840152604080517fb1bf962d000000000000000000000000000000000000000000000000000000008152905163b1bf962d928281019260209291908290030181865afa15801561166a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168e9190615936565b816020018181525081600001818152505080610200015173ffffffffffffffffffffffffffffffffffffffff1663797743386040518163ffffffff1660e01b8152600401608060405180830381865afa1580156116ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117139190615994565b64ffffffffff166102608501526060840181905260808401829052604084019290925260c083015260a082015292915050565b600382015464ffffffffff4281167001000000000000000000000000000000009092041603611773575050565b61177d8282613e88565b6117878282613fa9565b5060030180547fffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffffff167001000000000000000000000000000000004264ffffffffff1602179055565b60008060006117dd8661412c565b1561187457600061180e877faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa614173565b6000818152602087815260408083205473ffffffffffffffffffffffffffffffffffffffff168084528a8352818420825193840190925290549182905292935060d41c64ffffffffff16905080156118705760019550909350915061187e9050565b5050505b5060009150819050805b93509350939050565b608081015160408051808201909152600281527f3236000000000000000000000000000000000000000000000000000000000000602082015290611901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b60405180910390fd5b506119d6604051806102800160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016000151581526020016000151581526020016000151581526020016000151581526020016000151581525090565b81516101c09081015151671000000000000000811615156102008401526708000000000000008116151561024084015267040000000000000081161515610220840152670200000000000000811615156101e084015267010000000000000016151590820181905260408051808201909152600281527f3237000000000000000000000000000000000000000000000000000000000000602082015290611aaa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50806102000151156040518060400160405280600281526020017f323900000000000000000000000000000000000000000000000000000000000081525090611b20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50806101e00151156040518060400160405280600281526020017f323800000000000000000000000000000000000000000000000000000000000081525090611b96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b508061022001516040518060400160405280600281526020017f333000000000000000000000000000000000000000000000000000000000000081525090611c0b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5061014082015173ffffffffffffffffffffffffffffffffffffffff161580611ca3575081610140015173ffffffffffffffffffffffffffffffffffffffff166349aa2e816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca3919061589e565b6040518060400160405280600281526020017f353900000000000000000000000000000000000000000000000000000000000081525090611d11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060028260a001516002811115611d2a57611d2a6155e5565b1480611d4b575060018260a001516002811115611d4957611d496155e5565b145b6040518060400160405280600281526020017f333300000000000000000000000000000000000000000000000000000000000081525090611db9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5081516101c001515160301c60ff1661010082015281516101c001515160501c640fffffffff166101208201819052610100820151600a0a61016083015215611ebc5781516101408101519051611e0f916141c2565b60e082018190526080808401518451909101519091611e2d91615973565b611e379190615973565b60c0820181905261016082015161012083015160408051808201909152600281527f353000000000000000000000000000000000000000000000000000000000000060208201529291021015611eba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b505b8161016001511561204d5781516101c00151516720000000000000001615156040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090611f49576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50816101a00151611f7f6002836101000151611f6591906156a8565b611f7090600a6157db565b84608001516104c49190615816565b61018084015173ffffffffffffffffffffffffffffffffffffffff16600090815260208890526040902060090154611fc991906fffffffffffffffffffffffffffffffff16615851565b6fffffffffffffffffffffffffffffffff1611156040518060400160405280600281526020017f35330000000000000000000000000000000000000000000000000000000000008152509061204b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b505b61012082015160ff16156121255761012082015182516101c001515160ff9182169160a89190911c16146040518060400160405280600281526020017f3538000000000000000000000000000000000000000000000000000000000000815250906120e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5061012082015160ff166000908152602084905260409020546601000000000000900473ffffffffffffffffffffffffffffffffffffffff166101808201525b61219c8585856040518060a00160405280876020015181526020018760e001518152602001876060015173ffffffffffffffffffffffffffffffffffffffff16815260200187610100015173ffffffffffffffffffffffffffffffffffffffff16815260200187610120015160ff16815250614219565b5060a0860152508352606083015260408083018290528051808201909152600281527f333400000000000000000000000000000000000000000000000000000000000060208201529061221c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50805160408051808201909152600281527f353700000000000000000000000000000000000000000000000000000000000060208201529061228b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50670de0b6b3a76400008160a00151116040518060400160405280600281526020017f333500000000000000000000000000000000000000000000000000000000000081525090612309576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50608082015161010083015161018083015173ffffffffffffffffffffffffffffffffffffffff9182169163b3596f079116612349578460400151612350565b8361018001515b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd9190615936565b6123e79190615a4b565b610140820181815261016083015191829081612405576124056157e7565b049052508051610140820151606083015161242a929161242491615973565b90614789565b60208083018290526040808401518151808301909252600282527f3336000000000000000000000000000000000000000000000000000000000000928201929092529111156124a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060018260a0015160028111156124bf576124bf6155e5565b036127ec578061024001516040518060400160405280600281526020017f333100000000000000000000000000000000000000000000000000000000000081525090612538576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408281015173ffffffffffffffffffffffffffffffffffffffff16600090815260208781529190206003015490830151612590917501000000000000000000000000000000000000000000900461ffff166147b4565b15806125a5575081516101c001515161ffff16155b8061264e575081516101e0015160608301516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529116906370a0823190602401602060405180830381865afa158015612623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126479190615936565b8260800151115b6040518060400160405280600281526020017f3337000000000000000000000000000000000000000000000000000000000000815250906126bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408281015183516101e0015191517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116906370a0823190602401602060405180830381865afa158015612735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127599190615936565b6080820181905260c083015160009161277191614838565b905080836080015111156040518060400160405280600281526020017f3338000000000000000000000000000000000000000000000000000000000000815250906127e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50505b6020820151517f5555555555555555555555555555555555555555555555555555555555555555161561297f57602082015161282990868661487b565b73ffffffffffffffffffffffffffffffffffffffff166101a08301521580156102608301526128fe57816040015173ffffffffffffffffffffffffffffffffffffffff16816101a0015173ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f3839000000000000000000000000000000000000000000000000000000000000815250906128f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5061297f565b81516101c001515160408051808201909152600281527f3839000000000000000000000000000000000000000000000000000000000000602082015290674000000000000000161561297d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b505b5050505050565b60408051808201909152600281527f37340000000000000000000000000000000000000000000000000000000000006020820152608083106129f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50600182811b1b8115612a0d57835481178455612a15565b835481191684555b50505050565b60006fffffffffffffffffffffffffffffffff821115612abd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016118f8565b5090565b612aec6040518060800160405280600081526020016000815260200160008152602001600081525090565b6101408501516020860151612b00916141c2565b60608083019182526007880154604080516101208101825260088b01546fffffffffffffffffffffffffffffffff7001000000000000000000000000000000009091041681526020810188905280820187905260c0808b0151948201949094529351608085015260a0808a0151908501526101a08901519284019290925273ffffffffffffffffffffffffffffffffffffffff87811660e08501526101e0890151811661010085015291517fa589870900000000000000000000000000000000000000000000000000000000815291169163a589870991612c619190600401600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015173ffffffffffffffffffffffffffffffffffffffff80821660e0850152610100915080828601511682850152505092915050565b606060405180830381865afa158015612c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca29190615a62565b60408401526020830152808252612cb890612a1b565b6001870180546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000292169190911790556020810151612cfb90612a1b565b6003870180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556040810151612d4c90612a1b565b6002870180546fffffffffffffffffffffffffffffffff92831670010000000000000000000000000000000002921691909117905580516020808301516040808501516101008a01516101408b0151835196875294860193909352908401526060830152608082015273ffffffffffffffffffffffffffffffffffffffff8516907f804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a9060a00160405180910390a2505050505050565b6102008101516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260009283929116906370a0823190602401602060405180830381865afa158015612e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9d9190615936565b6102208401516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a0823190602401602060405180830381865afa158015612f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f349190615936565b915091509250929050565b60408051808201909152600281527f3236000000000000000000000000000000000000000000000000000000000000602082015285612fab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85141580612ff057503373ffffffffffffffffffffffffffffffffffffffff8416145b6040518060400160405280600281526020017f34300000000000000000000000000000000000000000000000000000000000008152509061305e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b506000806130b3886101c0015151670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b94505050509150816040518060400160405280600281526020017f323700000000000000000000000000000000000000000000000000000000000081525090613129576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408051808201909152600281527f323900000000000000000000000000000000000000000000000000000000000060208201528115613197576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5083158015906131b8575060018660028111156131b6576131b66155e5565b145b806131de575082158015906131de575060028660028111156131dc576131dc6155e5565b145b6040518060400160405280600281526020017f33390000000000000000000000000000000000000000000000000000000000008152509061324c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b505050505050505050565b60408051602081019091528354815260009081906132769088886117cf565b509150915081156134505773ffffffffffffffffffffffffffffffffffffffff81166000908152602088905260408120600901546101c0860151516fffffffffffffffffffffffffffffffff90911691906132f39060029060301c60ff166132de91906156a8565b6132e990600a6157db565b6104c49087615816565b9050806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff16116133a35773ffffffffffffffffffffffffffffffffffffffff8316600081815260208b8152604080832060090180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000169055519182527faef84d3b40895fd58c561f3998000f0583abb992a52fbdc99ace8e8de4d676a5910160405180910390a261324c565b60006133af8284615a90565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260208d815260409182902060090180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff959095169485179055905183815292935090917faef84d3b40895fd58c561f3998000f0583abb992a52fbdc99ace8e8de4d676a5910160405180910390a25050505b50505050505050565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8581166004840152841660248301526044820183905290600080606483828a5af16134c4573d6000803e3d6000fd5b506134ce85614927565b61297f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d0000000000000060448201526064016118f8565b600080613588846101c0015151670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b94505050509150816040518060400160405280600281526020017f3237000000000000000000000000000000000000000000000000000000000000815250906135fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408051808201909152600281527f32390000000000000000000000000000000000000000000000000000000000006020820152811561366c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50600084610220015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e39190615936565b85610200015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137579190615936565b6137619190615973565b6007870154604080516101208101825260088a01546fffffffffffffffffffffffffffffffff700100000000000000000000000000000000909104168152600060208201819052818301819052606082018190526080820185905260a082018190526101a08a015160c083015273ffffffffffffffffffffffffffffffffffffffff89811660e08401526101e08b0151811661010084015292517fa589870900000000000000000000000000000000000000000000000000000000815294955093919092169163a5898709916138b79190600401600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015173ffffffffffffffffffffffffffffffffffffffff80821660e0850152610100915080828601511682850152505092915050565b606060405180830381865afa1580156138d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138f89190615a62565b5090915061390a905081612328614838565b86610160015111156040518060400160405280600281526020017f343400000000000000000000000000000000000000000000000000000000000081525090613980576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5050505050505050565b6000806000806139e1896101c0015151670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b945094505093509350836040518060400160405280600281526020017f323700000000000000000000000000000000000000000000000000000000000081525090613a59576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408051808201909152600281527f323900000000000000000000000000000000000000000000000000000000000060208201528115613ac7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408051808201909152600281527f323800000000000000000000000000000000000000000000000000000000000060208201528315613b35576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b506001856002811115613b4a57613b4a6155e5565b03613bc15760408051808201909152600281527f3431000000000000000000000000000000000000000000000000000000000000602082015287613bbb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50613e7c565b6002856002811115613bd557613bd56155e5565b03613e175760408051808201909152600281527f3432000000000000000000000000000000000000000000000000000000000000602082015286613c46576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060408051808201909152600281527f3331000000000000000000000000000000000000000000000000000000000000602082015282613cb3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5060038a0154604080516020810190915289548152613cee917501000000000000000000000000000000000000000000900461ffff166147b4565b1580613d0257506101c08901515161ffff16155b80613da957506101e08901516040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015613d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d9d9190615936565b613da78789615973565b115b6040518060400160405280600281526020017f333700000000000000000000000000000000000000000000000000000000000081525090613bbb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b604080518082018252600281527f3333000000000000000000000000000000000000000000000000000000000000602082015290517f08c379a00000000000000000000000000000000000000000000000000000000081526118f891906004016159df565b50505050505050505050565b61016081015115613f18576000613ea98261016001518361024001516149f2565b9050613ec28260e00151826141c290919063ffffffff16565b6101008301819052613ed390612a1b565b6001840180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055505b805115613fa5576000613f35826101800151836102400151614a37565b9050613f4f826101200151826141c290919063ffffffff16565b6101408301819052613f6090612a1b565b6002840180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055505b5050565b613fe26040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b816101a00151600003613ff457505050565b6101208201518251614005916141c2565b6020820152610140820151825161401b916141c2565b6040820152606082015161026083015161024084015161404392919064ffffffffff16614a40565b606082018190526040830151614058916141c2565b8082526020820151608084015160408401516140749190615973565b61407e91906156a8565b61408891906156a8565b608082018190526101a083015161409f9190614838565b60a0820181905215614127576140ca6104c48361010001518360a00151614b8a90919063ffffffff16565b6008840180546000906140f09084906fffffffffffffffffffffffffffffffff16615851565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b505050565b80516000907faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa16801580159061416c57506141686001826156a8565b8116155b9392505050565b815160009082167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101198116825b60029190911c9081156141b7576001016141a2565b925050505b92915050565b600081157ffffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff839004841115176141f757600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b60008060008060008061422f8760000151511590565b1561426b5750600094508493508392508291507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90508161477c565b61431a60405180610260016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016000151581525090565b608088015160ff161561435f57608088015160ff16600090815260208a905260409020606089015161434c9190614bc9565b6101808401526101c08301526101a08201525b87602001518160c00151101561467e5760c0810151885161437f91614ca8565b6143935760c081018051600101905261435f565b60c0810151600090815260208b9052604090205473ffffffffffffffffffffffffffffffffffffffff1661020082018190526143d95760c081018051600101905261435f565b61020081015173ffffffffffffffffffffffffffffffffffffffff16600090815260208c8152604091829020825180830190935280549283905260ff60a884901c81166101e0860152603084901c166060850181905261ffff601085901c811660a08701529093166080850152600a9290920a908301526101808201511580159061446f5750816101e00151896080015160ff16145b6145135760608901516102008301516040517fb3596f0700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015291169063b3596f0790602401602060405180830381865afa1580156144ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061450e9190615936565b61451a565b8161018001515b825260a08201511580159061453a575060c0820151895161453a916147b4565b1561462a5761455789604001518284600001518560200151614d2d565b6040830181905261010083018051614570908390615973565b90525060808901516101e083015161458b9160ff1690614e0c565b15156102408301526080820151156145e1578161024001516145b15781608001516145b8565b816101a001515b82604001516145c79190615a4b565b82610140018181516145d99190615973565b9052506145ea565b60016102208301525b8161024001516145fe578160a00151614605565b816101c001515b82604001516146149190615a4b565b82610160018181516146269190615973565b9052505b60c0820151895161463a91614e1d565b1561466d5761465789604001518284600001518560200151614e9f565b82610120018181516146699190615973565b9052505b5060c081018051600101905261435f565b8061010001516000036146925760006146ad565b806101000151816101400151816146ab576146ab6157e7565b045b6101408201526101008101516000036146c75760006146e2565b806101000151816101600151816146e0576146e06157e7565b045b610160820152610120810151156147245761471f81610120015161471983610160015184610100015161483890919063ffffffff16565b9061501f565b614746565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b60e0820181905261010082015161012083015161014084015161016085015161022090950151929a509098509650919450925090505b9499939850945094509450565b60008115612710600284041904841117156147a357600080fd5b506127109190910260028204010490565b60408051808201909152600281527f3734000000000000000000000000000000000000000000000000000000000000602082015260009060808310614826576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50509051600191821b82011c16151590565b600081157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec778390048411151761486d57600080fd5b506127109102611388010490565b60008061488785615056565b156149185760006148b8867f5555555555555555555555555555555555555555555555555555555555555555614173565b6000818152602086815260408083205473ffffffffffffffffffffffffffffffffffffffff1680845289835292819020815192830190915254908190529192509067400000000000000016156149155760019350915061491f9050565b50505b5060009050805b935093915050565b6000614966565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d80156149a557602081146149df576149a07f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f61492e565b6149ec565b823b6149d6576149d67f475076323a206e6f74206120636f6e7472616374000000000000000000000000601461492e565b600191506149ec565b3d6000803e600051151591505b50919050565b600080614a0664ffffffffff8416426156a8565b614a109085615a4b565b6301e1338090049050614a2f816b033b2e3c9fd0803ce8000000615973565b949350505050565b600061416c8383425b600080614a5464ffffffffff8516846156a8565b905080600003614a73576b033b2e3c9fd0803ce800000091505061416c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81016000808060028511614aa9576000614aae565b600285035b925066038882915c4000614ac28a806141c2565b81614acf57614acf6157e7565b0491506301e13380614ae1838b6141c2565b81614aee57614aee6157e7565b049050600082614afe8688615a4b565b614b089190615a4b565b60029004905060008285614b1c888a615a4b565b614b269190615a4b565b614b309190615a4b565b60069004905080826301e13380614b478a8f615a4b565b614b519190615816565b614b67906b033b2e3c9fd0803ce8000000615973565b614b719190615973565b614b7b9190615973565b9b9a5050505050505050505050565b600081156b033b2e3c9fd0803ce800000060028404190484111715614bae57600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b81546000908190819081906601000000000000900473ffffffffffffffffffffffffffffffffffffffff168015614c8d576040517fb3596f0700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015287169063b3596f0790602401602060405180830381865afa158015614c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c8a9190615936565b91505b50945461ffff80821697620100009092041695945092505050565b60408051808201909152600281527f3734000000000000000000000000000000000000000000000000000000000000602082015260009060808310614d1a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b5050905160019190911b1c600316151590565b600080614d3985615092565b6004868101546040517f1da24f3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116938201939093529293506000928792614de5928692911690631da24f3e90602401602060405180830381865afa158015614dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ddf9190615936565b906141c2565b614def9190615a4b565b9050838181614e0057614e006157e7565b04979650505050505050565b6000821580159061416c5750501490565b60408051808201909152600281527f3734000000000000000000000000000000000000000000000000000000000000602082015260009060808310614e8f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f891906159df565b50509051600191821b1c16151590565b60068301546040517f1da24f3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526000928392911690631da24f3e90602401602060405180830381865afa158015614f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f399190615936565b90508015614f5757614f54614f4d86615115565b82906141c2565b90505b60058501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152909116906370a0823190602401602060405180830381865afa158015614fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fed9190615936565b614ff79082615973565b90506150038185615a4b565b9050828181615014576150146157e7565b049695505050505050565b60008115670de0b6b3a76400006002840419048411171561503f57600080fd5b50670de0b6b3a76400009190910260028204010490565b80516000907f555555555555555555555555555555555555555555555555555555555555555516801580159061416c57506141686001826156a8565b6003810154600090700100000000000000000000000000000000900464ffffffffff164281036150d7575050600101546fffffffffffffffffffffffffffffffff1690565b600183015461416c906fffffffffffffffffffffffffffffffff80821691614ddf9170010000000000000000000000000000000090910416846149f2565b6003810154600090700100000000000000000000000000000000900464ffffffffff1642810361515a575050600201546fffffffffffffffffffffffffffffffff1690565b600283015461416c906fffffffffffffffffffffffffffffffff80821691614ddf917001000000000000000000000000000000009091041684614a37565b604051806102800160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161521c6040518060200160405280600081525090565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b604051610180810167ffffffffffffffff81118282101715615290577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b60405160a0810167ffffffffffffffff81118282101715615290577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461530257600080fd5b50565b8035615310816152e0565b919050565b80356003811061531057600080fd5b803561ffff8116811461531057600080fd5b801515811461530257600080fd5b803561531081615336565b803560ff8116811461531057600080fd5b600080600080600085870361020081121561537a57600080fd5b86359550602087013594506040870135935060608701359250610180807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80830112156153c557600080fd5b6153cd615245565b91506153db60808901615305565b82526153e960a08901615305565b60208301526153fa60c08901615305565b604083015260e08801356060830152610100615417818a01615315565b608084015261012061542a818b01615324565b60a085015261014061543d818c01615344565b60c0860152610160808c013560e0870152848c0135848701526154636101a08d01615305565b838701526154746101c08d0161534f565b828701526154856101e08d01615305565b818701525050505050809150509295509295909350565b6000806000808486036101008112156154b457600080fd5b85359450602086013593506040860135925060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0820112156154f657600080fd5b506154ff615296565b606086013561550d816152e0565b81526080860135602082015261552560a08701615315565b604082015260c0860135615538816152e0565b606082015260e086013561554b81615336565b6080820152939692955090935050565b60008060006060848603121561557057600080fd5b833592506020840135615582816152e0565b91506040840135615592816152e0565b809150509250925092565b600080600080608085870312156155b357600080fd5b843593506020850135925060408501356155cc816152e0565b91506155da60608601615315565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008060006060848603121561562957600080fd5b835161563481615336565b602085015160409095015190969495509392505050565b6000806040838503121561565e57600080fd5b825161566981615336565b6020939093015192949293505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156141bc576141bc615679565b600181815b8085111561571457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156156fa576156fa615679565b8085161561570757918102915b93841c93908002906156c0565b509250929050565b60008261572b575060016141bc565b81615738575060006141bc565b816001811461574e576002811461575857615774565b60019150506141bc565b60ff84111561576957615769615679565b50506001821b6141bc565b5060208310610133831016604e8410600b8410161715615797575081810a6141bc565b6157a183836156bb565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156157d3576157d3615679565b029392505050565b600061416c838361571c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261584c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6fffffffffffffffffffffffffffffffff81811683821601908082111561587a5761587a615679565b5092915050565b60006020828403121561589357600080fd5b815161416c816152e0565b6000602082840312156158b057600080fd5b815161416c81615336565b600381106158f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b73ffffffffffffffffffffffffffffffffffffffff85168152602081018490526080810161592760408301856158bb565b82606083015295945050505050565b60006020828403121561594857600080fd5b5051919050565b6000806040838503121561596257600080fd5b505080516020909101519092909150565b808201808211156141bc576141bc615679565b602081016141bc82846158bb565b600080600080608085870312156159aa57600080fd5b845193506020850151925060408501519150606085015164ffffffffff811681146159d457600080fd5b939692955090935050565b600060208083528351808285015260005b81811015615a0c578581018301518582016040015282016159f0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b80820281158282048414176141bc576141bc615679565b600080600060608486031215615a7757600080fd5b8351925060208401519150604084015190509250925092565b6fffffffffffffffffffffffffffffffff82811682821603908082111561587a5761587a61567956fea2646970667358221220ca3ceb10166a13a25e5d74267d08ae07d1516428274f1b8773dbd47d9a819b2e64736f6c63430008110033",
  "devdoc": {
    "author": "HopeLend",
    "kind": "dev",
    "methods": {
      "executeBorrow(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,mapping(uint8 => DataTypes.EModeCategory) storage,DataTypes.UserConfigurationMap storage,DataTypes.ExecuteBorrowParams)": {
        "details": "Emits the `Borrow()` event",
        "params": {
          "eModeCategories": "The configuration of all the efficiency mode categories",
          "params": "The additional parameters needed to execute the borrow function",
          "reservesData": "The state of all the reserves",
          "reservesList": "The addresses of all the active reserves",
          "userConfig": "The user configuration mapping that tracks the supplied/borrowed assets"
        }
      },
      "executeRebalanceStableBorrowRate(DataTypes.ReserveData storage,address,address)": {
        "details": "The rules that define if a position can be rebalanced are implemented in `ValidationLogic.validateRebalanceStableBorrowRate()`Emits the `RebalanceStableBorrowRate()` event",
        "params": {
          "asset": "The asset of the position being rebalanced",
          "reserve": "The state of the reserve of the asset being repaid",
          "user": "The user being rebalanced"
        }
      },
      "executeRepay(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,DataTypes.UserConfigurationMap storage,DataTypes.ExecuteRepayParams)": {
        "details": "Emits the `Repay()` event",
        "params": {
          "params": "The additional parameters needed to execute the repay function",
          "reservesData": "The state of all the reserves",
          "reservesList": "The addresses of all the active reserves",
          "userConfig": "The user configuration mapping that tracks the supplied/borrowed assets"
        },
        "returns": {
          "_0": "The actual amount being repaid"
        }
      },
      "executeSwapBorrowRateMode(DataTypes.ReserveData storage,DataTypes.UserConfigurationMap storage,address,DataTypes.InterestRateMode)": {
        "details": "Emits the `Swap()` event",
        "params": {
          "asset": "The asset of the position being swapped",
          "interestRateMode": "The current interest rate mode of the position being swapped",
          "reserve": "The of the reserve of the asset being repaid",
          "userConfig": "The user configuration mapping that tracks the supplied/borrowed assets"
        }
      }
    },
    "title": "BorrowLogic library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeBorrow(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,mapping(uint8 => DataTypes.EModeCategory) storage,DataTypes.UserConfigurationMap storage,DataTypes.ExecuteBorrowParams)": {
        "notice": "Implements the borrow feature. Borrowing allows users that provided collateral to draw liquidity from the HopeLend protocol proportionally to their collateralization power. For isolated positions, it also increases the isolated debt."
      },
      "executeRebalanceStableBorrowRate(DataTypes.ReserveData storage,address,address)": {
        "notice": "Implements the rebalance stable borrow rate feature. In case of liquidity crunches on the protocol, stable rate borrows might need to be rebalanced to bring back equilibrium between the borrow and supply APYs."
      },
      "executeRepay(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,DataTypes.UserConfigurationMap storage,DataTypes.ExecuteRepayParams)": {
        "notice": "Implements the repay feature. Repaying transfers the underlying back to the hToken and clears the equivalent amount of debt for the user by burning the corresponding debt token. For isolated positions, it also reduces the isolated debt."
      },
      "executeSwapBorrowRateMode(DataTypes.ReserveData storage,DataTypes.UserConfigurationMap storage,address,DataTypes.InterestRateMode)": {
        "notice": "Implements the swap borrow rate feature. Borrowers can swap from variable to stable positions at any time."
      }
    },
    "notice": "Implements the base logic for all the actions related to borrowing",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}