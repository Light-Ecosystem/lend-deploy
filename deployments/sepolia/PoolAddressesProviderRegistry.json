{
  "address": "0xDa57F7C5eB046ac7256Cd814ddF2722131c3Ff19",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressesProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AddressesProviderRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressesProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "AddressesProviderUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAddressesProviderAddressById",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addressesProvider",
          "type": "address"
        }
      ],
      "name": "getAddressesProviderIdByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddressesProvidersList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "registerAddressesProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "unregisterAddressesProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x57cfe3d2c5989447bba171bee17d172892c3f832f258556bc54123576892f720",
  "receipt": {
    "to": null,
    "from": "0x1Ee532cf775be02E0B306571e3555321FC75988d",
    "contractAddress": "0xDa57F7C5eB046ac7256Cd814ddF2722131c3Ff19",
    "transactionIndex": 24,
    "gasUsed": "766423",
    "logsBloom": "0x
    "blockHash": "0xef888a7c73537fff0ef88ebc07d40f8c6fa9303c5594654ee4fc24616fde5198",
    "transactionHash": "0x57cfe3d2c5989447bba171bee17d172892c3f832f258556bc54123576892f720",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 3828018,
        "transactionHash": "0x57cfe3d2c5989447bba171bee17d172892c3f832f258556bc54123576892f720",
        "address": "0xDa57F7C5eB046ac7256Cd814ddF2722131c3Ff19",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ee532cf775be02e0b306571e3555321fc75988d"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0xef888a7c73537fff0ef88ebc07d40f8c6fa9303c5594654ee4fc24616fde5198"
      },
      {
        "transactionIndex": 24,
        "blockNumber": 3828018,
        "transactionHash": "0x57cfe3d2c5989447bba171bee17d172892c3f832f258556bc54123576892f720",
        "address": "0xDa57F7C5eB046ac7256Cd814ddF2722131c3Ff19",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001ee532cf775be02e0b306571e3555321fc75988d",
          "0x0000000000000000000000001ee532cf775be02e0b306571e3555321fc75988d"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xef888a7c73537fff0ef88ebc07d40f8c6fa9303c5594654ee4fc24616fde5198"
      }
    ],
    "blockNumber": 3828018,
    "cumulativeGasUsed": "9417376",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1Ee532cf775be02E0B306571e3555321FC75988d"
  ],
  "numDeployments": 1,
  "solcInputHash": "d82d93b09adf61353f42807a3e112caf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AddressesProviderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AddressesProviderUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAddressesProviderAddressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"name\":\"getAddressesProviderIdByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressesProvidersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"registerAddressesProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"unregisterAddressesProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"HopeLend\",\"details\":\"Used for indexing purposes of HopeLend protocol's markets. The id assigned to a PoolAddressesProvider refers to the market it is connected with, for example with `1` for the HopeLend main market and `2` for the next created.\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"owner\":\"The owner address of this contract.\"}},\"getAddressesProviderAddressById(uint256)\":{\"params\":{\"id\":\"The id of the market\"},\"returns\":{\"_0\":\"The address of the PoolAddressesProvider with the given id or zero address if it is not registered\"}},\"getAddressesProviderIdByAddress(address)\":{\"params\":{\"addressesProvider\":\"The address of the PoolAddressesProvider\"},\"returns\":{\"_0\":\"The id of the PoolAddressesProvider or 0 if is not registered\"}},\"getAddressesProvidersList()\":{\"returns\":{\"_0\":\"The list of addresses providers\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"registerAddressesProvider(address,uint256)\":{\"details\":\"The PoolAddressesProvider must not already be registered in the registryThe id must not be used by an already registered PoolAddressesProvider\",\"params\":{\"id\":\"The id for the new PoolAddressesProvider, referring to the market it belongs to\",\"provider\":\"The address of the new PoolAddressesProvider\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unregisterAddressesProvider(address)\":{\"params\":{\"provider\":\"The PoolAddressesProvider address\"}}},\"title\":\"PoolAddressesProviderRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAddressesProviderAddressById(uint256)\":{\"notice\":\"Returns the address of a registered PoolAddressesProvider\"},\"getAddressesProviderIdByAddress(address)\":{\"notice\":\"Returns the id of a registered PoolAddressesProvider\"},\"getAddressesProvidersList()\":{\"notice\":\"Returns the list of registered addresses providers\"},\"registerAddressesProvider(address,uint256)\":{\"notice\":\"Registers an addresses provider\"},\"unregisterAddressesProvider(address)\":{\"notice\":\"Removes an addresses provider from the list of registered addresses providers\"}},\"notice\":\"Main registry of PoolAddressesProvider of HopeLend markets.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lend-core/contracts/protocol/configuration/PoolAddressesProviderRegistry.sol\":\"PoolAddressesProviderRegistry\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"lend-core/contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return payable(msg.sender);\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x718d68d9ba5ae2eefd635e13acee792210ac7a7840139234c4c23de2b1870895\",\"license\":\"MIT\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x8c163fb0fb6e09d4ece34ede2d749086faeaa8438c07cf5529e5fbca680043e2\",\"license\":\"MIT\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport './Ownable.sol';\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n  address private _pendingOwner;\\n\\n  event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Returns the address of the pending owner.\\n   */\\n  function pendingOwner() public virtual view returns (address) {\\n    return _pendingOwner;\\n  }\\n\\n  /**\\n   * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual override onlyOwner {\\n    _pendingOwner = newOwner;\\n    emit OwnershipTransferStarted(owner(), newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual override {\\n    delete _pendingOwner;\\n    super._transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev The new owner accepts the ownership transfer.\\n   */\\n  function acceptOwnership() external {\\n    address sender = _msgSender();\\n    require(pendingOwner() == sender, 'Ownable2Step: caller is not the new owner');\\n    _transferOwnership(sender);\\n  }\\n}\\n\",\"keccak256\":\"0xcc203d3e2ad72b2543f05b9091910ec47c91379872fd9a0605a5fab442bef807\",\"license\":\"MIT\"},\"lend-core/contracts/interfaces/IPoolAddressesProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IPoolAddressesProviderRegistry\\n * @author HopeLend\\n * @notice Defines the basic interface for an HopeLend Pool Addresses Provider Registry.\\n */\\ninterface IPoolAddressesProviderRegistry {\\n  /**\\n   * @dev Emitted when a new AddressesProvider is registered.\\n   * @param addressesProvider The address of the registered PoolAddressesProvider\\n   * @param id The id of the registered PoolAddressesProvider\\n   */\\n  event AddressesProviderRegistered(address indexed addressesProvider, uint256 indexed id);\\n\\n  /**\\n   * @dev Emitted when an AddressesProvider is unregistered.\\n   * @param addressesProvider The address of the unregistered PoolAddressesProvider\\n   * @param id The id of the unregistered PoolAddressesProvider\\n   */\\n  event AddressesProviderUnregistered(address indexed addressesProvider, uint256 indexed id);\\n\\n  /**\\n   * @notice Returns the list of registered addresses providers\\n   * @return The list of addresses providers\\n   */\\n  function getAddressesProvidersList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the id of a registered PoolAddressesProvider\\n   * @param addressesProvider The address of the PoolAddressesProvider\\n   * @return The id of the PoolAddressesProvider or 0 if is not registered\\n   */\\n  function getAddressesProviderIdByAddress(address addressesProvider)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of a registered PoolAddressesProvider\\n   * @param id The id of the market\\n   * @return The address of the PoolAddressesProvider with the given id or zero address if it is not registered\\n   */\\n  function getAddressesProviderAddressById(uint256 id) external view returns (address);\\n\\n  /**\\n   * @notice Registers an addresses provider\\n   * @dev The PoolAddressesProvider must not already be registered in the registry\\n   * @dev The id must not be used by an already registered PoolAddressesProvider\\n   * @param provider The address of the new PoolAddressesProvider\\n   * @param id The id for the new PoolAddressesProvider, referring to the market it belongs to\\n   */\\n  function registerAddressesProvider(address provider, uint256 id) external;\\n\\n  /**\\n   * @notice Removes an addresses provider from the list of registered addresses providers\\n   * @param provider The PoolAddressesProvider address\\n   */\\n  function unregisterAddressesProvider(address provider) external;\\n}\\n\",\"keccak256\":\"0x2290481f8003c1dedccc6b988bdd10814f2067b5954a5452958027ed8f58ce5b\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/configuration/PoolAddressesProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {Ownable2Step} from '../../dependencies/openzeppelin/contracts/Ownable2Step.sol';\\nimport {Errors} from '../libraries/helpers/Errors.sol';\\nimport {IPoolAddressesProviderRegistry} from '../../interfaces/IPoolAddressesProviderRegistry.sol';\\n\\n/**\\n * @title PoolAddressesProviderRegistry\\n * @author HopeLend\\n * @notice Main registry of PoolAddressesProvider of HopeLend markets.\\n * @dev Used for indexing purposes of HopeLend protocol's markets. The id assigned to a PoolAddressesProvider refers to the\\n * market it is connected with, for example with `1` for the HopeLend main market and `2` for the next created.\\n */\\ncontract PoolAddressesProviderRegistry is Ownable2Step, IPoolAddressesProviderRegistry {\\n  // Map of address provider ids (addressesProvider => id)\\n  mapping(address => uint256) private _addressesProviderToId;\\n  // Map of id to address provider (id => addressesProvider)\\n  mapping(uint256 => address) private _idToAddressesProvider;\\n  // List of addresses providers\\n  address[] private _addressesProvidersList;\\n  // Map of address provider list indexes (addressesProvider => indexInList)\\n  mapping(address => uint256) private _addressesProvidersIndexes;\\n\\n  /**\\n   * @dev Constructor.\\n   * @param owner The owner address of this contract.\\n   */\\n  constructor(address owner) {\\n    _transferOwnership(owner);\\n  }\\n\\n  /// @inheritdoc IPoolAddressesProviderRegistry\\n  function getAddressesProvidersList() external view override returns (address[] memory) {\\n    return _addressesProvidersList;\\n  }\\n\\n  /// @inheritdoc IPoolAddressesProviderRegistry\\n  function registerAddressesProvider(address provider, uint256 id) external override onlyOwner {\\n    require(id != 0, Errors.INVALID_ADDRESSES_PROVIDER_ID);\\n    require(_idToAddressesProvider[id] == address(0), Errors.INVALID_ADDRESSES_PROVIDER_ID);\\n    require(_addressesProviderToId[provider] == 0, Errors.ADDRESSES_PROVIDER_ALREADY_ADDED);\\n\\n    _addressesProviderToId[provider] = id;\\n    _idToAddressesProvider[id] = provider;\\n\\n    _addToAddressesProvidersList(provider);\\n    emit AddressesProviderRegistered(provider, id);\\n  }\\n\\n  /// @inheritdoc IPoolAddressesProviderRegistry\\n  function unregisterAddressesProvider(address provider) external override onlyOwner {\\n    require(_addressesProviderToId[provider] != 0, Errors.ADDRESSES_PROVIDER_NOT_REGISTERED);\\n    uint256 oldId = _addressesProviderToId[provider];\\n    _idToAddressesProvider[oldId] = address(0);\\n    _addressesProviderToId[provider] = 0;\\n\\n    _removeFromAddressesProvidersList(provider);\\n\\n    emit AddressesProviderUnregistered(provider, oldId);\\n  }\\n\\n  /// @inheritdoc IPoolAddressesProviderRegistry\\n  function getAddressesProviderIdByAddress(address addressesProvider)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _addressesProviderToId[addressesProvider];\\n  }\\n\\n  /// @inheritdoc IPoolAddressesProviderRegistry\\n  function getAddressesProviderAddressById(uint256 id) external view override returns (address) {\\n    return _idToAddressesProvider[id];\\n  }\\n\\n  /**\\n   * @notice Adds the addresses provider address to the list.\\n   * @param provider The address of the PoolAddressesProvider\\n   */\\n  function _addToAddressesProvidersList(address provider) internal {\\n    _addressesProvidersIndexes[provider] = _addressesProvidersList.length;\\n    _addressesProvidersList.push(provider);\\n  }\\n\\n  /**\\n   * @notice Removes the addresses provider address from the list.\\n   * @param provider The address of the PoolAddressesProvider\\n   */\\n  function _removeFromAddressesProvidersList(address provider) internal {\\n    uint256 index = _addressesProvidersIndexes[provider];\\n\\n    _addressesProvidersIndexes[provider] = 0;\\n\\n    // Swap the index of the last addresses provider in the list with the index of the provider to remove\\n    uint256 lastIndex = _addressesProvidersList.length - 1;\\n    if (index < lastIndex) {\\n      address lastProvider = _addressesProvidersList[lastIndex];\\n      _addressesProvidersList[index] = lastProvider;\\n      _addressesProvidersIndexes[lastProvider] = index;\\n    }\\n    _addressesProvidersList.pop();\\n  }\\n}\\n\",\"keccak256\":\"0x676c2eaea7a2bea1d3e1689971ad93b90e8de6cc440e893e4972efdf74d00e56\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Errors library\\n * @author HopeLend\\n * @notice Defines the error messages emitted by the different contracts of the HopeLend protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_HTOKEN = '11'; // 'The caller of the function is not an HToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (hToken supply or accruedToTreasury)'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\n  string public constant FAILOVER_ALREADY_ACTIVE = '92'; // Failover is already active\\n  string public constant FAILOVER_ALREADY_DEACTIVATED = '93'; // Failover is already deactivated\\n  string public constant CALLER_MUST_BE_LENDING_GAUGE = '94'; // 'The caller of this function must be a lending gauge'\\n  string public constant PARAMETER_ADDRESS_NOT_ZERO = '95'; // 'Parameter address is not zero'\\n  string public constant LENDING_GAUGE_PERCENTAGE_NOT_MATCH = '96'; // 'LendingGauge end percentage must greater than start percentage && start percentage must be increasing'\\n  string public constant INVALID_PHASES_LENGTH = '97'; // 'LendingGauge phases length invalid'\\n  string public constant PHASES_NOT_DEFINED = '98'; // 'LendingGauge phases not defined'\\n  string public constant MUST_BE_NON_NEGATIVE = '99'; // 'Result must be non-negative'\\n  string public constant INVALID_FEE_TO_VAULT_PERCENT = '100'; // Invalid FeeToVaultPercent \\n}\\n\",\"keccak256\":\"0xe154c34ecd3b9b957750d4b1f48a50ae6b58be3e6ea67566f8a35bf75ce1569f\",\"license\":\"LGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d6b380380610d6b83398101604081905261002f916100be565b61003833610047565b61004181610047565b506100ee565b600180546001600160a01b031916905561006b8161006e602090811b6107b917901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d057600080fd5b81516001600160a01b03811681146100e757600080fd5b9392505050565b610c6e806100fd6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063d258191e1161005b578063d258191e146101c3578063e30c3978146101d6578063f2fde38b146101f457600080fd5b80638da5cb5b14610161578063d0267be71461017f57600080fd5b806357dc0566116100a757806357dc0566146100f6578063715018a61461015157806379ba50971461015957600080fd5b80630de26707146100c3578063365ccbbf146100d8575b600080fd5b6100d66100d1366004610a6f565b610207565b005b6100e0610360565b6040516100ed9190610a91565b60405180910390f35b61012c610104366004610aeb565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ed565b6100d66103cf565b6100d66103e3565b60005473ffffffffffffffffffffffffffffffffffffffff1661012c565b6101b561018d366004610a6f565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b6040519081526020016100ed565b6100d66101d1366004610b04565b610498565b60015473ffffffffffffffffffffffffffffffffffffffff1661012c565b6100d6610202366004610a6f565b610709565b61020f61082e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604091829020548251808401909352600183527f3700000000000000000000000000000000000000000000000000000000000000918301919091526102ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a49190610b2e565b60405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff8116600081815260026020818152604080842080548086526003845291852080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559484529190529155610319826108af565b604051819073ffffffffffffffffffffffffffffffffffffffff8416907f254723080701bde71d562cad0e967cef23d86bb27ee842c190a2596820f3b24190600090a35050565b606060048054806020026020016040519081016040528092919081815260200182805480156103c557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161039a575b5050505050905090565b6103d761082e565b6103e16000610a15565b565b600154339073ffffffffffffffffffffffffffffffffffffffff16811461048c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e6572000000000000000000000000000000000000000000000060648201526084016102a4565b61049581610a15565b50565b6104a061082e565b60408051808201909152600181527f380000000000000000000000000000000000000000000000000000000000000060208201528161050c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a49190610b2e565b50600081815260036020908152604091829020548251808401909352600183527f38000000000000000000000000000000000000000000000000000000000000009183019190915273ffffffffffffffffffffffffffffffffffffffff16156105a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a49190610b2e565b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600260208181526040928390205483518085019094529183527f38360000000000000000000000000000000000000000000000000000000000009083015215610635576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a49190610b2e565b5073ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260408083208590558483526003825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116861790915560048054868652600590945282852084905560018401815584527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90920180549092168417909155518392917fc2e7cc813550ef0e7126cc0571281850ce5df2e9c400acf3589c38e4627f85f191a35050565b61071161082e565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561077460005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a4565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604081208054908290556004549091906108ec90600190610b9a565b9050808210156109a75760006004828154811061090b5761090b610bda565b6000918252602090912001546004805473ffffffffffffffffffffffffffffffffffffffff909216925082918590811061094757610947610bda565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559290911681526005909152604090208290555b60048054806109b8576109b8610c09565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055610495816107b9565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a6a57600080fd5b919050565b600060208284031215610a8157600080fd5b610a8a82610a46565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610adf57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610aad565b50909695505050505050565b600060208284031215610afd57600080fd5b5035919050565b60008060408385031215610b1757600080fd5b610b2083610a46565b946020939093013593505050565b600060208083528351808285015260005b81811015610b5b57858101830151858201604001528201610b3f565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b81810381811115610bd4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220171dab2d5d18605104257f52c4d1abdb5604adb26e04308acaa081140b1c463764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063d258191e1161005b578063d258191e146101c3578063e30c3978146101d6578063f2fde38b146101f457600080fd5b80638da5cb5b14610161578063d0267be71461017f57600080fd5b806357dc0566116100a757806357dc0566146100f6578063715018a61461015157806379ba50971461015957600080fd5b80630de26707146100c3578063365ccbbf146100d8575b600080fd5b6100d66100d1366004610a6f565b610207565b005b6100e0610360565b6040516100ed9190610a91565b60405180910390f35b61012c610104366004610aeb565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ed565b6100d66103cf565b6100d66103e3565b60005473ffffffffffffffffffffffffffffffffffffffff1661012c565b6101b561018d366004610a6f565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b6040519081526020016100ed565b6100d66101d1366004610b04565b610498565b60015473ffffffffffffffffffffffffffffffffffffffff1661012c565b6100d6610202366004610a6f565b610709565b61020f61082e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604091829020548251808401909352600183527f3700000000000000000000000000000000000000000000000000000000000000918301919091526102ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a49190610b2e565b60405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff8116600081815260026020818152604080842080548086526003845291852080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559484529190529155610319826108af565b604051819073ffffffffffffffffffffffffffffffffffffffff8416907f254723080701bde71d562cad0e967cef23d86bb27ee842c190a2596820f3b24190600090a35050565b606060048054806020026020016040519081016040528092919081815260200182805480156103c557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161039a575b5050505050905090565b6103d761082e565b6103e16000610a15565b565b600154339073ffffffffffffffffffffffffffffffffffffffff16811461048c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e6572000000000000000000000000000000000000000000000060648201526084016102a4565b61049581610a15565b50565b6104a061082e565b60408051808201909152600181527f380000000000000000000000000000000000000000000000000000000000000060208201528161050c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a49190610b2e565b50600081815260036020908152604091829020548251808401909352600183527f38000000000000000000000000000000000000000000000000000000000000009183019190915273ffffffffffffffffffffffffffffffffffffffff16156105a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a49190610b2e565b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600260208181526040928390205483518085019094529183527f38360000000000000000000000000000000000000000000000000000000000009083015215610635576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a49190610b2e565b5073ffffffffffffffffffffffffffffffffffffffff821660008181526002602090815260408083208590558483526003825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116861790915560048054868652600590945282852084905560018401815584527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90920180549092168417909155518392917fc2e7cc813550ef0e7126cc0571281850ce5df2e9c400acf3589c38e4627f85f191a35050565b61071161082e565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561077460005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a4565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604081208054908290556004549091906108ec90600190610b9a565b9050808210156109a75760006004828154811061090b5761090b610bda565b6000918252602090912001546004805473ffffffffffffffffffffffffffffffffffffffff909216925082918590811061094757610947610bda565b600091825260208083209190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790559290911681526005909152604090208290555b60048054806109b8576109b8610c09565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505050565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055610495816107b9565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a6a57600080fd5b919050565b600060208284031215610a8157600080fd5b610a8a82610a46565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610adf57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610aad565b50909695505050505050565b600060208284031215610afd57600080fd5b5035919050565b60008060408385031215610b1757600080fd5b610b2083610a46565b946020939093013593505050565b600060208083528351808285015260005b81811015610b5b57858101830151858201604001528201610b3f565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b81810381811115610bd4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220171dab2d5d18605104257f52c4d1abdb5604adb26e04308acaa081140b1c463764736f6c63430008110033",
  "devdoc": {
    "author": "HopeLend",
    "details": "Used for indexing purposes of HopeLend protocol's markets. The id assigned to a PoolAddressesProvider refers to the market it is connected with, for example with `1` for the HopeLend main market and `2` for the next created.",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "owner": "The owner address of this contract."
        }
      },
      "getAddressesProviderAddressById(uint256)": {
        "params": {
          "id": "The id of the market"
        },
        "returns": {
          "_0": "The address of the PoolAddressesProvider with the given id or zero address if it is not registered"
        }
      },
      "getAddressesProviderIdByAddress(address)": {
        "params": {
          "addressesProvider": "The address of the PoolAddressesProvider"
        },
        "returns": {
          "_0": "The id of the PoolAddressesProvider or 0 if is not registered"
        }
      },
      "getAddressesProvidersList()": {
        "returns": {
          "_0": "The list of addresses providers"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "registerAddressesProvider(address,uint256)": {
        "details": "The PoolAddressesProvider must not already be registered in the registryThe id must not be used by an already registered PoolAddressesProvider",
        "params": {
          "id": "The id for the new PoolAddressesProvider, referring to the market it belongs to",
          "provider": "The address of the new PoolAddressesProvider"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unregisterAddressesProvider(address)": {
        "params": {
          "provider": "The PoolAddressesProvider address"
        }
      }
    },
    "title": "PoolAddressesProviderRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAddressesProviderAddressById(uint256)": {
        "notice": "Returns the address of a registered PoolAddressesProvider"
      },
      "getAddressesProviderIdByAddress(address)": {
        "notice": "Returns the id of a registered PoolAddressesProvider"
      },
      "getAddressesProvidersList()": {
        "notice": "Returns the list of registered addresses providers"
      },
      "registerAddressesProvider(address,uint256)": {
        "notice": "Registers an addresses provider"
      },
      "unregisterAddressesProvider(address)": {
        "notice": "Removes an addresses provider from the list of registered addresses providers"
      }
    },
    "notice": "Main registry of PoolAddressesProvider of HopeLend markets.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2475,
        "contract": "lend-core/contracts/protocol/configuration/PoolAddressesProviderRegistry.sol:PoolAddressesProviderRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2588,
        "contract": "lend-core/contracts/protocol/configuration/PoolAddressesProviderRegistry.sol:PoolAddressesProviderRegistry",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12813,
        "contract": "lend-core/contracts/protocol/configuration/PoolAddressesProviderRegistry.sol:PoolAddressesProviderRegistry",
        "label": "_addressesProviderToId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12817,
        "contract": "lend-core/contracts/protocol/configuration/PoolAddressesProviderRegistry.sol:PoolAddressesProviderRegistry",
        "label": "_idToAddressesProvider",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12820,
        "contract": "lend-core/contracts/protocol/configuration/PoolAddressesProviderRegistry.sol:PoolAddressesProviderRegistry",
        "label": "_addressesProvidersList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 12824,
        "contract": "lend-core/contracts/protocol/configuration/PoolAddressesProviderRegistry.sol:PoolAddressesProviderRegistry",
        "label": "_addressesProvidersIndexes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}