{
  "address": "0x99bbB5d92E51aFe4Ce78A65d458B5641535c9818",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hopeLendGovShortTimelock",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "cancelStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "funds",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ed391ce32bda0c0ba9b002e5d8a4b2ea9c38cd233f0fd3100032301d528c9da",
  "receipt": {
    "to": null,
    "from": "0xcbeD65Db7E177D4875dDF5B67E13326A43a7B03f",
    "contractAddress": "0x99bbB5d92E51aFe4Ce78A65d458B5641535c9818",
    "transactionIndex": 9,
    "gasUsed": "524226",
    "logsBloom": "0x
    "blockHash": "0x93cf4bf89b1508f63386e3a28a5cace60a6a3a25eedc90a2e1cb7ef1deca5604",
    "transactionHash": "0x9ed391ce32bda0c0ba9b002e5d8a4b2ea9c38cd233f0fd3100032301d528c9da",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 3607237,
        "transactionHash": "0x9ed391ce32bda0c0ba9b002e5d8a4b2ea9c38cd233f0fd3100032301d528c9da",
        "address": "0x99bbB5d92E51aFe4Ce78A65d458B5641535c9818",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cbed65db7e177d4875ddf5b67e13326a43a7b03f"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x93cf4bf89b1508f63386e3a28a5cace60a6a3a25eedc90a2e1cb7ef1deca5604"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 3607237,
        "transactionHash": "0x9ed391ce32bda0c0ba9b002e5d8a4b2ea9c38cd233f0fd3100032301d528c9da",
        "address": "0x99bbB5d92E51aFe4Ce78A65d458B5641535c9818",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000cbed65db7e177d4875ddf5b67e13326a43a7b03f",
          "0x0000000000000000000000001ee532cf775be02e0b306571e3555321fc75988d"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x93cf4bf89b1508f63386e3a28a5cace60a6a3a25eedc90a2e1cb7ef1deca5604"
      }
    ],
    "blockNumber": 3607237,
    "cumulativeGasUsed": "1484885",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1Ee532cf775be02E0B306571e3555321FC75988d"
  ],
  "numDeployments": 1,
  "solcInputHash": "cbbf83321d7e0905d0f69c04af64508d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hopeLendGovShortTimelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,address,address,uint256)\":{\"params\":{\"amount\":\"Allowance to approve*\",\"collector\":\"The collector contract with funds (HopeLend ecosystem reserve)\",\"recipient\":\"Allowance's recipient\",\"token\":\"The asset address\"}},\"cancelStream(address,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (HopeLend ecosystem reserve)\",\"streamId\":\"The id of the stream to cancel\"},\"returns\":{\"_0\":\"bool If the cancellation happened correctly*\"}},\"constructor\":{\"params\":{\"hopeLendGovShortTimelock\":\"The address of the HopeLend's governance executor, owning this contract\"}},\"createStream(address,address,uint256,address,uint256,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (HopeLend ecosystem reserve)\",\"deposit\":\"Total amount to be streamed\",\"recipient\":\"The recipient of the stream of token\",\"startTime\":\"The unix timestamp for when the stream starts\",\"stopTime\":\"The unix timestamp for when the stream stops\",\"tokenAddress\":\"The ERC20 token to use as streaming asset\"},\"returns\":{\"_0\":\"uint256 The stream id created*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address,address,address,uint256)\":{\"params\":{\"amount\":\"Amount to transfer*\",\"collector\":\"The collector contract with funds (HopeLend ecosystem reserve)\",\"recipient\":\"Transfer's recipient\",\"token\":\"The asset address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFromStream(address,uint256,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (HopeLend ecosystem reserve)\",\"funds\":\"Amount to withdraw\",\"streamId\":\"The id of the stream to withdraw tokens from\"},\"returns\":{\"_0\":\"bool If the withdrawal finished properly*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,address,address,uint256)\":{\"notice\":\"Proxy function for ERC20's approve(), pointing to a specific collector contract\"},\"cancelStream(address,uint256)\":{\"notice\":\"Proxy function to cancel a stream of token on a specific collector contract\"},\"constructor\":{\"notice\":\"Constructor.\"},\"createStream(address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Proxy function to create a stream of token on a specific collector contract\"},\"transfer(address,address,address,uint256)\":{\"notice\":\"Proxy function for ERC20's transfer(), pointing to a specific collector contract\"},\"withdrawFromStream(address,uint256,uint256)\":{\"notice\":\"Proxy function to withdraw from a stream of token on a specific collector contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lend-periphery/contracts/treasury/HopeLendEcosystemReserveController.sol\":\"HopeLendEcosystemReserveController\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"lend-core/contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return payable(msg.sender);\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x718d68d9ba5ae2eefd635e13acee792210ac7a7840139234c4c23de2b1870895\",\"license\":\"MIT\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xaab45993655e2e30909010506e0a120338362676a4047bb936c300a06297cc0f\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x8c163fb0fb6e09d4ece34ede2d749086faeaa8438c07cf5529e5fbca680043e2\",\"license\":\"MIT\"},\"lend-periphery/contracts/treasury/HopeLendEcosystemReserveController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {Ownable} from 'lend-core/contracts/dependencies/openzeppelin/contracts/Ownable.sol';\\nimport {IStreamable} from './interfaces/IStreamable.sol';\\nimport {IAdminControlledEcosystemReserve} from './interfaces/IAdminControlledEcosystemReserve.sol';\\nimport {IHopeLendEcosystemReserveController} from './interfaces/IHopeLendEcosystemReserveController.sol';\\nimport {IERC20} from 'lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\n\\ncontract HopeLendEcosystemReserveController is Ownable, IHopeLendEcosystemReserveController {\\n  /**\\n   * @notice Constructor.\\n   * @param hopeLendGovShortTimelock The address of the HopeLend's governance executor, owning this contract\\n   */\\n  constructor(address hopeLendGovShortTimelock) {\\n    transferOwnership(hopeLendGovShortTimelock);\\n  }\\n\\n  /// @inheritdoc IHopeLendEcosystemReserveController\\n  function approve(\\n    address collector,\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IAdminControlledEcosystemReserve(collector).approve(token, recipient, amount);\\n  }\\n\\n  /// @inheritdoc IHopeLendEcosystemReserveController\\n  function transfer(\\n    address collector,\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IAdminControlledEcosystemReserve(collector).transfer(token, recipient, amount);\\n  }\\n\\n  /// @inheritdoc IHopeLendEcosystemReserveController\\n  function createStream(\\n    address collector,\\n    address recipient,\\n    uint256 deposit,\\n    IERC20 tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  ) external onlyOwner returns (uint256) {\\n    return\\n      IStreamable(collector).createStream(\\n        recipient,\\n        deposit,\\n        address(tokenAddress),\\n        startTime,\\n        stopTime\\n      );\\n  }\\n\\n  /// @inheritdoc IHopeLendEcosystemReserveController\\n  function withdrawFromStream(\\n    address collector,\\n    uint256 streamId,\\n    uint256 funds\\n  ) external onlyOwner returns (bool) {\\n    return IStreamable(collector).withdrawFromStream(streamId, funds);\\n  }\\n\\n  /// @inheritdoc IHopeLendEcosystemReserveController\\n  function cancelStream(address collector, uint256 streamId) external onlyOwner returns (bool) {\\n    return IStreamable(collector).cancelStream(streamId);\\n  }\\n}\\n\",\"keccak256\":\"0x6645be2359202a989e679c26d3128a773d5548750c8f071cef10c4a5a32ea7da\",\"license\":\"MIT\"},\"lend-periphery/contracts/treasury/interfaces/IAdminControlledEcosystemReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from 'lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\n\\ninterface IAdminControlledEcosystemReserve {\\n  /** @notice Emitted when the funds admin changes\\n   * @param fundsAdmin The new funds admin\\n   **/\\n  event NewFundsAdmin(address indexed fundsAdmin);\\n\\n  /** @notice Returns the mock ETH reference address\\n   * @return address The address\\n   **/\\n  function ETH_MOCK_ADDRESS() external pure returns (address);\\n\\n  /**\\n   * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\\n   * @return address The address of the funds admin\\n   **/\\n  function getFundsAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Function for the funds admin to give ERC20 allowance to other parties\\n   * @param token The address of the token to give allowance from\\n   * @param recipient Allowance's recipient\\n   * @param amount Allowance to approve\\n   **/\\n  function approve(\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Function for the funds admin to transfer ERC20 tokens to other parties\\n   * @param token The address of the token to transfer\\n   * @param recipient Transfer's recipient\\n   * @param amount Amount to transfer\\n   **/\\n  function transfer(\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5e6de227f791544600738453fa73ea0434dffe23ffe9e783571fbaa1ad223833\",\"license\":\"GPL-3.0\"},\"lend-periphery/contracts/treasury/interfaces/IHopeLendEcosystemReserveController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from 'lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\n\\ninterface IHopeLendEcosystemReserveController {\\n  /**\\n   * @notice Proxy function for ERC20's approve(), pointing to a specific collector contract\\n   * @param collector The collector contract with funds (HopeLend ecosystem reserve)\\n   * @param token The asset address\\n   * @param recipient Allowance's recipient\\n   * @param amount Allowance to approve\\n   **/\\n  function approve(\\n    address collector,\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Proxy function for ERC20's transfer(), pointing to a specific collector contract\\n   * @param collector The collector contract with funds (HopeLend ecosystem reserve)\\n   * @param token The asset address\\n   * @param recipient Transfer's recipient\\n   * @param amount Amount to transfer\\n   **/\\n  function transfer(\\n    address collector,\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Proxy function to create a stream of token on a specific collector contract\\n   * @param collector The collector contract with funds (HopeLend ecosystem reserve)\\n   * @param recipient The recipient of the stream of token\\n   * @param deposit Total amount to be streamed\\n   * @param tokenAddress The ERC20 token to use as streaming asset\\n   * @param startTime The unix timestamp for when the stream starts\\n   * @param stopTime The unix timestamp for when the stream stops\\n   * @return uint256 The stream id created\\n   **/\\n  function createStream(\\n    address collector,\\n    address recipient,\\n    uint256 deposit,\\n    IERC20 tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Proxy function to withdraw from a stream of token on a specific collector contract\\n   * @param collector The collector contract with funds (HopeLend ecosystem reserve)\\n   * @param streamId The id of the stream to withdraw tokens from\\n   * @param funds Amount to withdraw\\n   * @return bool If the withdrawal finished properly\\n   **/\\n  function withdrawFromStream(\\n    address collector,\\n    uint256 streamId,\\n    uint256 funds\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Proxy function to cancel a stream of token on a specific collector contract\\n   * @param collector The collector contract with funds (HopeLend ecosystem reserve)\\n   * @param streamId The id of the stream to cancel\\n   * @return bool If the cancellation happened correctly\\n   **/\\n  function cancelStream(address collector, uint256 streamId) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1596f87dc3c17b530f6348e5bbe403fe63d3f6072b0ba2c94b4e2b19b60e74b8\",\"license\":\"MIT\"},\"lend-periphery/contracts/treasury/interfaces/IStreamable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IStreamable {\\n  struct Stream {\\n    uint256 deposit;\\n    uint256 ratePerSecond;\\n    uint256 remainingBalance;\\n    uint256 startTime;\\n    uint256 stopTime;\\n    address recipient;\\n    address sender;\\n    address tokenAddress;\\n    bool isEntity;\\n  }\\n\\n  event CreateStream(\\n    uint256 indexed streamId,\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 deposit,\\n    address tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  );\\n\\n  event WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);\\n\\n  event CancelStream(\\n    uint256 indexed streamId,\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 senderBalance,\\n    uint256 recipientBalance\\n  );\\n\\n  function balanceOf(uint256 streamId, address who) external view returns (uint256 balance);\\n\\n  function getStream(uint256 streamId)\\n    external\\n    view\\n    returns (\\n      address sender,\\n      address recipient,\\n      uint256 deposit,\\n      address token,\\n      uint256 startTime,\\n      uint256 stopTime,\\n      uint256 remainingBalance,\\n      uint256 ratePerSecond\\n    );\\n\\n  function createStream(\\n    address recipient,\\n    uint256 deposit,\\n    address tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  ) external returns (uint256 streamId);\\n\\n  function withdrawFromStream(uint256 streamId, uint256 funds) external returns (bool);\\n\\n  function cancelStream(uint256 streamId) external returns (bool);\\n\\n  function initialize(address fundsAdmin) external;\\n}\\n\",\"keccak256\":\"0x297162341eba9a0561152bbb952992798d68094c91107949d59f6803136eb32c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516109ab3803806109ab83398101604081905261002f91610171565b61003833610047565b61004181610097565b506101a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61009f610115565b6001600160a01b0381166101095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61011281610047565b50565b6000546001600160a01b0316331461016f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610100565b565b60006020828403121561018357600080fd5b81516001600160a01b038116811461019a57600080fd5b9392505050565b6107fb806101b06000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100e5578063f18d03cc1461010d578063f2fde38b14610120578063fd59e1341461013357600080fd5b80632f436bfa1461008d57806359eba454146100b5578063715018a6146100ca5780637dc14a8e146100d2575b600080fd5b6100a061009b366004610656565b610154565b60405190151581526020015b60405180910390f35b6100c86100c336600461068b565b6101fe565b005b6100c861029d565b6100a06100e03660046106dc565b6102b1565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b6100c861011b36600461068b565b610353565b6100c861012e366004610708565b6103be565b610146610141366004610725565b61047a565b6040519081526020016100ac565b600061015e61053e565b6040517f7a9b2c6c000000000000000000000000000000000000000000000000000000008152600481018490526024810183905273ffffffffffffffffffffffffffffffffffffffff851690637a9b2c6c906044016020604051808303816000875af11580156101d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f6919061078a565b949350505050565b61020661053e565b6040517fe1f21c6700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905285169063e1f21c67906064015b600060405180830381600087803b15801561027f57600080fd5b505af1158015610293573d6000803e3d6000fd5b5050505050505050565b6102a561053e565b6102af60006105bf565b565b60006102bb61053e565b6040517f6db9241b0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff841690636db9241b906024016020604051808303816000875af1158015610328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034c919061078a565b9392505050565b61035b61053e565b6040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905285169063beabacc890606401610265565b6103c661053e565b73ffffffffffffffffffffffffffffffffffffffff811661046e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610477816105bf565b50565b600061048461053e565b6040517fcc1b4bf600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790528581166044830152606482018590526084820184905288169063cc1b4bf69060a4016020604051808303816000875af115801561050f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053391906107ac565b979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610465565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff8116811461047757600080fd5b60008060006060848603121561066b57600080fd5b833561067681610634565b95602085013595506040909401359392505050565b600080600080608085870312156106a157600080fd5b84356106ac81610634565b935060208501356106bc81610634565b925060408501356106cc81610634565b9396929550929360600135925050565b600080604083850312156106ef57600080fd5b82356106fa81610634565b946020939093013593505050565b60006020828403121561071a57600080fd5b813561034c81610634565b60008060008060008060c0878903121561073e57600080fd5b863561074981610634565b9550602087013561075981610634565b945060408701359350606087013561077081610634565b9598949750929560808101359460a0909101359350915050565b60006020828403121561079c57600080fd5b8151801515811461034c57600080fd5b6000602082840312156107be57600080fd5b505191905056fea2646970667358221220c8eb272bb5b1e88f0df22f8e896116e56af41da3476cd813d2139fc5b26ee48264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100e5578063f18d03cc1461010d578063f2fde38b14610120578063fd59e1341461013357600080fd5b80632f436bfa1461008d57806359eba454146100b5578063715018a6146100ca5780637dc14a8e146100d2575b600080fd5b6100a061009b366004610656565b610154565b60405190151581526020015b60405180910390f35b6100c86100c336600461068b565b6101fe565b005b6100c861029d565b6100a06100e03660046106dc565b6102b1565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b6100c861011b36600461068b565b610353565b6100c861012e366004610708565b6103be565b610146610141366004610725565b61047a565b6040519081526020016100ac565b600061015e61053e565b6040517f7a9b2c6c000000000000000000000000000000000000000000000000000000008152600481018490526024810183905273ffffffffffffffffffffffffffffffffffffffff851690637a9b2c6c906044016020604051808303816000875af11580156101d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f6919061078a565b949350505050565b61020661053e565b6040517fe1f21c6700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905285169063e1f21c67906064015b600060405180830381600087803b15801561027f57600080fd5b505af1158015610293573d6000803e3d6000fd5b5050505050505050565b6102a561053e565b6102af60006105bf565b565b60006102bb61053e565b6040517f6db9241b0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff841690636db9241b906024016020604051808303816000875af1158015610328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034c919061078a565b9392505050565b61035b61053e565b6040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905285169063beabacc890606401610265565b6103c661053e565b73ffffffffffffffffffffffffffffffffffffffff811661046e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610477816105bf565b50565b600061048461053e565b6040517fcc1b4bf600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790528581166044830152606482018590526084820184905288169063cc1b4bf69060a4016020604051808303816000875af115801561050f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053391906107ac565b979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610465565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff8116811461047757600080fd5b60008060006060848603121561066b57600080fd5b833561067681610634565b95602085013595506040909401359392505050565b600080600080608085870312156106a157600080fd5b84356106ac81610634565b935060208501356106bc81610634565b925060408501356106cc81610634565b9396929550929360600135925050565b600080604083850312156106ef57600080fd5b82356106fa81610634565b946020939093013593505050565b60006020828403121561071a57600080fd5b813561034c81610634565b60008060008060008060c0878903121561073e57600080fd5b863561074981610634565b9550602087013561075981610634565b945060408701359350606087013561077081610634565b9598949750929560808101359460a0909101359350915050565b60006020828403121561079c57600080fd5b8151801515811461034c57600080fd5b6000602082840312156107be57600080fd5b505191905056fea2646970667358221220c8eb272bb5b1e88f0df22f8e896116e56af41da3476cd813d2139fc5b26ee48264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,address,address,uint256)": {
        "params": {
          "amount": "Allowance to approve*",
          "collector": "The collector contract with funds (HopeLend ecosystem reserve)",
          "recipient": "Allowance's recipient",
          "token": "The asset address"
        }
      },
      "cancelStream(address,uint256)": {
        "params": {
          "collector": "The collector contract with funds (HopeLend ecosystem reserve)",
          "streamId": "The id of the stream to cancel"
        },
        "returns": {
          "_0": "bool If the cancellation happened correctly*"
        }
      },
      "constructor": {
        "params": {
          "hopeLendGovShortTimelock": "The address of the HopeLend's governance executor, owning this contract"
        }
      },
      "createStream(address,address,uint256,address,uint256,uint256)": {
        "params": {
          "collector": "The collector contract with funds (HopeLend ecosystem reserve)",
          "deposit": "Total amount to be streamed",
          "recipient": "The recipient of the stream of token",
          "startTime": "The unix timestamp for when the stream starts",
          "stopTime": "The unix timestamp for when the stream stops",
          "tokenAddress": "The ERC20 token to use as streaming asset"
        },
        "returns": {
          "_0": "uint256 The stream id created*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address,address,address,uint256)": {
        "params": {
          "amount": "Amount to transfer*",
          "collector": "The collector contract with funds (HopeLend ecosystem reserve)",
          "recipient": "Transfer's recipient",
          "token": "The asset address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFromStream(address,uint256,uint256)": {
        "params": {
          "collector": "The collector contract with funds (HopeLend ecosystem reserve)",
          "funds": "Amount to withdraw",
          "streamId": "The id of the stream to withdraw tokens from"
        },
        "returns": {
          "_0": "bool If the withdrawal finished properly*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,address,address,uint256)": {
        "notice": "Proxy function for ERC20's approve(), pointing to a specific collector contract"
      },
      "cancelStream(address,uint256)": {
        "notice": "Proxy function to cancel a stream of token on a specific collector contract"
      },
      "constructor": {
        "notice": "Constructor."
      },
      "createStream(address,address,uint256,address,uint256,uint256)": {
        "notice": "Proxy function to create a stream of token on a specific collector contract"
      },
      "transfer(address,address,address,uint256)": {
        "notice": "Proxy function for ERC20's transfer(), pointing to a specific collector contract"
      },
      "withdrawFromStream(address,uint256,uint256)": {
        "notice": "Proxy function to withdraw from a stream of token on a specific collector contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2561,
        "contract": "lend-periphery/contracts/treasury/HopeLendEcosystemReserveController.sol:HopeLendEcosystemReserveController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}