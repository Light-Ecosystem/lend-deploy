{
  "address": "0x93fb20A96CAE0aA88CE085DA991A7073393D12F2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "emissionManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsAccrued",
          "type": "uint256"
        }
      ],
      "name": "Accrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldEmission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEmission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDistributionEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDistributionEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetIndex",
          "type": "uint256"
        }
      ],
      "name": "AssetConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "ClaimerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardOracle",
          "type": "address"
        }
      ],
      "name": "RewardOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "transferStrategy",
          "type": "address"
        }
      ],
      "name": "TransferStrategyInstalled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EMISSION_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimAllRewards",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "rewardsList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "claimedAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimAllRewardsOnBehalf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "rewardsList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "claimedAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "claimAllRewardsToSelf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "rewardsList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "claimedAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "claimRewardsOnBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "claimRewardsToSelf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint88",
              "name": "emissionPerSecond",
              "type": "uint88"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "distributionEnd",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "reward",
              "type": "address"
            },
            {
              "internalType": "contract ITransferStrategyBase",
              "name": "transferStrategy",
              "type": "address"
            },
            {
              "internalType": "contract IEACAggregatorProxy",
              "name": "rewardOracle",
              "type": "address"
            }
          ],
          "internalType": "struct RewardsDataTypes.RewardsConfigInput[]",
          "name": "config",
          "type": "tuple[]"
        }
      ],
      "name": "configureAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllUserRewards",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "rewardsList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "unclaimedAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getAssetIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getClaimer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getDistributionEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmissionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getRewardOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getRewardsByAsset",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getRewardsData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getTransferStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getUserAccruedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getUserAssetIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getUserRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userBalance",
          "type": "uint256"
        }
      ],
      "name": "handleAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "setClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "newDistributionEnd",
          "type": "uint32"
        }
      ],
      "name": "setDistributionEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        },
        {
          "internalType": "uint88[]",
          "name": "newEmissionsPerSecond",
          "type": "uint88[]"
        }
      ],
      "name": "setEmissionPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "contract IEACAggregatorProxy",
          "name": "rewardOracle",
          "type": "address"
        }
      ],
      "name": "setRewardOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "contract ITransferStrategyBase",
          "name": "transferStrategy",
          "type": "address"
        }
      ],
      "name": "setTransferStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a6776230d6d9e1af5d8ac8bd87841cb905cdcc13ba3bcf36b595120289a3923",
  "receipt": {
    "to": null,
    "from": "0x3141f8D6BE4e4d9137577798C1e127Db81D196d7",
    "contractAddress": "0x93fb20A96CAE0aA88CE085DA991A7073393D12F2",
    "transactionIndex": 14,
    "gasUsed": "4058125",
    "logsBloom": "0x
    "blockHash": "0x7e2cf39f04d9139986c9cc668fa72c087c91c66abda92de333386b20ea69eb31",
    "transactionHash": "0x1a6776230d6d9e1af5d8ac8bd87841cb905cdcc13ba3bcf36b595120289a3923",
    "logs": [],
    "blockNumber": 3515487,
    "cumulativeGasUsed": "4938933",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x84DdF836249CbE3f21F9A55BCaa13A8366852B46"
  ],
  "numDeployments": 1,
  "solcInputHash": "639e216459d5c68e72bf73f33e875321",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAccrued\",\"type\":\"uint256\"}],\"name\":\"Accrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDistributionEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDistributionEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetIndex\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"ClaimerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardOracle\",\"type\":\"address\"}],\"name\":\"RewardOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferStrategy\",\"type\":\"address\"}],\"name\":\"TransferStrategyInstalled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimAllRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardsList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimAllRewardsOnBehalf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardsList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"claimAllRewardsToSelf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardsList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"claimRewardsOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"claimRewardsToSelf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint88\",\"name\":\"emissionPerSecond\",\"type\":\"uint88\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"distributionEnd\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"contract ITransferStrategyBase\",\"name\":\"transferStrategy\",\"type\":\"address\"},{\"internalType\":\"contract IEACAggregatorProxy\",\"name\":\"rewardOracle\",\"type\":\"address\"}],\"internalType\":\"struct RewardsDataTypes.RewardsConfigInput[]\",\"name\":\"config\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllUserRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardsList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unclaimedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getAssetIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getDistributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmissionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getRewardOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getRewardsByAsset\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getRewardsData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getTransferStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getUserAccruedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getUserAssetIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"}],\"name\":\"handleAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"setClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newDistributionEnd\",\"type\":\"uint32\"}],\"name\":\"setDistributionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"internalType\":\"uint88[]\",\"name\":\"newEmissionsPerSecond\",\"type\":\"uint88[]\"}],\"name\":\"setEmissionPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"contract IEACAggregatorProxy\",\"name\":\"rewardOracle\",\"type\":\"address\"}],\"name\":\"setRewardOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"contract ITransferStrategyBase\",\"name\":\"transferStrategy\",\"type\":\"address\"}],\"name\":\"setTransferStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"HopeLend*\",\"kind\":\"dev\",\"methods\":{\"claimAllRewards(address[],address)\":{\"details\":\"Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\",\"params\":{\"assets\":\"The list of assets to check eligible distributions before claiming rewards\",\"to\":\"The address that will be receiving the rewards\"},\"returns\":{\"claimedAmounts\":\"List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"*\",\"rewardsList\":\"List of addresses of the reward tokens\"}},\"claimAllRewardsOnBehalf(address[],address,address)\":{\"details\":\"Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\",\"params\":{\"assets\":\"The list of assets to check eligible distributions before claiming rewards\",\"to\":\"The address that will be receiving the rewards\",\"user\":\"The address to check and claim rewards\"},\"returns\":{\"claimedAmounts\":\"List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"*\",\"rewardsList\":\"List of addresses of the reward tokens\"}},\"claimAllRewardsToSelf(address[])\":{\"details\":\"Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\",\"params\":{\"assets\":\"The list of assets to check eligible distributions before claiming rewards\"},\"returns\":{\"claimedAmounts\":\"List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"*\",\"rewardsList\":\"List of addresses of the reward tokens\"}},\"claimRewards(address[],uint256,address,address)\":{\"details\":\"Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\",\"params\":{\"amount\":\"The amount of rewards to claim\",\"assets\":\"List of assets to check eligible distributions before claiming rewards\",\"reward\":\"The address of the reward token\",\"to\":\"The address that will be receiving the rewards\"},\"returns\":{\"_0\":\"The amount of rewards claimed*\"}},\"claimRewardsOnBehalf(address[],uint256,address,address,address)\":{\"details\":\"Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\",\"params\":{\"amount\":\"The amount of rewards to claim\",\"assets\":\"The list of assets to check eligible distributions before claiming rewards\",\"reward\":\"The address of the reward token\",\"to\":\"The address that will be receiving the rewards\",\"user\":\"The address to check and claim rewards\"},\"returns\":{\"_0\":\"The amount of rewards claimed*\"}},\"claimRewardsToSelf(address[],uint256,address)\":{\"details\":\"Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\",\"params\":{\"amount\":\"The amount of rewards to claim\",\"assets\":\"The list of assets to check eligible distributions before claiming rewards\",\"reward\":\"The address of the reward token\"},\"returns\":{\"_0\":\"The amount of rewards claimed*\"}},\"configureAssets((uint88,uint256,uint32,address,address,address,address)[])\":{\"details\":\"Configure assets to incentivize with an emission of rewards per second until the end of distribution.\",\"params\":{\"config\":\"The assets configuration input, the list of structs contains the following fields:   uint104 emissionPerSecond: The emission per second following rewards unit decimals.   uint256 totalSupply: The total supply of the asset to incentivize   uint40 distributionEnd: The end of the distribution of the incentives for an asset   address asset: The asset address to incentivize   address reward: The reward token address   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\"}},\"getAllUserRewards(address[],address)\":{\"details\":\"Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\",\"params\":{\"assets\":\"List of incentivized assets to check eligible distributions\",\"user\":\"The address of the user\"},\"returns\":{\"rewardsList\":\"The list of reward addresses\",\"unclaimedAmounts\":\"The list of unclaimed amount of rewards*\"}},\"getAssetDecimals(address)\":{\"details\":\"Returns the decimals of an asset to calculate the distribution delta\",\"params\":{\"asset\":\"The address to retrieve decimals\"},\"returns\":{\"_0\":\"The decimals of an underlying asset\"}},\"getAssetIndex(address,address)\":{\"details\":\"Calculates the next value of an specific distribution index, with validations.\",\"params\":{\"asset\":\"The incentivized asset\",\"reward\":\"The reward token of the incentivized asset\"},\"returns\":{\"_0\":\"The old index of the asset distribution\",\"_1\":\"The new index of the asset distribution*\"}},\"getClaimer(address)\":{\"details\":\"Returns the whitelisted claimer for a certain address (0x0 if not set)\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The claimer address\"}},\"getDistributionEnd(address,address)\":{\"details\":\"Gets the end date for the distribution\",\"params\":{\"asset\":\"The incentivized asset\",\"reward\":\"The reward token of the incentivized asset\"},\"returns\":{\"_0\":\"The timestamp with the end of the distribution, in unix time format*\"}},\"getEmissionManager()\":{\"details\":\"Returns the address of the emission manager. Deprecated: This getter is maintained for compatibility purposes. Use the `EMISSION_MANAGER()` function instead.\",\"returns\":{\"_0\":\"The address of the EmissionManager\"}},\"getRewardOracle(address)\":{\"details\":\"Get the price aggregator oracle address\",\"params\":{\"reward\":\"The address of the reward\"},\"returns\":{\"_0\":\"The price oracle of the reward\"}},\"getRewardsByAsset(address)\":{\"details\":\"Returns the list of available reward token addresses of an incentivized asset\",\"params\":{\"asset\":\"The incentivized asset\"},\"returns\":{\"_0\":\"List of rewards addresses of the input asset*\"}},\"getRewardsData(address,address)\":{\"details\":\"Returns the configuration of the distribution reward for a certain asset\",\"params\":{\"asset\":\"The incentivized asset\",\"reward\":\"The reward token of the incentivized asset\"},\"returns\":{\"_0\":\"The index of the asset distribution\",\"_1\":\"The emission per second of the reward distribution\",\"_2\":\"The timestamp of the last update of the index\",\"_3\":\"The timestamp of the distribution end*\"}},\"getRewardsList()\":{\"details\":\"Returns the list of available reward addresses\",\"returns\":{\"_0\":\"List of rewards supported in this contract*\"}},\"getTransferStrategy(address)\":{\"details\":\"Returns the Transfer Strategy implementation contract address being used for a reward address\",\"params\":{\"reward\":\"The address of the reward\"},\"returns\":{\"_0\":\"The address of the TransferStrategy contract\"}},\"getUserAccruedRewards(address,address)\":{\"details\":\"Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\",\"params\":{\"reward\":\"The address of the reward token\",\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"Unclaimed rewards, not including new distributions*\"}},\"getUserAssetIndex(address,address,address)\":{\"details\":\"Returns the index of a user on a reward distribution\",\"params\":{\"asset\":\"The incentivized asset\",\"reward\":\"The reward token of the incentivized asset\",\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"The current user asset index, not including new distributions*\"}},\"getUserRewards(address[],address,address)\":{\"details\":\"Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\",\"params\":{\"assets\":\"List of incentivized assets to check eligible distributions\",\"reward\":\"The address of the reward token\",\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The rewards amount*\"}},\"handleAction(address,uint256,uint256)\":{\"details\":\"Called by the corresponding asset on transfer hook in order to update the rewards distribution.The units of `totalSupply` and `userBalance` should be the same.\",\"params\":{\"totalSupply\":\"The total supply of the asset prior to user balance change\",\"user\":\"The address of the user whose asset balance has changed\",\"userBalance\":\"The previous user balance prior to balance change*\"}},\"initialize(address)\":{\"details\":\"Initialize for RewardsControllerIt expects an address as argument since its initialized via PoolAddressesProvider._updateImpl()*\"},\"setClaimer(address,address)\":{\"details\":\"Whitelists an address to claim the rewards on behalf of another address\",\"params\":{\"claimer\":\"The address of the claimer\",\"user\":\"The address of the user\"}},\"setDistributionEnd(address,address,uint32)\":{\"details\":\"Sets the end date for the distribution\",\"params\":{\"asset\":\"The asset to incentivize\",\"newDistributionEnd\":\"The end date of the incentivization, in unix time format*\",\"reward\":\"The reward token that incentives the asset\"}},\"setEmissionPerSecond(address,address[],uint88[])\":{\"details\":\"Sets the emission per second of a set of reward distributions\",\"params\":{\"asset\":\"The asset is being incentivized\",\"newEmissionsPerSecond\":\"List of new reward emissions per second\",\"rewards\":\"List of reward addresses are being distributed\"}},\"setRewardOracle(address,address)\":{\"details\":\"Sets an HopeLend Oracle contract to enforce rewards with a source of value.\",\"params\":{\"reward\":\"The address of the reward to set the price aggregator\",\"rewardOracle\":\"The address of price aggregator that follows IEACAggregatorProxy interface\"}},\"setTransferStrategy(address,address)\":{\"details\":\"Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\",\"params\":{\"reward\":\"The address of the reward token\",\"transferStrategy\":\"The address of the TransferStrategy logic contract\"}}},\"title\":\"RewardsController\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRewardOracle(address,address)\":{\"notice\":\"At the moment of reward configuration, the Incentives Controller performs a check to see if the reward asset oracle is compatible with IEACAggregator proxy. This check is enforced for integrators to be able to show incentives at the current HopeLend UI without the need to setup an external price registry\"}},\"notice\":\"Abstract contract template to build Distributors contracts for ERC20 rewards to protocol participants\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lend-periphery/contracts/rewards/RewardsController.sol\":\"RewardsController\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xaab45993655e2e30909010506e0a120338362676a4047bb936c300a06297cc0f\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0aca3719153dfa4191414080c7aa8d43f20a0dd206e89c3a38e3fb0e0c306de1\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n  /**\\n   * @dev Returns the downcasted uint224 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint224).\\n   *\\n   * Counterpart to Solidity's `uint224` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 224 bits\\n   */\\n  function toUint224(uint256 value) internal pure returns (uint224) {\\n    require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    return uint224(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint128 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint128).\\n   *\\n   * Counterpart to Solidity's `uint128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   */\\n  function toUint128(uint256 value) internal pure returns (uint128) {\\n    require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    return uint128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint96 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint96).\\n   *\\n   * Counterpart to Solidity's `uint96` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 96 bits\\n   */\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\n    require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    return uint96(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint64 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint64).\\n   *\\n   * Counterpart to Solidity's `uint64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   */\\n  function toUint64(uint256 value) internal pure returns (uint64) {\\n    require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    return uint64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint32 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint32).\\n   *\\n   * Counterpart to Solidity's `uint32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   */\\n  function toUint32(uint256 value) internal pure returns (uint32) {\\n    require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    return uint32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint16 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint16).\\n   *\\n   * Counterpart to Solidity's `uint16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   */\\n  function toUint16(uint256 value) internal pure returns (uint16) {\\n    require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    return uint16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint8 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint8).\\n   *\\n   * Counterpart to Solidity's `uint8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   */\\n  function toUint8(uint256 value) internal pure returns (uint8) {\\n    require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    return uint8(value);\\n  }\\n\\n  /**\\n   * @dev Converts a signed int256 into an unsigned uint256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be greater than or equal to 0.\\n   */\\n  function toUint256(int256 value) internal pure returns (uint256) {\\n    require(value >= 0, 'SafeCast: value must be positive');\\n    return uint256(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int128 from int256, reverting on\\n   * overflow (when the input is less than smallest int128 or\\n   * greater than largest int128).\\n   *\\n   * Counterpart to Solidity's `int128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt128(int256 value) internal pure returns (int128) {\\n    require(\\n      value >= type(int128).min && value <= type(int128).max,\\n      \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n    );\\n    return int128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int64 from int256, reverting on\\n   * overflow (when the input is less than smallest int64 or\\n   * greater than largest int64).\\n   *\\n   * Counterpart to Solidity's `int64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt64(int256 value) internal pure returns (int64) {\\n    require(\\n      value >= type(int64).min && value <= type(int64).max,\\n      \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n    );\\n    return int64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int32 from int256, reverting on\\n   * overflow (when the input is less than smallest int32 or\\n   * greater than largest int32).\\n   *\\n   * Counterpart to Solidity's `int32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt32(int256 value) internal pure returns (int32) {\\n    require(\\n      value >= type(int32).min && value <= type(int32).max,\\n      \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n    );\\n    return int32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int16 from int256, reverting on\\n   * overflow (when the input is less than smallest int16 or\\n   * greater than largest int16).\\n   *\\n   * Counterpart to Solidity's `int16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt16(int256 value) internal pure returns (int16) {\\n    require(\\n      value >= type(int16).min && value <= type(int16).max,\\n      \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n    );\\n    return int16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int8 from int256, reverting on\\n   * overflow (when the input is less than smallest int8 or\\n   * greater than largest int8).\\n   *\\n   * Counterpart to Solidity's `int8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt8(int256 value) internal pure returns (int8) {\\n    require(\\n      value >= type(int8).min && value <= type(int8).max,\\n      \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n    );\\n    return int8(value);\\n  }\\n\\n  /**\\n   * @dev Converts an unsigned uint256 into a signed int256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be less than or equal to maxInt256.\\n   */\\n  function toInt256(uint256 value) internal pure returns (int256) {\\n    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n    require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n    return int256(value);\\n  }\\n}\\n\",\"keccak256\":\"0x07e49e2bdfefb9f414444bd6be012b1e07b1f2a56d6a3fca5ab3f5733dd8abd0\",\"license\":\"MIT\"},\"lend-core/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author HopeLend\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted tokens\\n   * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Mint(\\n    address indexed caller,\\n    address indexed onBehalfOf,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted after the burn action\\n   * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n   * @param from The address from which the tokens will be burned\\n   * @param target The address that will receive the underlying, if any\\n   * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Burn(\\n    address indexed from,\\n    address indexed target,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @notice Returns the scaled balance of the user.\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n   * at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   */\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled total supply\\n   */\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   */\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns last index interest was accrued to the user's balance\\n   * @param user The address of the user\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\n   */\\n  function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x434eb17cb12dcfbb562a5be9a811f2c71672ed96e79c5ff1b7e0c9e53dcca19b\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/hopelend-upgradeability/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title VersionedInitializable\\n * @author HopeLend, inspired by the OpenZeppelin Initializable contract\\n * @notice Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * @dev WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 private lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(\\n      initializing || isConstructor() || revision > lastInitializedRevision,\\n      'Contract instance has already been initialized'\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      lastInitializedRevision = revision;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the revision number of the contract\\n   * @dev Needs to be defined in the inherited class as a constant.\\n   * @return The revision number\\n   */\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /**\\n   * @notice Returns true if and only if the function is running in the constructor\\n   * @return True if the function is running in the constructor\\n   */\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    uint256 cs;\\n    //solium-disable-next-line\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x6a00e8542181983fcea836469a52a1d9d867527f6c5f06ee5264861fb5065c0a\",\"license\":\"LGPL-3.0\"},\"lend-periphery/contracts/misc/interfaces/IEACAggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity ^0.8.10;\\n\\ninterface IEACAggregatorProxy {\\n  function decimals() external view returns (uint8);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\\n}\\n\",\"keccak256\":\"0x3c0d622a0c7d81b3cf4334e28505c8aad162bbe4c50ea948dfff6265d86c9aeb\",\"license\":\"LGPL-3.0\"},\"lend-periphery/contracts/rewards/RewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {VersionedInitializable} from 'lend-core/contracts/protocol/libraries/hopelend-upgradeability/VersionedInitializable.sol';\\nimport {SafeCast} from 'lend-core/contracts/dependencies/openzeppelin/contracts/SafeCast.sol';\\nimport {IScaledBalanceToken} from 'lend-core/contracts/interfaces/IScaledBalanceToken.sol';\\nimport {RewardsDistributor} from './RewardsDistributor.sol';\\nimport {IRewardsController} from './interfaces/IRewardsController.sol';\\nimport {ITransferStrategyBase} from './interfaces/ITransferStrategyBase.sol';\\nimport {RewardsDataTypes} from './libraries/RewardsDataTypes.sol';\\nimport {IEACAggregatorProxy} from '../misc/interfaces/IEACAggregatorProxy.sol';\\n\\n/**\\n * @title RewardsController\\n * @notice Abstract contract template to build Distributors contracts for ERC20 rewards to protocol participants\\n * @author HopeLend\\n **/\\ncontract RewardsController is RewardsDistributor, VersionedInitializable, IRewardsController {\\n  using SafeCast for uint256;\\n\\n  uint256 public constant REVISION = 2;\\n\\n  // This mapping allows whitelisted addresses to claim on behalf of others\\n  // useful for contracts that hold tokens to be rewarded but don't have any native logic to claim Liquidity Mining rewards\\n  mapping(address => address) internal _authorizedClaimers;\\n\\n  // reward => transfer strategy implementation contract\\n  // The TransferStrategy contract abstracts the logic regarding\\n  // the source of the reward and how to transfer it to the user.\\n  mapping(address => ITransferStrategyBase) internal _transferStrategy;\\n\\n  // This mapping contains the price oracle per reward.\\n  // A price oracle is enforced for integrators to be able to show incentives at\\n  // the current HopeLend UI without the need to setup an external price registry\\n  // At the moment of reward configuration, the Incentives Controller performs\\n  // a check to see if the provided reward oracle contains `latestAnswer`.\\n  mapping(address => IEACAggregatorProxy) internal _rewardOracle;\\n\\n  modifier onlyAuthorizedClaimers(address claimer, address user) {\\n    require(_authorizedClaimers[user] == claimer, 'CLAIMER_UNAUTHORIZED');\\n    _;\\n  }\\n\\n  constructor(address emissionManager) RewardsDistributor(emissionManager) {}\\n\\n  /**\\n   * @dev Initialize for RewardsController\\n   * @dev It expects an address as argument since its initialized via PoolAddressesProvider._updateImpl()\\n   **/\\n  function initialize(address) external initializer {}\\n\\n  /// @inheritdoc IRewardsController\\n  function getClaimer(address user) external view override returns (address) {\\n    return _authorizedClaimers[user];\\n  }\\n\\n  /**\\n   * @dev Returns the revision of the implementation contract\\n   * @return uint256, current revision version\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function getRewardOracle(address reward) external view override returns (address) {\\n    return address(_rewardOracle[reward]);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function getTransferStrategy(address reward) external view override returns (address) {\\n    return address(_transferStrategy[reward]);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config)\\n    external\\n    override\\n    onlyEmissionManager\\n  {\\n    for (uint256 i = 0; i < config.length; i++) {\\n      // Get the current Scaled Total Supply of HToken or Debt token\\n      config[i].totalSupply = IScaledBalanceToken(config[i].asset).scaledTotalSupply();\\n\\n      // Install TransferStrategy logic at IncentivesController\\n      _installTransferStrategy(config[i].reward, config[i].transferStrategy);\\n\\n      // Set reward oracle, enforces input oracle to have latestPrice function\\n      _setRewardOracle(config[i].reward, config[i].rewardOracle);\\n    }\\n    _configureAssets(config);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy)\\n    external\\n    onlyEmissionManager\\n  {\\n    _installTransferStrategy(reward, transferStrategy);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle)\\n    external\\n    onlyEmissionManager\\n  {\\n    _setRewardOracle(reward, rewardOracle);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function handleAction(\\n    address user,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external override {\\n    _updateData(msg.sender, user, userBalance, totalSupply);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to,\\n    address reward\\n  ) external override returns (uint256) {\\n    require(to != address(0), 'INVALID_TO_ADDRESS');\\n    return _claimRewards(assets, amount, msg.sender, msg.sender, to, reward);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to,\\n    address reward\\n  ) external override onlyAuthorizedClaimers(msg.sender, user) returns (uint256) {\\n    require(user != address(0), 'INVALID_USER_ADDRESS');\\n    require(to != address(0), 'INVALID_TO_ADDRESS');\\n    return _claimRewards(assets, amount, msg.sender, user, to, reward);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function claimRewardsToSelf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address reward\\n  ) external override returns (uint256) {\\n    return _claimRewards(assets, amount, msg.sender, msg.sender, msg.sender, reward);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function claimAllRewards(address[] calldata assets, address to)\\n    external\\n    override\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts)\\n  {\\n    require(to != address(0), 'INVALID_TO_ADDRESS');\\n    return _claimAllRewards(assets, msg.sender, msg.sender, to);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function claimAllRewardsOnBehalf(\\n    address[] calldata assets,\\n    address user,\\n    address to\\n  )\\n    external\\n    override\\n    onlyAuthorizedClaimers(msg.sender, user)\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts)\\n  {\\n    require(user != address(0), 'INVALID_USER_ADDRESS');\\n    require(to != address(0), 'INVALID_TO_ADDRESS');\\n    return _claimAllRewards(assets, msg.sender, user, to);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function claimAllRewardsToSelf(address[] calldata assets)\\n    external\\n    override\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts)\\n  {\\n    return _claimAllRewards(assets, msg.sender, msg.sender, msg.sender);\\n  }\\n\\n  /// @inheritdoc IRewardsController\\n  function setClaimer(address user, address caller) external override onlyEmissionManager {\\n    _authorizedClaimers[user] = caller;\\n    emit ClaimerSet(user, caller);\\n  }\\n\\n  /**\\n   * @dev Get user balances and total supply of all the assets specified by the assets parameter\\n   * @param assets List of assets to retrieve user balance and total supply\\n   * @param user Address of the user\\n   * @return userAssetBalances contains a list of structs with user balance and total supply of the given assets\\n   */\\n  function _getUserAssetBalances(address[] calldata assets, address user)\\n    internal\\n    view\\n    override\\n    returns (RewardsDataTypes.UserAssetBalance[] memory userAssetBalances)\\n  {\\n    userAssetBalances = new RewardsDataTypes.UserAssetBalance[](assets.length);\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      userAssetBalances[i].asset = assets[i];\\n      (userAssetBalances[i].userBalance, userAssetBalances[i].totalSupply) = IScaledBalanceToken(\\n        assets[i]\\n      ).getScaledUserBalanceAndSupply(user);\\n    }\\n    return userAssetBalances;\\n  }\\n\\n  /**\\n   * @dev Claims one type of reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards.\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param amount Amount of rewards to claim\\n   * @param claimer Address of the claimer who claims rewards on behalf of user\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @param reward Address of the reward token\\n   * @return Rewards claimed\\n   **/\\n  function _claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address claimer,\\n    address user,\\n    address to,\\n    address reward\\n  ) internal returns (uint256) {\\n    if (amount == 0) {\\n      return 0;\\n    }\\n    uint256 totalRewards;\\n\\n    _updateDataMultiple(user, _getUserAssetBalances(assets, user));\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      address asset = assets[i];\\n      totalRewards += _assets[asset].rewards[reward].usersData[user].accrued;\\n\\n      if (totalRewards <= amount) {\\n        _assets[asset].rewards[reward].usersData[user].accrued = 0;\\n      } else {\\n        uint256 difference = totalRewards - amount;\\n        totalRewards -= difference;\\n        _assets[asset].rewards[reward].usersData[user].accrued = difference.toUint128();\\n        break;\\n      }\\n    }\\n\\n    if (totalRewards == 0) {\\n      return 0;\\n    }\\n\\n    _transferRewards(to, reward, totalRewards);\\n    emit RewardsClaimed(user, reward, to, claimer, totalRewards);\\n\\n    return totalRewards;\\n  }\\n\\n  /**\\n   * @dev Claims one type of reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards.\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param claimer Address of the claimer on behalf of user\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return\\n   *   rewardsList List of reward addresses\\n   *   claimedAmount List of claimed amounts, follows \\\"rewardsList\\\" items order\\n   **/\\n  function _claimAllRewards(\\n    address[] calldata assets,\\n    address claimer,\\n    address user,\\n    address to\\n  ) internal returns (address[] memory rewardsList, uint256[] memory claimedAmounts) {\\n    uint256 rewardsListLength = _rewardsList.length;\\n    rewardsList = new address[](rewardsListLength);\\n    claimedAmounts = new uint256[](rewardsListLength);\\n\\n    _updateDataMultiple(user, _getUserAssetBalances(assets, user));\\n\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      address asset = assets[i];\\n      for (uint256 j = 0; j < rewardsListLength; j++) {\\n        if (rewardsList[j] == address(0)) {\\n          rewardsList[j] = _rewardsList[j];\\n        }\\n        uint256 rewardAmount = _assets[asset].rewards[rewardsList[j]].usersData[user].accrued;\\n        if (rewardAmount != 0) {\\n          claimedAmounts[j] += rewardAmount;\\n          _assets[asset].rewards[rewardsList[j]].usersData[user].accrued = 0;\\n        }\\n      }\\n    }\\n    for (uint256 i = 0; i < rewardsListLength; i++) {\\n      _transferRewards(to, rewardsList[i], claimedAmounts[i]);\\n      emit RewardsClaimed(user, rewardsList[i], to, claimer, claimedAmounts[i]);\\n    }\\n    return (rewardsList, claimedAmounts);\\n  }\\n\\n  /**\\n   * @dev Function to transfer rewards to the desired account using delegatecall and\\n   * @param to Account address to send the rewards\\n   * @param reward Address of the reward token\\n   * @param amount Amount of rewards to transfer\\n   */\\n  function _transferRewards(\\n    address to,\\n    address reward,\\n    uint256 amount\\n  ) internal {\\n    ITransferStrategyBase transferStrategy = _transferStrategy[reward];\\n\\n    bool success = transferStrategy.performTransfer(to, reward, amount);\\n\\n    require(success == true, 'TRANSFER_ERROR');\\n  }\\n\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   * @param account The address of the account\\n   * @return bool, true if contract, false otherwise\\n   */\\n  function _isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n\\n    uint256 size;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  /**\\n   * @dev Internal function to call the optional install hook at the TransferStrategy\\n   * @param reward The address of the reward token\\n   * @param transferStrategy The address of the reward TransferStrategy\\n   */\\n  function _installTransferStrategy(address reward, ITransferStrategyBase transferStrategy)\\n    internal\\n  {\\n    require(address(transferStrategy) != address(0), 'STRATEGY_CAN_NOT_BE_ZERO');\\n    require(_isContract(address(transferStrategy)) == true, 'STRATEGY_MUST_BE_CONTRACT');\\n\\n    _transferStrategy[reward] = transferStrategy;\\n\\n    emit TransferStrategyInstalled(reward, address(transferStrategy));\\n  }\\n\\n  /**\\n   * @dev Update the Price Oracle of a reward token. The Price Oracle must follow Chainlink IEACAggregatorProxy interface.\\n   * @notice The Price Oracle of a reward is used for displaying correct data about the incentives at the UI frontend.\\n   * @param reward The address of the reward token\\n   * @param rewardOracle The address of the price oracle\\n   */\\n\\n  function _setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) internal {\\n    require(rewardOracle.latestAnswer() > 0, 'ORACLE_MUST_RETURN_PRICE');\\n    _rewardOracle[reward] = rewardOracle;\\n    emit RewardOracleUpdated(reward, address(rewardOracle));\\n  }\\n}\\n\",\"keccak256\":\"0xab65b35cc5dae7634d9cc2847ac1ccbd623cdfebabfbe16427d5eb8f712540df\",\"license\":\"LGPL-3.0\"},\"lend-periphery/contracts/rewards/RewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IScaledBalanceToken} from 'lend-core/contracts/interfaces/IScaledBalanceToken.sol';\\nimport {IERC20Detailed} from 'lend-core/contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol';\\nimport {SafeCast} from 'lend-core/contracts/dependencies/openzeppelin/contracts/SafeCast.sol';\\nimport {IRewardsDistributor} from './interfaces/IRewardsDistributor.sol';\\nimport {RewardsDataTypes} from './libraries/RewardsDataTypes.sol';\\n\\n/**\\n * @title RewardsDistributor\\n * @notice Accounting contract to manage multiple staking distributions with multiple rewards\\n * @author HopeLend\\n **/\\nabstract contract RewardsDistributor is IRewardsDistributor {\\n  using SafeCast for uint256;\\n\\n  // Manager of incentives\\n  address public immutable EMISSION_MANAGER;\\n  // Deprecated: This storage slot is kept for backwards compatibility purposes.\\n  address internal _emissionManager;\\n\\n  // Map of rewarded asset addresses and their data (assetAddress => assetData)\\n  mapping(address => RewardsDataTypes.AssetData) internal _assets;\\n\\n  // Map of reward assets (rewardAddress => enabled)\\n  mapping(address => bool) internal _isRewardEnabled;\\n\\n  // Rewards list\\n  address[] internal _rewardsList;\\n\\n  // Assets list\\n  address[] internal _assetsList;\\n\\n  modifier onlyEmissionManager() {\\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\\n    _;\\n  }\\n\\n  constructor(address emissionManager) {\\n    EMISSION_MANAGER = emissionManager;\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function getRewardsData(address asset, address reward)\\n    public\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (\\n      _assets[asset].rewards[reward].index,\\n      _assets[asset].rewards[reward].emissionPerSecond,\\n      _assets[asset].rewards[reward].lastUpdateTimestamp,\\n      _assets[asset].rewards[reward].distributionEnd\\n    );\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function getAssetIndex(address asset, address reward)\\n    external\\n    view\\n    override\\n    returns (uint256, uint256)\\n  {\\n    RewardsDataTypes.RewardData storage rewardData = _assets[asset].rewards[reward];\\n    return\\n      _getAssetIndex(\\n        rewardData,\\n        IScaledBalanceToken(asset).scaledTotalSupply(),\\n        10**_assets[asset].decimals\\n      );\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function getDistributionEnd(address asset, address reward)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _assets[asset].rewards[reward].distributionEnd;\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function getRewardsByAsset(address asset) external view override returns (address[] memory) {\\n    uint128 rewardsCount = _assets[asset].availableRewardsCount;\\n    address[] memory availableRewards = new address[](rewardsCount);\\n\\n    for (uint128 i = 0; i < rewardsCount; i++) {\\n      availableRewards[i] = _assets[asset].availableRewards[i];\\n    }\\n    return availableRewards;\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function getRewardsList() external view override returns (address[] memory) {\\n    return _rewardsList;\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function getUserAssetIndex(\\n    address user,\\n    address asset,\\n    address reward\\n  ) public view override returns (uint256) {\\n    return _assets[asset].rewards[reward].usersData[user].index;\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function getUserAccruedRewards(address user, address reward)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    uint256 totalAccrued;\\n    for (uint256 i = 0; i < _assetsList.length; i++) {\\n      totalAccrued += _assets[_assetsList[i]].rewards[reward].usersData[user].accrued;\\n    }\\n\\n    return totalAccrued;\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function getUserRewards(\\n    address[] calldata assets,\\n    address user,\\n    address reward\\n  ) external view override returns (uint256) {\\n    return _getUserReward(user, reward, _getUserAssetBalances(assets, user));\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function getAllUserRewards(address[] calldata assets, address user)\\n    external\\n    view\\n    override\\n    returns (address[] memory rewardsList, uint256[] memory unclaimedAmounts)\\n  {\\n    RewardsDataTypes.UserAssetBalance[] memory userAssetBalances = _getUserAssetBalances(\\n      assets,\\n      user\\n    );\\n    rewardsList = new address[](_rewardsList.length);\\n    unclaimedAmounts = new uint256[](rewardsList.length);\\n\\n    // Add unrealized rewards from user to unclaimedRewards\\n    for (uint256 i = 0; i < userAssetBalances.length; i++) {\\n      for (uint256 r = 0; r < rewardsList.length; r++) {\\n        rewardsList[r] = _rewardsList[r];\\n        unclaimedAmounts[r] += _assets[userAssetBalances[i].asset]\\n          .rewards[rewardsList[r]]\\n          .usersData[user]\\n          .accrued;\\n\\n        if (userAssetBalances[i].userBalance == 0) {\\n          continue;\\n        }\\n        unclaimedAmounts[r] += _getPendingRewards(user, rewardsList[r], userAssetBalances[i]);\\n      }\\n    }\\n    return (rewardsList, unclaimedAmounts);\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function setDistributionEnd(\\n    address asset,\\n    address reward,\\n    uint32 newDistributionEnd\\n  ) external override onlyEmissionManager {\\n    uint256 oldDistributionEnd = _assets[asset].rewards[reward].distributionEnd;\\n    _assets[asset].rewards[reward].distributionEnd = newDistributionEnd;\\n\\n    emit AssetConfigUpdated(\\n      asset,\\n      reward,\\n      _assets[asset].rewards[reward].emissionPerSecond,\\n      _assets[asset].rewards[reward].emissionPerSecond,\\n      oldDistributionEnd,\\n      newDistributionEnd,\\n      _assets[asset].rewards[reward].index\\n    );\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function setEmissionPerSecond(\\n    address asset,\\n    address[] calldata rewards,\\n    uint88[] calldata newEmissionsPerSecond\\n  ) external override onlyEmissionManager {\\n    require(rewards.length == newEmissionsPerSecond.length, 'INVALID_INPUT');\\n    for (uint256 i = 0; i < rewards.length; i++) {\\n      RewardsDataTypes.AssetData storage assetConfig = _assets[asset];\\n      RewardsDataTypes.RewardData storage rewardConfig = _assets[asset].rewards[rewards[i]];\\n      uint256 decimals = assetConfig.decimals;\\n      require(\\n        decimals != 0 && rewardConfig.lastUpdateTimestamp != 0,\\n        'DISTRIBUTION_DOES_NOT_EXIST'\\n      );\\n\\n      (uint256 newIndex, ) = _updateRewardData(\\n        rewardConfig,\\n        IScaledBalanceToken(asset).scaledTotalSupply(),\\n        10**decimals\\n      );\\n\\n      uint256 oldEmissionPerSecond = rewardConfig.emissionPerSecond;\\n      rewardConfig.emissionPerSecond = newEmissionsPerSecond[i];\\n\\n      emit AssetConfigUpdated(\\n        asset,\\n        rewards[i],\\n        oldEmissionPerSecond,\\n        newEmissionsPerSecond[i],\\n        rewardConfig.distributionEnd,\\n        rewardConfig.distributionEnd,\\n        newIndex\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Configure the _assets for a specific emission\\n   * @param rewardsInput The array of each asset configuration\\n   **/\\n  function _configureAssets(RewardsDataTypes.RewardsConfigInput[] memory rewardsInput) internal {\\n    for (uint256 i = 0; i < rewardsInput.length; i++) {\\n      if (_assets[rewardsInput[i].asset].decimals == 0) {\\n        //never initialized before, adding to the list of assets\\n        _assetsList.push(rewardsInput[i].asset);\\n      }\\n\\n      uint256 decimals = _assets[rewardsInput[i].asset].decimals = IERC20Detailed(\\n        rewardsInput[i].asset\\n      ).decimals();\\n\\n      RewardsDataTypes.RewardData storage rewardConfig = _assets[rewardsInput[i].asset].rewards[\\n        rewardsInput[i].reward\\n      ];\\n\\n      // Add reward address to asset available rewards if latestUpdateTimestamp is zero\\n      if (rewardConfig.lastUpdateTimestamp == 0) {\\n        _assets[rewardsInput[i].asset].availableRewards[\\n          _assets[rewardsInput[i].asset].availableRewardsCount\\n        ] = rewardsInput[i].reward;\\n        _assets[rewardsInput[i].asset].availableRewardsCount++;\\n      }\\n\\n      // Add reward address to global rewards list if still not enabled\\n      if (_isRewardEnabled[rewardsInput[i].reward] == false) {\\n        _isRewardEnabled[rewardsInput[i].reward] = true;\\n        _rewardsList.push(rewardsInput[i].reward);\\n      }\\n\\n      // Due emissions is still zero, updates only latestUpdateTimestamp\\n      (uint256 newIndex, ) = _updateRewardData(\\n        rewardConfig,\\n        rewardsInput[i].totalSupply,\\n        10**decimals\\n      );\\n\\n      // Configure emission and distribution end of the reward per asset\\n      uint88 oldEmissionsPerSecond = rewardConfig.emissionPerSecond;\\n      uint32 oldDistributionEnd = rewardConfig.distributionEnd;\\n      rewardConfig.emissionPerSecond = rewardsInput[i].emissionPerSecond;\\n      rewardConfig.distributionEnd = rewardsInput[i].distributionEnd;\\n\\n      emit AssetConfigUpdated(\\n        rewardsInput[i].asset,\\n        rewardsInput[i].reward,\\n        oldEmissionsPerSecond,\\n        rewardsInput[i].emissionPerSecond,\\n        oldDistributionEnd,\\n        rewardsInput[i].distributionEnd,\\n        newIndex\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the state of the distribution for the specified reward\\n   * @param rewardData Storage pointer to the distribution reward config\\n   * @param totalSupply Current total of underlying assets for this distribution\\n   * @param assetUnit One unit of asset (10**decimals)\\n   * @return The new distribution index\\n   * @return True if the index was updated, false otherwise\\n   **/\\n  function _updateRewardData(\\n    RewardsDataTypes.RewardData storage rewardData,\\n    uint256 totalSupply,\\n    uint256 assetUnit\\n  ) internal returns (uint256, bool) {\\n    (uint256 oldIndex, uint256 newIndex) = _getAssetIndex(rewardData, totalSupply, assetUnit);\\n    bool indexUpdated;\\n    if (newIndex != oldIndex) {\\n      require(newIndex <= type(uint104).max, 'INDEX_OVERFLOW');\\n      indexUpdated = true;\\n\\n      //optimization: storing one after another saves one SSTORE\\n      rewardData.index = uint104(newIndex);\\n      rewardData.lastUpdateTimestamp = block.timestamp.toUint32();\\n    } else {\\n      rewardData.lastUpdateTimestamp = block.timestamp.toUint32();\\n    }\\n\\n    return (newIndex, indexUpdated);\\n  }\\n\\n  /**\\n   * @dev Updates the state of the distribution for the specific user\\n   * @param rewardData Storage pointer to the distribution reward config\\n   * @param user The address of the user\\n   * @param userBalance The user balance of the asset\\n   * @param newAssetIndex The new index of the asset distribution\\n   * @param assetUnit One unit of asset (10**decimals)\\n   * @return The rewards accrued since the last update\\n   **/\\n  function _updateUserData(\\n    RewardsDataTypes.RewardData storage rewardData,\\n    address user,\\n    uint256 userBalance,\\n    uint256 newAssetIndex,\\n    uint256 assetUnit\\n  ) internal returns (uint256, bool) {\\n    uint256 userIndex = rewardData.usersData[user].index;\\n    uint256 rewardsAccrued;\\n    bool dataUpdated;\\n    if ((dataUpdated = userIndex != newAssetIndex)) {\\n      // already checked for overflow in _updateRewardData\\n      rewardData.usersData[user].index = uint104(newAssetIndex);\\n      if (userBalance != 0) {\\n        rewardsAccrued = _getRewards(userBalance, newAssetIndex, userIndex, assetUnit);\\n\\n        rewardData.usersData[user].accrued += rewardsAccrued.toUint128();\\n      }\\n    }\\n    return (rewardsAccrued, dataUpdated);\\n  }\\n\\n  /**\\n   * @dev Iterates and accrues all the rewards for asset of the specific user\\n   * @param asset The address of the reference asset of the distribution\\n   * @param user The user address\\n   * @param userBalance The current user asset balance\\n   * @param totalSupply Total supply of the asset\\n   **/\\n  function _updateData(\\n    address asset,\\n    address user,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) internal {\\n    uint256 assetUnit;\\n    uint256 numAvailableRewards = _assets[asset].availableRewardsCount;\\n    unchecked {\\n      assetUnit = 10**_assets[asset].decimals;\\n    }\\n\\n    if (numAvailableRewards == 0) {\\n      return;\\n    }\\n    unchecked {\\n      for (uint128 r = 0; r < numAvailableRewards; r++) {\\n        address reward = _assets[asset].availableRewards[r];\\n        RewardsDataTypes.RewardData storage rewardData = _assets[asset].rewards[reward];\\n\\n        (uint256 newAssetIndex, bool rewardDataUpdated) = _updateRewardData(\\n          rewardData,\\n          totalSupply,\\n          assetUnit\\n        );\\n\\n        (uint256 rewardsAccrued, bool userDataUpdated) = _updateUserData(\\n          rewardData,\\n          user,\\n          userBalance,\\n          newAssetIndex,\\n          assetUnit\\n        );\\n\\n        if (rewardDataUpdated || userDataUpdated) {\\n          emit Accrued(asset, reward, user, newAssetIndex, newAssetIndex, rewardsAccrued);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Accrues all the rewards of the assets specified in the userAssetBalances list\\n   * @param user The address of the user\\n   * @param userAssetBalances List of structs with the user balance and total supply of a set of assets\\n   **/\\n  function _updateDataMultiple(\\n    address user,\\n    RewardsDataTypes.UserAssetBalance[] memory userAssetBalances\\n  ) internal {\\n    for (uint256 i = 0; i < userAssetBalances.length; i++) {\\n      _updateData(\\n        userAssetBalances[i].asset,\\n        user,\\n        userAssetBalances[i].userBalance,\\n        userAssetBalances[i].totalSupply\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the accrued unclaimed amount of a reward from a user over a list of distribution\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @param userAssetBalances List of structs with the user balance and total supply of a set of assets\\n   * @return unclaimedRewards The accrued rewards for the user until the moment\\n   **/\\n  function _getUserReward(\\n    address user,\\n    address reward,\\n    RewardsDataTypes.UserAssetBalance[] memory userAssetBalances\\n  ) internal view returns (uint256 unclaimedRewards) {\\n    // Add unrealized rewards\\n    for (uint256 i = 0; i < userAssetBalances.length; i++) {\\n      if (userAssetBalances[i].userBalance == 0) {\\n        unclaimedRewards += _assets[userAssetBalances[i].asset]\\n          .rewards[reward]\\n          .usersData[user]\\n          .accrued;\\n      } else {\\n        unclaimedRewards +=\\n          _getPendingRewards(user, reward, userAssetBalances[i]) +\\n          _assets[userAssetBalances[i].asset].rewards[reward].usersData[user].accrued;\\n      }\\n    }\\n\\n    return unclaimedRewards;\\n  }\\n\\n  /**\\n   * @dev Calculates the pending (not yet accrued) rewards since the last user action\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @param userAssetBalance struct with the user balance and total supply of the incentivized asset\\n   * @return The pending rewards for the user since the last user action\\n   **/\\n  function _getPendingRewards(\\n    address user,\\n    address reward,\\n    RewardsDataTypes.UserAssetBalance memory userAssetBalance\\n  ) internal view returns (uint256) {\\n    RewardsDataTypes.RewardData storage rewardData = _assets[userAssetBalance.asset].rewards[\\n      reward\\n    ];\\n    uint256 assetUnit = 10**_assets[userAssetBalance.asset].decimals;\\n    (, uint256 nextIndex) = _getAssetIndex(rewardData, userAssetBalance.totalSupply, assetUnit);\\n\\n    return\\n      _getRewards(\\n        userAssetBalance.userBalance,\\n        nextIndex,\\n        rewardData.usersData[user].index,\\n        assetUnit\\n      );\\n  }\\n\\n  /**\\n   * @dev Internal function for the calculation of user's rewards on a distribution\\n   * @param userBalance Balance of the user asset on a distribution\\n   * @param reserveIndex Current index of the distribution\\n   * @param userIndex Index stored for the user, representation his staking moment\\n   * @param assetUnit One unit of asset (10**decimals)\\n   * @return The rewards\\n   **/\\n  function _getRewards(\\n    uint256 userBalance,\\n    uint256 reserveIndex,\\n    uint256 userIndex,\\n    uint256 assetUnit\\n  ) internal pure returns (uint256) {\\n    uint256 result = userBalance * (reserveIndex - userIndex);\\n    assembly {\\n      result := div(result, assetUnit)\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations\\n   * @param rewardData Storage pointer to the distribution reward config\\n   * @param totalSupply of the asset being rewarded\\n   * @param assetUnit One unit of asset (10**decimals)\\n   * @return The new index.\\n   **/\\n  function _getAssetIndex(\\n    RewardsDataTypes.RewardData storage rewardData,\\n    uint256 totalSupply,\\n    uint256 assetUnit\\n  ) internal view returns (uint256, uint256) {\\n    uint256 oldIndex = rewardData.index;\\n    uint256 distributionEnd = rewardData.distributionEnd;\\n    uint256 emissionPerSecond = rewardData.emissionPerSecond;\\n    uint256 lastUpdateTimestamp = rewardData.lastUpdateTimestamp;\\n\\n    if (\\n      emissionPerSecond == 0 ||\\n      totalSupply == 0 ||\\n      lastUpdateTimestamp == block.timestamp ||\\n      lastUpdateTimestamp >= distributionEnd\\n    ) {\\n      return (oldIndex, oldIndex);\\n    }\\n\\n    uint256 currentTimestamp = block.timestamp > distributionEnd\\n      ? distributionEnd\\n      : block.timestamp;\\n    uint256 timeDelta = currentTimestamp - lastUpdateTimestamp;\\n    uint256 firstTerm = emissionPerSecond * timeDelta * assetUnit;\\n    assembly {\\n      firstTerm := div(firstTerm, totalSupply)\\n    }\\n    return (oldIndex, (firstTerm + oldIndex));\\n  }\\n\\n  /**\\n   * @dev Get user balances and total supply of all the assets specified by the assets parameter\\n   * @param assets List of assets to retrieve user balance and total supply\\n   * @param user Address of the user\\n   * @return userAssetBalances contains a list of structs with user balance and total supply of the given assets\\n   */\\n  function _getUserAssetBalances(address[] calldata assets, address user)\\n    internal\\n    view\\n    virtual\\n    returns (RewardsDataTypes.UserAssetBalance[] memory userAssetBalances);\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function getAssetDecimals(address asset) external view returns (uint8) {\\n    return _assets[asset].decimals;\\n  }\\n\\n  /// @inheritdoc IRewardsDistributor\\n  function getEmissionManager() external view returns (address) {\\n    return EMISSION_MANAGER;\\n  }\\n}\\n\",\"keccak256\":\"0x0cae384552284cb458a8531f60b574ffb40d8142dc52b971b6296bac6b345721\",\"license\":\"LGPL-3.0\"},\"lend-periphery/contracts/rewards/interfaces/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IRewardsDistributor} from './IRewardsDistributor.sol';\\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\nimport {RewardsDataTypes} from '../libraries/RewardsDataTypes.sol';\\n\\n/**\\n * @title IRewardsController\\n * @author HopeLend\\n * @notice Defines the basic interface for a Rewards Controller.\\n */\\ninterface IRewardsController is IRewardsDistributor {\\n  /**\\n   * @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @dev Emitted when rewards are claimed\\n   * @param user The address of the user rewards has been claimed on behalf of\\n   * @param reward The address of the token reward is claimed\\n   * @param to The address of the receiver of the rewards\\n   * @param claimer The address of the claimer\\n   * @param amount The amount of rewards claimed\\n   */\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed reward,\\n    address indexed to,\\n    address claimer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted when a transfer strategy is installed for the reward distribution\\n   * @param reward The address of the token reward\\n   * @param transferStrategy The address of TransferStrategy contract\\n   */\\n  event TransferStrategyInstalled(address indexed reward, address indexed transferStrategy);\\n\\n  /**\\n   * @dev Emitted when the reward oracle is updated\\n   * @param reward The address of the token reward\\n   * @param rewardOracle The address of oracle\\n   */\\n  event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\n   * @param reward The address of the reward token\\n   * @param transferStrategy The address of the TransferStrategy logic contract\\n   */\\n  function setTransferStrategy(address reward, ITransferStrategyBase transferStrategy) external;\\n\\n  /**\\n   * @dev Sets an HopeLend Oracle contract to enforce rewards with a source of value.\\n   * @notice At the moment of reward configuration, the Incentives Controller performs\\n   * a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n   * This check is enforced for integrators to be able to show incentives at\\n   * the current HopeLend UI without the need to setup an external price registry\\n   * @param reward The address of the reward to set the price aggregator\\n   * @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n   */\\n  function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n  /**\\n   * @dev Get the price aggregator oracle address\\n   * @param reward The address of the reward\\n   * @return The price oracle of the reward\\n   */\\n  function getRewardOracle(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\\n   * @param reward The address of the reward\\n   * @return The address of the TransferStrategy contract\\n   */\\n  function getTransferStrategy(address reward) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n   * @param config The assets configuration input, the list of structs contains the following fields:\\n   *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n   *   uint256 totalSupply: The total supply of the asset to incentivize\\n   *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n   *   address asset: The asset address to incentivize\\n   *   address reward: The reward token address\\n   *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\n   *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n   *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n   */\\n  function configureAssets(RewardsDataTypes.RewardsConfigInput[] memory config) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\\n   * @param user The address of the user whose asset balance has changed\\n   * @param totalSupply The total supply of the asset prior to user balance change\\n   * @param userBalance The previous user balance prior to balance change\\n   **/\\n  function handleAction(\\n    address user,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external;\\n\\n  /**\\n   * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets List of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\\n   * caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param amount The amount of rewards to claim\\n   * @param reward The address of the reward token\\n   * @return The amount of rewards claimed\\n   **/\\n  function claimRewardsToSelf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address reward\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n   **/\\n  function claimAllRewards(address[] calldata assets, address to)\\n    external\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @param user The address to check and claim rewards\\n   * @param to The address that will be receiving the rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsOnBehalf(\\n    address[] calldata assets,\\n    address user,\\n    address to\\n  ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n  /**\\n   * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n   * @param assets The list of assets to check eligible distributions before claiming rewards\\n   * @return rewardsList List of addresses of the reward tokens\\n   * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n   **/\\n  function claimAllRewardsToSelf(address[] calldata assets)\\n    external\\n    returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n}\\n\",\"keccak256\":\"0x1ceef47370916ed32dc0b3f077086133edf1f440979bb41144b7f28682cabf46\",\"license\":\"LGPL-3.0\"},\"lend-periphery/contracts/rewards/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author HopeLend\\n * @notice Defines the basic interface for a Rewards Distributor.\\n */\\ninterface IRewardsDistributor {\\n  /**\\n   * @dev Emitted when the configuration of the rewards of an asset is updated.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param oldEmission The old emissions per second value of the reward distribution\\n   * @param newEmission The new emissions per second value of the reward distribution\\n   * @param oldDistributionEnd The old end timestamp of the reward distribution\\n   * @param newDistributionEnd The new end timestamp of the reward distribution\\n   * @param assetIndex The index of the asset distribution\\n   */\\n  event AssetConfigUpdated(\\n    address indexed asset,\\n    address indexed reward,\\n    uint256 oldEmission,\\n    uint256 newEmission,\\n    uint256 oldDistributionEnd,\\n    uint256 newDistributionEnd,\\n    uint256 assetIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n   * @param asset The address of the incentivized asset\\n   * @param reward The address of the reward token\\n   * @param user The address of the user that rewards are accrued on behalf of\\n   * @param assetIndex The index of the asset distribution\\n   * @param userIndex The index of the asset distribution on behalf of the user\\n   * @param rewardsAccrued The amount of rewards accrued\\n   */\\n  event Accrued(\\n    address indexed asset,\\n    address indexed reward,\\n    address indexed user,\\n    uint256 assetIndex,\\n    uint256 userIndex,\\n    uint256 rewardsAccrued\\n  );\\n\\n  /**\\n   * @dev Sets the end date for the distribution\\n   * @param asset The asset to incentivize\\n   * @param reward The reward token that incentives the asset\\n   * @param newDistributionEnd The end date of the incentivization, in unix time format\\n   **/\\n  function setDistributionEnd(\\n    address asset,\\n    address reward,\\n    uint32 newDistributionEnd\\n  ) external;\\n\\n  /**\\n   * @dev Sets the emission per second of a set of reward distributions\\n   * @param asset The asset is being incentivized\\n   * @param rewards List of reward addresses are being distributed\\n   * @param newEmissionsPerSecond List of new reward emissions per second\\n   */\\n  function setEmissionPerSecond(\\n    address asset,\\n    address[] calldata rewards,\\n    uint88[] calldata newEmissionsPerSecond\\n  ) external;\\n\\n  /**\\n   * @dev Gets the end date for the distribution\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The timestamp with the end of the distribution, in unix time format\\n   **/\\n  function getDistributionEnd(address asset, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the index of a user on a reward distribution\\n   * @param user Address of the user\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The current user asset index, not including new distributions\\n   **/\\n  function getUserAssetIndex(\\n    address user,\\n    address asset,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the configuration of the distribution reward for a certain asset\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The index of the asset distribution\\n   * @return The emission per second of the reward distribution\\n   * @return The timestamp of the last update of the index\\n   * @return The timestamp of the distribution end\\n   **/\\n  function getRewardsData(address asset, address reward)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Calculates the next value of an specific distribution index, with validations.\\n   * @param asset The incentivized asset\\n   * @param reward The reward token of the incentivized asset\\n   * @return The old index of the asset distribution\\n   * @return The new index of the asset distribution\\n   **/\\n  function getAssetIndex(address asset, address reward) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the list of available reward token addresses of an incentivized asset\\n   * @param asset The incentivized asset\\n   * @return List of rewards addresses of the input asset\\n   **/\\n  function getRewardsByAsset(address asset) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the list of available reward addresses\\n   * @return List of rewards supported in this contract\\n   **/\\n  function getRewardsList() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return Unclaimed rewards, not including new distributions\\n   **/\\n  function getUserAccruedRewards(address user, address reward) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @param reward The address of the reward token\\n   * @return The rewards amount\\n   **/\\n  function getUserRewards(\\n    address[] calldata assets,\\n    address user,\\n    address reward\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n   * @param assets List of incentivized assets to check eligible distributions\\n   * @param user The address of the user\\n   * @return The list of reward addresses\\n   * @return The list of unclaimed amount of rewards\\n   **/\\n  function getAllUserRewards(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (address[] memory, uint256[] memory);\\n\\n  /**\\n   * @dev Returns the decimals of an asset to calculate the distribution delta\\n   * @param asset The address to retrieve decimals\\n   * @return The decimals of an underlying asset\\n   */\\n  function getAssetDecimals(address asset) external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the address of the emission manager\\n   * @return The address of the EmissionManager\\n   */\\n  function EMISSION_MANAGER() external view returns (address);\\n\\n  /**\\n   * @dev Returns the address of the emission manager.\\n   * Deprecated: This getter is maintained for compatibility purposes. Use the `EMISSION_MANAGER()` function instead.\\n   * @return The address of the EmissionManager\\n   */\\n  function getEmissionManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6d853c94a5dc9e2d4e125a480dde361d3bdd8cf11c8a789d44fbe0fbd328ab10\",\"license\":\"LGPL-3.0\"},\"lend-periphery/contracts/rewards/interfaces/ITransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity ^0.8.10;\\n\\ninterface ITransferStrategyBase {\\n  event EmergencyWithdrawal(\\n    address indexed caller,\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\n   * @param to Account to transfer rewards\\n   * @param reward Address of the reward token\\n   * @param amount Amount to transfer to the \\\"to\\\" address parameter\\n   * @return Returns true bool if transfer logic succeeds\\n   */\\n  function performTransfer(\\n    address to,\\n    address reward,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @return Returns the address of the Incentives Controller\\n   */\\n  function getIncentivesController() external view returns (address);\\n\\n  /**\\n   * @return Returns the address of the Rewards admin\\n   */\\n  function getRewardsAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\n   * @param token Address of the token to withdraw funds from this contract\\n   * @param to Address of the recipient of the withdrawal\\n   * @param amount Amount of the withdrawal\\n   */\\n  function emergencyWithdrawal(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x407d12250d7c5376ef067c7fc9e28ed1cb0af3597ae7979f4e6027e009520f76\",\"license\":\"LGPL-3.0\"},\"lend-periphery/contracts/rewards/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {ITransferStrategyBase} from '../interfaces/ITransferStrategyBase.sol';\\nimport {IEACAggregatorProxy} from '../../misc/interfaces/IEACAggregatorProxy.sol';\\n\\nlibrary RewardsDataTypes {\\n  struct RewardsConfigInput {\\n    uint88 emissionPerSecond;\\n    uint256 totalSupply;\\n    uint32 distributionEnd;\\n    address asset;\\n    address reward;\\n    ITransferStrategyBase transferStrategy;\\n    IEACAggregatorProxy rewardOracle;\\n  }\\n\\n  struct UserAssetBalance {\\n    address asset;\\n    uint256 userBalance;\\n    uint256 totalSupply;\\n  }\\n\\n  struct UserData {\\n    // Liquidity index of the reward distribution for the user\\n    uint104 index;\\n    // Amount of accrued rewards for the user since last user index update\\n    uint128 accrued;\\n  }\\n\\n  struct RewardData {\\n    // Liquidity index of the reward distribution\\n    uint104 index;\\n    // Amount of reward tokens distributed per second\\n    uint88 emissionPerSecond;\\n    // Timestamp of the last reward index update\\n    uint32 lastUpdateTimestamp;\\n    // The end of the distribution of rewards (in seconds)\\n    uint32 distributionEnd;\\n    // Map of user addresses and their rewards data (userAddress => userData)\\n    mapping(address => UserData) usersData;\\n  }\\n\\n  struct AssetData {\\n    // Map of reward token addresses and their data (rewardTokenAddress => rewardData)\\n    mapping(address => RewardData) rewards;\\n    // List of reward token addresses for the asset\\n    mapping(uint128 => address) availableRewards;\\n    // Count of reward tokens for the asset\\n    uint128 availableRewardsCount;\\n    // Number of decimals of the asset\\n    uint8 decimals;\\n  }\\n}\\n\",\"keccak256\":\"0x6f230f0da87dd82ccb263dc6759905c0cff7b8c6a5b5c8a973168a0f605fa3fb\",\"license\":\"LGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405260006005553480156200001657600080fd5b506040516200498d3803806200498d83398101604081905262000039916200004b565b6001600160a01b03166080526200007d565b6000602082840312156200005e57600080fd5b81516001600160a01b03811681146200007657600080fd5b9392505050565b6080516148c3620000ca600039600081816104f40152818161060c01528181610c9201528181610fd1015281816116780152818161182e015281816118d701526119f201526148c36000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806392074b0811610104578063bf90f63a116100a2578063dde43cba11610071578063dde43cba1461062e578063e15ac62314610636578063f5cf673b14610649578063f996868b1461065c57600080fd5b8063bf90f63a146105ce578063c4d66de8146105e1578063c5a7b538146105f4578063cbcbb5071461060757600080fd5b80639ff55db9116100de5780639ff55db91461058d578063b022418c146105a0578063b45ac1a9146105b3578063bb492bf5146105bb57600080fd5b806392074b08146104f2578063955c2ad7146105185780639efd6f721461052b57600080fd5b80635453ba101161017c57806370674ab91161014b57806370674ab9146103a257806374d945ec146103b55780637eff4ba8146103ee578063886fe70b146104ca57600080fd5b80635453ba101461032357806357b89883146103365780635f130b24146103495780636657732f1461038257600080fd5b806331873e2e116101b857806331873e2e1461027657806333028b991461028b5780634c0369c31461029e578063533f542a146102bf57600080fd5b80631b839c77146101df578063236300dc146102055780632a17bf6014610218575b600080fd5b6101f26101ed366004613e90565b61066f565b6040519081526020015b60405180910390f35b6101f2610213366004613f0e565b6106cf565b610251610226366004613f82565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152603b60205260409020541690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101fc565b610289610284366004613fa6565b61076c565b005b6101f2610299366004613fdb565b61077d565b6102b16102ac366004614060565b610929565b6040516101fc929190614108565b6101f26102cd36600461415f565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260016020818152604080842086861685528252808420948816845293909101905220546cffffffffffffffffffffffffff169392505050565b610289610331366004613e90565b610c7a565b6101f261034436600461419f565b610d27565b610251610357366004613f82565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152603a60205260409020541690565b610395610390366004613f82565b610d41565b6040516101fc91906141fe565b6101f26103b0366004614211565b610e93565b6102516103c3366004613f82565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152603960205260409020541690565b6104aa6103fc366004613e90565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526001602090815260408083209390941682529190915220546cffffffffffffffffffffffffff8116916affffffffffffffffffffff6d01000000000000000000000000008304169163ffffffff780100000000000000000000000000000000000000000000000082048116927c01000000000000000000000000000000000000000000000000000000009092041690565b6040805194855260208501939093529183015260608201526080016101fc565b6104dd6104d8366004613e90565b610eaa565b604080519283526020830191909152016101fc565b7f0000000000000000000000000000000000000000000000000000000000000000610251565b610289610526366004614349565b610fb9565b61057b610539366004613f82565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020526040902060020154700100000000000000000000000000000000900460ff1690565b60405160ff90911681526020016101fc565b6102b161059b366004614211565b6111b9565b6101f26105ae366004613e90565b611368565b610395611421565b6102b16105c9366004614060565b611490565b6102b16105dc366004614477565b611529565b6102896105ef366004613f82565b611544565b6102896106023660046144b9565b611660565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b6101f2600281565b610289610644366004613e90565b611816565b610289610657366004613e90565b6118bf565b61028961066a366004614500565b6119da565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600160209081526040808320938516835292905220547c0100000000000000000000000000000000000000000000000000000000900463ffffffff165b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8316610753576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f494e56414c49445f544f5f41444452455353000000000000000000000000000060448201526064015b60405180910390fd5b61076286868633338888611e4e565b9695505050505050565b610778338483856120e5565b505050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260396020526040812054909133918691168214610813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f434c41494d45525f554e415554484f52495a4544000000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff8616610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f555345525f41444452455353000000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff851661090d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f494e56414c49445f544f5f414444524553530000000000000000000000000000604482015260640161074a565b61091c898989338a8a8a611e4e565b9998505050505050505050565b606080600061093986868661229d565b60035490915067ffffffffffffffff8111156109575761095761426e565b604051908082528060200260200182016040528015610980578160200160208202803683370190505b509250825167ffffffffffffffff81111561099d5761099d61426e565b6040519080825280602002602001820160405280156109c6578160200160208202803683370190505b50915060005b8151811015610c6f5760005b8451811015610c5c57600381815481106109f4576109f4614583565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858281518110610a3157610a31614583565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060016000848481518110610a8157610a81614583565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000868381518110610ade57610ade614583565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600d9054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16848281518110610ba457610ba4614583565b60200260200101818151610bb891906145e1565b9052508251839083908110610bcf57610bcf614583565b60200260200101516020015160000315610c4a57610c2086868381518110610bf957610bf9614583565b6020026020010151858581518110610c1357610c13614583565b602002602001015161249b565b848281518110610c3257610c32614583565b60200260200101818151610c4691906145e1565b9052505b80610c54816145f4565b9150506109d8565b5080610c67816145f4565b9150506109cc565b50505b935093915050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b610d238282612569565b5050565b6000610d3885858533333388611e4e565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260408120600201546060916fffffffffffffffffffffffffffffffff909116908167ffffffffffffffff811115610d9b57610d9b61426e565b604051908082528060200260200182016040528015610dc4578160200160208202803683370190505b50905060005b826fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161015610e8b5773ffffffffffffffffffffffffffffffffffffffff80861660009081526001602081815260408084206fffffffffffffffffffffffffffffffff871680865293019091529091205484519216918491908110610e5457610e54614583565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610e838161462c565b915050610dca565b509392505050565b6000610d388383610ea588888861229d565b6126bd565b73ffffffffffffffffffffffffffffffffffffffff8083166000818152600160209081526040808320948616835293815283822084517fb1bf962d0000000000000000000000000000000000000000000000000000000081529451929485949193610fac9385939263b1bf962d92600480830193928290030181865afa158015610f38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5c919061465b565b73ffffffffffffffffffffffffffffffffffffffff8816600090815260016020526040902060020154610fa790700100000000000000000000000000000000900460ff16600a614794565b61285b565b92509250505b9250929050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b60005b81518110156111ac5781818151811061107657611076614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f0919061465b565b82828151811061110257611102614583565b6020026020010151602001818152505061115682828151811061112757611127614583565b60200260200101516080015183838151811061114557611145614583565b602002602001015160a00151612967565b61119a82828151811061116b5761116b614583565b60200260200101516080015183838151811061118957611189614583565b602002602001015160c00151612569565b806111a4816145f4565b91505061105b565b506111b681612acd565b50565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260396020526040902054606091829133918691168214611252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f434c41494d45525f554e415554484f52495a4544000000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff86166112cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f555345525f41444452455353000000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff851661134c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f494e56414c49445f544f5f414444524553530000000000000000000000000000604482015260640161074a565b611359888833898961338d565b93509350505094509492505050565b60008060005b600454811015610e8b57600160006004838154811061138f5761138f614583565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff90811684528382019490945260409283018220888516835281528282209389168252600190930190925290205461140d906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff16836145e1565b915080611419816145f4565b91505061136e565b6060600380548060200260200160405190810160405280929190818152602001828054801561148657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161145b575b5050505050905090565b60608073ffffffffffffffffffffffffffffffffffffffff8316611510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f494e56414c49445f544f5f414444524553530000000000000000000000000000604482015260640161074a565b61151d858533338761338d565b91509150935093915050565b606080611539848433333361338d565b915091509250929050565b60065460029060ff16806115575750303b155b80611563575060055481115b6115ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a6564000000000000000000000000000000000000606482015260840161074a565b60065460ff1615801561162d57600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560058290555b801561077857600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146116ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902080547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81167c010000000000000000000000000000000000000000000000000000000063ffffffff8981168281029384179586905587516d01000000000000000000000000009096046affffffffffffffffffffff16808752968601969096529083041694830185905260608301939093526cffffffffffffffffffffffffff9081169216919091176080820152909291907fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc59060a00160405180910390a350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146118b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b610d238282612967565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461195e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff82811660008181526039602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f4925eafc82d0c4d67889898eeed64b18488ab19811e61620f387026dec126a289190a35050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611a79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b828114611ae2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f494e50555400000000000000000000000000000000000000604482015260640161074a565b60005b83811015611e465773ffffffffffffffffffffffffffffffffffffffff86166000908152600160205260408120908181888886818110611b2757611b27614583565b9050602002016020810190611b3c9190613f82565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000206002830154909150700100000000000000000000000000000000900460ff168015801590611bb2575081547801000000000000000000000000000000000000000000000000900463ffffffff1615155b611c18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f444953545249425554494f4e5f444f45535f4e4f545f45584953540000000000604482015260640161074a565b6000611c9d838b73ffffffffffffffffffffffffffffffffffffffff1663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8d919061465b565b611c9885600a6147a3565b613874565b5083549091506d010000000000000000000000000090046affffffffffffffffffffff16878787818110611cd357611cd3614583565b9050602002016020810190611ce891906147af565b84546affffffffffffffffffffff919091166d0100000000000000000000000000027fffffffffffffffff0000000000000000000000ffffffffffffffffffffffffff909116178455898987818110611d4357611d43614583565b9050602002016020810190611d589190613f82565b73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc5838b8b8b818110611db957611db9614583565b9050602002016020810190611dce91906147af565b8854604080519384526affffffffffffffffffffff90921660208401527c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690820181905260608201526080810186905260a00160405180910390a350505050508080611e3e906145f4565b915050611ae5565b505050505050565b600085600003611e60575060006120da565b6000611e7685611e718b8b8961229d565b613a02565b60005b8881101561205d5760008a8a83818110611e9557611e95614583565b9050602002016020810190611eaa9190613f82565b73ffffffffffffffffffffffffffffffffffffffff81811660009081526001602081815260408084208b861685528252808420948d1684529390910190522054909150611f1a906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff16846145e1565b9250888311611f8d5773ffffffffffffffffffffffffffffffffffffffff80821660009081526001602081815260408084208a861685528252808420948c1684529390910190522080547fffffff00000000000000000000000000000000ffffffffffffffffffffffffff16905561204a565b6000611f998a856147ca565b9050611fa581856147ca565b9350611fb081613a83565b73ffffffffffffffffffffffffffffffffffffffff92831660009081526001602081815260408084208b881685528252808420968d1684529590910190529290922080546fffffffffffffffffffffffffffffffff939093166d0100000000000000000000000000027fffffff00000000000000000000000000000000ffffffffffffffffffffffffff909316929092179091555061205d565b5080612055816145f4565b915050611e79565b50806000036120705760009150506120da565b61207b848483613b29565b6040805173ffffffffffffffffffffffffffffffffffffffff8881168252602082018490528087169286821692918916917fc052130bc4ef84580db505783484b067ea8b71b3bca78a7e12db7aea8658f004910160405180910390a490505b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081206002015460ff700100000000000000000000000000000000820416600a0a916fffffffffffffffffffffffffffffffff9091169081900361214c575050612297565b60005b81816fffffffffffffffffffffffffffffffff1610156122935773ffffffffffffffffffffffffffffffffffffffff80881660009081526001602081815260408084206fffffffffffffffffffffffffffffffff8716855292830182528084205490941680845291905291812090806121c9838989613874565b915091506000806121dd858d8d878d613c55565b9150915082806121ea5750805b15612281578b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff167f3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8878887604051612278939291909283526020830191909152604082015260600190565b60405180910390a45b50506001909401935061214f92505050565b5050505b50505050565b60608267ffffffffffffffff8111156122b8576122b861426e565b60405190808252806020026020018201604052801561232357816020015b6123106040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b8152602001906001900390816122d65790505b50905060005b83811015610e8b5784848281811061234357612343614583565b90506020020160208101906123589190613f82565b82828151811061236a5761236a614583565b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff90911690528484828181106123a1576123a1614583565b90506020020160208101906123b69190613f82565b6040517f0afbcdc900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529190911690630afbcdc9906024016040805180830381865afa158015612423573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244791906147dd565b83838151811061245957612459614583565b602002602001015160200184848151811061247657612476614583565b6020908102919091010151604001919091525280612493816145f4565b915050612329565b805173ffffffffffffffffffffffffffffffffffffffff90811660009081526001602081815260408084208786168552825280842086519095168452919052812060020154909190829061250790700100000000000000000000000000000000900460ff16600a614794565b9050600061251a8386604001518461285b565b60208088015173ffffffffffffffffffffffffffffffffffffffff8b166000908152600188019092526040909120549193506120da92509083906cffffffffffffffffffffffffff1685613db4565b60008173ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125da919061465b565b13612641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f5241434c455f4d5553545f52455455524e5f50524943450000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff8281166000818152603b602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f1a1cd5483e52e60b9ff7f3b9d1db3bbd9e9d21c6324ad3a8c79dba9b75e62f4d9190a35050565b6000805b8251811015610e8b578281815181106126dc576126dc614583565b60200260200101516020015160000361278a576001600084838151811061270557612705614583565b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff9081168352828201939093526040918201600090812088851682528252828120938916815260019093019052902054612783906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff16836145e1565b9150612849565b600160008483815181106127a0576127a0614583565b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff908116835282820193909352604091820160009081208885168252825282812093891681526001909301905290205483516d01000000000000000000000000009091046fffffffffffffffffffffffffffffffff16906128329087908790879086908110610c1357610c13614583565b61283c91906145e1565b61284690836145e1565b91505b80612853816145f4565b9150506126c1565b825460009081906cffffffffffffffffffffffffff81169063ffffffff7c010000000000000000000000000000000000000000000000000000000082048116916affffffffffffffffffffff6d0100000000000000000000000000820416917801000000000000000000000000000000000000000000000000909104168115806128e3575087155b806128ed57504281145b806128f85750828110155b1561290c5783849550955050505050610c72565b600083421161291b574261291d565b835b9050600061292b83836147ca565b905060008961293a8387614801565b6129449190614801565b8b900490508661295481836145e1565b9850985050505050505050935093915050565b73ffffffffffffffffffffffffffffffffffffffff81166129e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f53545241544547595f43414e5f4e4f545f42455f5a45524f0000000000000000604482015260640161074a565b6001813b151514612a51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f53545241544547595f4d5553545f42455f434f4e545241435400000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff8281166000818152603a602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f8ca1d928f1d72493a6b78c4f74aabde976bc37ffe2570f2a1ce5a8abd3dde0aa9190a35050565b60005b8151811015610d235760016000838381518110612aef57612aef614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160109054906101000a900460ff1660ff16600003612bc9576004828281518110612b6457612b64614583565b6020908102919091018101516060015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790555b6000828281518110612bdd57612bdd614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c579190614818565b60016000858581518110612c6d57612c6d614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160106101000a81548160ff021916908360ff160217905560ff169050600060016000858581518110612cea57612cea614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000858581518110612d4757612d47614583565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160189054906101000a900463ffffffff1663ffffffff16600003612fc157838381518110612dc357612dc3614583565b60200260200101516080015160016000868681518110612de557612de5614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600060016000888881518110612e4657612e46614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016000858581518110612f3257612f32614583565b6020908102919091018101516060015173ffffffffffffffffffffffffffffffffffffffff168252810191909152604001600090812060020180546fffffffffffffffffffffffffffffffff1691612f898361462c565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505b60026000858581518110612fd757612fd7614583565b6020908102919091018101516080015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160009081205460ff16151590036131075760016002600086868151811061303157613031614583565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060038484815181106130a2576130a2614583565b6020908102919091018101516080015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790555b60006131388286868151811061311f5761311f614583565b60200260200101516020015185600a611c9891906147a3565b50825486519192506d010000000000000000000000000081046affffffffffffffffffffff16917c010000000000000000000000000000000000000000000000000000000090910463ffffffff169087908790811061319957613199614583565b60209081029190910101515184546affffffffffffffffffffff9091166d0100000000000000000000000000027fffffffffffffffff0000000000000000000000ffffffffffffffffffffffffff909116178455865187908790811061320157613201614583565b602090810291909101015160400151845463ffffffff9091167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff909116178455865187908790811061327057613270614583565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff168787815181106132a4576132a4614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff167fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc5848a8a815181106132fa576132fa614583565b602002602001015160000151858c8c8151811061331957613319614583565b6020026020010151604001518960405161336d9594939291906affffffffffffffffffffff958616815293909416602084015263ffffffff9182166040840152166060820152608081019190915260a00190565b60405180910390a350505050508080613385906145f4565b915050612ad0565b60035460609081908067ffffffffffffffff8111156133ae576133ae61426e565b6040519080825280602002602001820160405280156133d7578160200160208202803683370190505b5092508067ffffffffffffffff8111156133f3576133f361426e565b60405190808252806020026020018201604052801561341c578160200160208202803683370190505b50915061342e85611e718a8a8961229d565b60005b8781101561373c57600089898381811061344d5761344d614583565b90506020020160208101906134629190613f82565b905060005b8381101561372757600073ffffffffffffffffffffffffffffffffffffffff1686828151811061349957613499614583565b602002602001015173ffffffffffffffffffffffffffffffffffffffff160361354757600381815481106134cf576134cf614583565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686828151811061350c5761350c614583565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208751829089908590811061358257613582614583565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683528282019390935260409182016000908120938d168152600190930190529020546d010000000000000000000000000090046fffffffffffffffffffffffffffffffff1690508015613714578086838151811061360657613606614583565b6020026020010181815161361a91906145e1565b90525073ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260408120885182908a908690811061365857613658614583565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600d6101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b508061371f816145f4565b915050613467565b50508080613734906145f4565b915050613431565b5060005b81811015613868576137858585838151811061375e5761375e614583565b602002602001015185848151811061377857613778614583565b6020026020010151613b29565b8473ffffffffffffffffffffffffffffffffffffffff168482815181106137ae576137ae614583565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fc052130bc4ef84580db505783484b067ea8b71b3bca78a7e12db7aea8658f0048a87868151811061381757613817614583565b602002602001015160405161384e92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60405180910390a480613860816145f4565b915050613740565b50509550959350505050565b60008060008061388587878761285b565b91509150600082821461399e576cffffffffffffffffffffffffff821115613909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e4445585f4f564552464c4f57000000000000000000000000000000000000604482015260640161074a565b5086547fffffffffffffffffffffffffffffffffffffff00000000000000000000000000166cffffffffffffffffffffffffff8216178755600161394c42613dd8565b885463ffffffff919091167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff9091161788556139f5565b6139a742613dd8565b885463ffffffff919091167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff9091161788555b9097909650945050505050565b60005b815181101561077857613a71828281518110613a2357613a23614583565b60200260200101516000015184848481518110613a4257613a42614583565b602002602001015160200151858581518110613a6057613a60614583565b6020026020010151604001516120e5565b80613a7b816145f4565b915050613a05565b60006fffffffffffffffffffffffffffffffff821115613b25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f3238206269747300000000000000000000000000000000000000000000000000606482015260840161074a565b5090565b73ffffffffffffffffffffffffffffffffffffffff8281166000818152603a60205260408082205490517f16beb9820000000000000000000000000000000000000000000000000000000081528785166004820152602481019390935260448301859052909216919082906316beb982906064016020604051808303816000875af1158015613bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be0919061483b565b9050600181151514613c4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f5452414e534645525f4552524f52000000000000000000000000000000000000604482015260640161074a565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260018601602052604081205481906cffffffffffffffffffffffffff1681858214801590613da55773ffffffffffffffffffffffffffffffffffffffff8916600090815260018b016020526040902080547fffffffffffffffffffffffffffffffffffffff00000000000000000000000000166cffffffffffffffffffffffffff89161790558715613da557613d0988888589613db4565b9150613d1482613a83565b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260018c01602052604090208054600d90613d6e9084906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff1661485d565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b90999098509650505050505050565b600080613dc184866147ca565b613dcb9087614801565b9290920495945050505050565b600063ffffffff821115613b25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f3220626974730000000000000000000000000000000000000000000000000000606482015260840161074a565b73ffffffffffffffffffffffffffffffffffffffff811681146111b657600080fd5b60008060408385031215613ea357600080fd5b8235613eae81613e6e565b91506020830135613ebe81613e6e565b809150509250929050565b60008083601f840112613edb57600080fd5b50813567ffffffffffffffff811115613ef357600080fd5b6020830191508360208260051b8501011115610fb257600080fd5b600080600080600060808688031215613f2657600080fd5b853567ffffffffffffffff811115613f3d57600080fd5b613f4988828901613ec9565b909650945050602086013592506040860135613f6481613e6e565b91506060860135613f7481613e6e565b809150509295509295909350565b600060208284031215613f9457600080fd5b8135613f9f81613e6e565b9392505050565b600080600060608486031215613fbb57600080fd5b8335613fc681613e6e565b95602085013595506040909401359392505050565b60008060008060008060a08789031215613ff457600080fd5b863567ffffffffffffffff81111561400b57600080fd5b61401789828a01613ec9565b90975095505060208701359350604087013561403281613e6e565b9250606087013561404281613e6e565b9150608087013561405281613e6e565b809150509295509295509295565b60008060006040848603121561407557600080fd5b833567ffffffffffffffff81111561408c57600080fd5b61409886828701613ec9565b90945092505060208401356140ac81613e6e565b809150509250925092565b600081518084526020808501945080840160005b838110156140fd57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016140cb565b509495945050505050565b60408152600061411b60408301856140b7565b82810360208481019190915284518083528582019282019060005b8181101561415257845183529383019391830191600101614136565b5090979650505050505050565b60008060006060848603121561417457600080fd5b833561417f81613e6e565b9250602084013561418f81613e6e565b915060408401356140ac81613e6e565b600080600080606085870312156141b557600080fd5b843567ffffffffffffffff8111156141cc57600080fd5b6141d887828801613ec9565b9095509350506020850135915060408501356141f381613e6e565b939692955090935050565b602081526000613f9f60208301846140b7565b6000806000806060858703121561422757600080fd5b843567ffffffffffffffff81111561423e57600080fd5b61424a87828801613ec9565b909550935050602085013561425e81613e6e565b915060408501356141f381613e6e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156142c0576142c061426e565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561430d5761430d61426e565b604052919050565b80356affffffffffffffffffffff8116811461433057600080fd5b919050565b803563ffffffff8116811461433057600080fd5b6000602080838503121561435c57600080fd5b823567ffffffffffffffff8082111561437457600080fd5b818501915085601f83011261438857600080fd5b81358181111561439a5761439a61426e565b6143a8848260051b016142c6565b818152848101925060e09182028401850191888311156143c757600080fd5b938501935b8285101561446b5780858a0312156143e45760008081fd5b6143ec61429d565b6143f586614315565b81528686013587820152604061440c818801614335565b9082015260608681013561441f81613e6e565b9082015260808681013561443281613e6e565b9082015260a08681013561444581613e6e565b9082015260c08681013561445881613e6e565b90820152845293840193928501926143cc565b50979650505050505050565b6000806020838503121561448a57600080fd5b823567ffffffffffffffff8111156144a157600080fd5b6144ad85828601613ec9565b90969095509350505050565b6000806000606084860312156144ce57600080fd5b83356144d981613e6e565b925060208401356144e981613e6e565b91506144f760408501614335565b90509250925092565b60008060008060006060868803121561451857600080fd5b853561452381613e6e565b9450602086013567ffffffffffffffff8082111561454057600080fd5b61454c89838a01613ec9565b9096509450604088013591508082111561456557600080fd5b5061457288828901613ec9565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156106c9576106c96145b2565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614625576146256145b2565b5060010190565b60006fffffffffffffffffffffffffffffffff808316818103614651576146516145b2565b6001019392505050565b60006020828403121561466d57600080fd5b5051919050565b600181815b808511156146cd57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156146b3576146b36145b2565b808516156146c057918102915b93841c9390800290614679565b509250929050565b6000826146e4575060016106c9565b816146f1575060006106c9565b816001811461470757600281146147115761472d565b60019150506106c9565b60ff841115614722576147226145b2565b50506001821b6106c9565b5060208310610133831016604e8410600b8410161715614750575081810a6106c9565b61475a8383614674565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561478c5761478c6145b2565b029392505050565b6000613f9f60ff8416836146d5565b6000613f9f83836146d5565b6000602082840312156147c157600080fd5b613f9f82614315565b818103818111156106c9576106c96145b2565b600080604083850312156147f057600080fd5b505080516020909101519092909150565b80820281158282048414176106c9576106c96145b2565b60006020828403121561482a57600080fd5b815160ff81168114613f9f57600080fd5b60006020828403121561484d57600080fd5b81518015158114613f9f57600080fd5b6fffffffffffffffffffffffffffffffff818116838216019080821115614886576148866145b2565b509291505056fea26469706673582212208f7c0d54ed8f5ead6b20c83522e6c8dd085e12e6e2abf8aa636b0080f17f165f64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806392074b0811610104578063bf90f63a116100a2578063dde43cba11610071578063dde43cba1461062e578063e15ac62314610636578063f5cf673b14610649578063f996868b1461065c57600080fd5b8063bf90f63a146105ce578063c4d66de8146105e1578063c5a7b538146105f4578063cbcbb5071461060757600080fd5b80639ff55db9116100de5780639ff55db91461058d578063b022418c146105a0578063b45ac1a9146105b3578063bb492bf5146105bb57600080fd5b806392074b08146104f2578063955c2ad7146105185780639efd6f721461052b57600080fd5b80635453ba101161017c57806370674ab91161014b57806370674ab9146103a257806374d945ec146103b55780637eff4ba8146103ee578063886fe70b146104ca57600080fd5b80635453ba101461032357806357b89883146103365780635f130b24146103495780636657732f1461038257600080fd5b806331873e2e116101b857806331873e2e1461027657806333028b991461028b5780634c0369c31461029e578063533f542a146102bf57600080fd5b80631b839c77146101df578063236300dc146102055780632a17bf6014610218575b600080fd5b6101f26101ed366004613e90565b61066f565b6040519081526020015b60405180910390f35b6101f2610213366004613f0e565b6106cf565b610251610226366004613f82565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152603b60205260409020541690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101fc565b610289610284366004613fa6565b61076c565b005b6101f2610299366004613fdb565b61077d565b6102b16102ac366004614060565b610929565b6040516101fc929190614108565b6101f26102cd36600461415f565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260016020818152604080842086861685528252808420948816845293909101905220546cffffffffffffffffffffffffff169392505050565b610289610331366004613e90565b610c7a565b6101f261034436600461419f565b610d27565b610251610357366004613f82565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152603a60205260409020541690565b610395610390366004613f82565b610d41565b6040516101fc91906141fe565b6101f26103b0366004614211565b610e93565b6102516103c3366004613f82565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152603960205260409020541690565b6104aa6103fc366004613e90565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526001602090815260408083209390941682529190915220546cffffffffffffffffffffffffff8116916affffffffffffffffffffff6d01000000000000000000000000008304169163ffffffff780100000000000000000000000000000000000000000000000082048116927c01000000000000000000000000000000000000000000000000000000009092041690565b6040805194855260208501939093529183015260608201526080016101fc565b6104dd6104d8366004613e90565b610eaa565b604080519283526020830191909152016101fc565b7f0000000000000000000000000000000000000000000000000000000000000000610251565b610289610526366004614349565b610fb9565b61057b610539366004613f82565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020526040902060020154700100000000000000000000000000000000900460ff1690565b60405160ff90911681526020016101fc565b6102b161059b366004614211565b6111b9565b6101f26105ae366004613e90565b611368565b610395611421565b6102b16105c9366004614060565b611490565b6102b16105dc366004614477565b611529565b6102896105ef366004613f82565b611544565b6102896106023660046144b9565b611660565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b6101f2600281565b610289610644366004613e90565b611816565b610289610657366004613e90565b6118bf565b61028961066a366004614500565b6119da565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600160209081526040808320938516835292905220547c0100000000000000000000000000000000000000000000000000000000900463ffffffff165b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8316610753576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f494e56414c49445f544f5f41444452455353000000000000000000000000000060448201526064015b60405180910390fd5b61076286868633338888611e4e565b9695505050505050565b610778338483856120e5565b505050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260396020526040812054909133918691168214610813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f434c41494d45525f554e415554484f52495a4544000000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff8616610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f555345525f41444452455353000000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff851661090d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f494e56414c49445f544f5f414444524553530000000000000000000000000000604482015260640161074a565b61091c898989338a8a8a611e4e565b9998505050505050505050565b606080600061093986868661229d565b60035490915067ffffffffffffffff8111156109575761095761426e565b604051908082528060200260200182016040528015610980578160200160208202803683370190505b509250825167ffffffffffffffff81111561099d5761099d61426e565b6040519080825280602002602001820160405280156109c6578160200160208202803683370190505b50915060005b8151811015610c6f5760005b8451811015610c5c57600381815481106109f4576109f4614583565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858281518110610a3157610a31614583565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060016000848481518110610a8157610a81614583565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000868381518110610ade57610ade614583565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600d9054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16848281518110610ba457610ba4614583565b60200260200101818151610bb891906145e1565b9052508251839083908110610bcf57610bcf614583565b60200260200101516020015160000315610c4a57610c2086868381518110610bf957610bf9614583565b6020026020010151858581518110610c1357610c13614583565b602002602001015161249b565b848281518110610c3257610c32614583565b60200260200101818151610c4691906145e1565b9052505b80610c54816145f4565b9150506109d8565b5080610c67816145f4565b9150506109cc565b50505b935093915050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b610d238282612569565b5050565b6000610d3885858533333388611e4e565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260408120600201546060916fffffffffffffffffffffffffffffffff909116908167ffffffffffffffff811115610d9b57610d9b61426e565b604051908082528060200260200182016040528015610dc4578160200160208202803683370190505b50905060005b826fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161015610e8b5773ffffffffffffffffffffffffffffffffffffffff80861660009081526001602081815260408084206fffffffffffffffffffffffffffffffff871680865293019091529091205484519216918491908110610e5457610e54614583565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610e838161462c565b915050610dca565b509392505050565b6000610d388383610ea588888861229d565b6126bd565b73ffffffffffffffffffffffffffffffffffffffff8083166000818152600160209081526040808320948616835293815283822084517fb1bf962d0000000000000000000000000000000000000000000000000000000081529451929485949193610fac9385939263b1bf962d92600480830193928290030181865afa158015610f38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5c919061465b565b73ffffffffffffffffffffffffffffffffffffffff8816600090815260016020526040902060020154610fa790700100000000000000000000000000000000900460ff16600a614794565b61285b565b92509250505b9250929050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b60005b81518110156111ac5781818151811061107657611076614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f0919061465b565b82828151811061110257611102614583565b6020026020010151602001818152505061115682828151811061112757611127614583565b60200260200101516080015183838151811061114557611145614583565b602002602001015160a00151612967565b61119a82828151811061116b5761116b614583565b60200260200101516080015183838151811061118957611189614583565b602002602001015160c00151612569565b806111a4816145f4565b91505061105b565b506111b681612acd565b50565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260396020526040902054606091829133918691168214611252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f434c41494d45525f554e415554484f52495a4544000000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff86166112cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f555345525f41444452455353000000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff851661134c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f494e56414c49445f544f5f414444524553530000000000000000000000000000604482015260640161074a565b611359888833898961338d565b93509350505094509492505050565b60008060005b600454811015610e8b57600160006004838154811061138f5761138f614583565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff90811684528382019490945260409283018220888516835281528282209389168252600190930190925290205461140d906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff16836145e1565b915080611419816145f4565b91505061136e565b6060600380548060200260200160405190810160405280929190818152602001828054801561148657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161145b575b5050505050905090565b60608073ffffffffffffffffffffffffffffffffffffffff8316611510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f494e56414c49445f544f5f414444524553530000000000000000000000000000604482015260640161074a565b61151d858533338761338d565b91509150935093915050565b606080611539848433333361338d565b915091509250929050565b60065460029060ff16806115575750303b155b80611563575060055481115b6115ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a6564000000000000000000000000000000000000606482015260840161074a565b60065460ff1615801561162d57600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560058290555b801561077857600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146116ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902080547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff81167c010000000000000000000000000000000000000000000000000000000063ffffffff8981168281029384179586905587516d01000000000000000000000000009096046affffffffffffffffffffff16808752968601969096529083041694830185905260608301939093526cffffffffffffffffffffffffff9081169216919091176080820152909291907fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc59060a00160405180910390a350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146118b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b610d238282612967565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461195e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff82811660008181526039602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f4925eafc82d0c4d67889898eeed64b18488ab19811e61620f387026dec126a289190a35050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611a79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f4e4c595f454d495353494f4e5f4d414e414745520000000000000000000000604482015260640161074a565b828114611ae2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f494e50555400000000000000000000000000000000000000604482015260640161074a565b60005b83811015611e465773ffffffffffffffffffffffffffffffffffffffff86166000908152600160205260408120908181888886818110611b2757611b27614583565b9050602002016020810190611b3c9190613f82565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000206002830154909150700100000000000000000000000000000000900460ff168015801590611bb2575081547801000000000000000000000000000000000000000000000000900463ffffffff1615155b611c18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f444953545249425554494f4e5f444f45535f4e4f545f45584953540000000000604482015260640161074a565b6000611c9d838b73ffffffffffffffffffffffffffffffffffffffff1663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8d919061465b565b611c9885600a6147a3565b613874565b5083549091506d010000000000000000000000000090046affffffffffffffffffffff16878787818110611cd357611cd3614583565b9050602002016020810190611ce891906147af565b84546affffffffffffffffffffff919091166d0100000000000000000000000000027fffffffffffffffff0000000000000000000000ffffffffffffffffffffffffff909116178455898987818110611d4357611d43614583565b9050602002016020810190611d589190613f82565b73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc5838b8b8b818110611db957611db9614583565b9050602002016020810190611dce91906147af565b8854604080519384526affffffffffffffffffffff90921660208401527c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690820181905260608201526080810186905260a00160405180910390a350505050508080611e3e906145f4565b915050611ae5565b505050505050565b600085600003611e60575060006120da565b6000611e7685611e718b8b8961229d565b613a02565b60005b8881101561205d5760008a8a83818110611e9557611e95614583565b9050602002016020810190611eaa9190613f82565b73ffffffffffffffffffffffffffffffffffffffff81811660009081526001602081815260408084208b861685528252808420948d1684529390910190522054909150611f1a906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff16846145e1565b9250888311611f8d5773ffffffffffffffffffffffffffffffffffffffff80821660009081526001602081815260408084208a861685528252808420948c1684529390910190522080547fffffff00000000000000000000000000000000ffffffffffffffffffffffffff16905561204a565b6000611f998a856147ca565b9050611fa581856147ca565b9350611fb081613a83565b73ffffffffffffffffffffffffffffffffffffffff92831660009081526001602081815260408084208b881685528252808420968d1684529590910190529290922080546fffffffffffffffffffffffffffffffff939093166d0100000000000000000000000000027fffffff00000000000000000000000000000000ffffffffffffffffffffffffff909316929092179091555061205d565b5080612055816145f4565b915050611e79565b50806000036120705760009150506120da565b61207b848483613b29565b6040805173ffffffffffffffffffffffffffffffffffffffff8881168252602082018490528087169286821692918916917fc052130bc4ef84580db505783484b067ea8b71b3bca78a7e12db7aea8658f004910160405180910390a490505b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081206002015460ff700100000000000000000000000000000000820416600a0a916fffffffffffffffffffffffffffffffff9091169081900361214c575050612297565b60005b81816fffffffffffffffffffffffffffffffff1610156122935773ffffffffffffffffffffffffffffffffffffffff80881660009081526001602081815260408084206fffffffffffffffffffffffffffffffff8716855292830182528084205490941680845291905291812090806121c9838989613874565b915091506000806121dd858d8d878d613c55565b9150915082806121ea5750805b15612281578b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff167f3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8878887604051612278939291909283526020830191909152604082015260600190565b60405180910390a45b50506001909401935061214f92505050565b5050505b50505050565b60608267ffffffffffffffff8111156122b8576122b861426e565b60405190808252806020026020018201604052801561232357816020015b6123106040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b8152602001906001900390816122d65790505b50905060005b83811015610e8b5784848281811061234357612343614583565b90506020020160208101906123589190613f82565b82828151811061236a5761236a614583565b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff90911690528484828181106123a1576123a1614583565b90506020020160208101906123b69190613f82565b6040517f0afbcdc900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529190911690630afbcdc9906024016040805180830381865afa158015612423573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244791906147dd565b83838151811061245957612459614583565b602002602001015160200184848151811061247657612476614583565b6020908102919091010151604001919091525280612493816145f4565b915050612329565b805173ffffffffffffffffffffffffffffffffffffffff90811660009081526001602081815260408084208786168552825280842086519095168452919052812060020154909190829061250790700100000000000000000000000000000000900460ff16600a614794565b9050600061251a8386604001518461285b565b60208088015173ffffffffffffffffffffffffffffffffffffffff8b166000908152600188019092526040909120549193506120da92509083906cffffffffffffffffffffffffff1685613db4565b60008173ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125da919061465b565b13612641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f5241434c455f4d5553545f52455455524e5f50524943450000000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff8281166000818152603b602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f1a1cd5483e52e60b9ff7f3b9d1db3bbd9e9d21c6324ad3a8c79dba9b75e62f4d9190a35050565b6000805b8251811015610e8b578281815181106126dc576126dc614583565b60200260200101516020015160000361278a576001600084838151811061270557612705614583565b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff9081168352828201939093526040918201600090812088851682528252828120938916815260019093019052902054612783906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff16836145e1565b9150612849565b600160008483815181106127a0576127a0614583565b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff908116835282820193909352604091820160009081208885168252825282812093891681526001909301905290205483516d01000000000000000000000000009091046fffffffffffffffffffffffffffffffff16906128329087908790879086908110610c1357610c13614583565b61283c91906145e1565b61284690836145e1565b91505b80612853816145f4565b9150506126c1565b825460009081906cffffffffffffffffffffffffff81169063ffffffff7c010000000000000000000000000000000000000000000000000000000082048116916affffffffffffffffffffff6d0100000000000000000000000000820416917801000000000000000000000000000000000000000000000000909104168115806128e3575087155b806128ed57504281145b806128f85750828110155b1561290c5783849550955050505050610c72565b600083421161291b574261291d565b835b9050600061292b83836147ca565b905060008961293a8387614801565b6129449190614801565b8b900490508661295481836145e1565b9850985050505050505050935093915050565b73ffffffffffffffffffffffffffffffffffffffff81166129e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f53545241544547595f43414e5f4e4f545f42455f5a45524f0000000000000000604482015260640161074a565b6001813b151514612a51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f53545241544547595f4d5553545f42455f434f4e545241435400000000000000604482015260640161074a565b73ffffffffffffffffffffffffffffffffffffffff8281166000818152603a602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f8ca1d928f1d72493a6b78c4f74aabde976bc37ffe2570f2a1ce5a8abd3dde0aa9190a35050565b60005b8151811015610d235760016000838381518110612aef57612aef614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160109054906101000a900460ff1660ff16600003612bc9576004828281518110612b6457612b64614583565b6020908102919091018101516060015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790555b6000828281518110612bdd57612bdd614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c579190614818565b60016000858581518110612c6d57612c6d614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160106101000a81548160ff021916908360ff160217905560ff169050600060016000858581518110612cea57612cea614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000858581518110612d4757612d47614583565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160189054906101000a900463ffffffff1663ffffffff16600003612fc157838381518110612dc357612dc3614583565b60200260200101516080015160016000868681518110612de557612de5614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600060016000888881518110612e4657612e46614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016000858581518110612f3257612f32614583565b6020908102919091018101516060015173ffffffffffffffffffffffffffffffffffffffff168252810191909152604001600090812060020180546fffffffffffffffffffffffffffffffff1691612f898361462c565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505b60026000858581518110612fd757612fd7614583565b6020908102919091018101516080015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160009081205460ff16151590036131075760016002600086868151811061303157613031614583565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060038484815181106130a2576130a2614583565b6020908102919091018101516080015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790555b60006131388286868151811061311f5761311f614583565b60200260200101516020015185600a611c9891906147a3565b50825486519192506d010000000000000000000000000081046affffffffffffffffffffff16917c010000000000000000000000000000000000000000000000000000000090910463ffffffff169087908790811061319957613199614583565b60209081029190910101515184546affffffffffffffffffffff9091166d0100000000000000000000000000027fffffffffffffffff0000000000000000000000ffffffffffffffffffffffffff909116178455865187908790811061320157613201614583565b602090810291909101015160400151845463ffffffff9091167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff909116178455865187908790811061327057613270614583565b60200260200101516080015173ffffffffffffffffffffffffffffffffffffffff168787815181106132a4576132a4614583565b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff167fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc5848a8a815181106132fa576132fa614583565b602002602001015160000151858c8c8151811061331957613319614583565b6020026020010151604001518960405161336d9594939291906affffffffffffffffffffff958616815293909416602084015263ffffffff9182166040840152166060820152608081019190915260a00190565b60405180910390a350505050508080613385906145f4565b915050612ad0565b60035460609081908067ffffffffffffffff8111156133ae576133ae61426e565b6040519080825280602002602001820160405280156133d7578160200160208202803683370190505b5092508067ffffffffffffffff8111156133f3576133f361426e565b60405190808252806020026020018201604052801561341c578160200160208202803683370190505b50915061342e85611e718a8a8961229d565b60005b8781101561373c57600089898381811061344d5761344d614583565b90506020020160208101906134629190613f82565b905060005b8381101561372757600073ffffffffffffffffffffffffffffffffffffffff1686828151811061349957613499614583565b602002602001015173ffffffffffffffffffffffffffffffffffffffff160361354757600381815481106134cf576134cf614583565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686828151811061350c5761350c614583565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208751829089908590811061358257613582614583565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff90811683528282019390935260409182016000908120938d168152600190930190529020546d010000000000000000000000000090046fffffffffffffffffffffffffffffffff1690508015613714578086838151811061360657613606614583565b6020026020010181815161361a91906145e1565b90525073ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260408120885182908a908690811061365857613658614583565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600d6101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b508061371f816145f4565b915050613467565b50508080613734906145f4565b915050613431565b5060005b81811015613868576137858585838151811061375e5761375e614583565b602002602001015185848151811061377857613778614583565b6020026020010151613b29565b8473ffffffffffffffffffffffffffffffffffffffff168482815181106137ae576137ae614583565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fc052130bc4ef84580db505783484b067ea8b71b3bca78a7e12db7aea8658f0048a87868151811061381757613817614583565b602002602001015160405161384e92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60405180910390a480613860816145f4565b915050613740565b50509550959350505050565b60008060008061388587878761285b565b91509150600082821461399e576cffffffffffffffffffffffffff821115613909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e4445585f4f564552464c4f57000000000000000000000000000000000000604482015260640161074a565b5086547fffffffffffffffffffffffffffffffffffffff00000000000000000000000000166cffffffffffffffffffffffffff8216178755600161394c42613dd8565b885463ffffffff919091167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff9091161788556139f5565b6139a742613dd8565b885463ffffffff919091167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff9091161788555b9097909650945050505050565b60005b815181101561077857613a71828281518110613a2357613a23614583565b60200260200101516000015184848481518110613a4257613a42614583565b602002602001015160200151858581518110613a6057613a60614583565b6020026020010151604001516120e5565b80613a7b816145f4565b915050613a05565b60006fffffffffffffffffffffffffffffffff821115613b25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f3238206269747300000000000000000000000000000000000000000000000000606482015260840161074a565b5090565b73ffffffffffffffffffffffffffffffffffffffff8281166000818152603a60205260408082205490517f16beb9820000000000000000000000000000000000000000000000000000000081528785166004820152602481019390935260448301859052909216919082906316beb982906064016020604051808303816000875af1158015613bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be0919061483b565b9050600181151514613c4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f5452414e534645525f4552524f52000000000000000000000000000000000000604482015260640161074a565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260018601602052604081205481906cffffffffffffffffffffffffff1681858214801590613da55773ffffffffffffffffffffffffffffffffffffffff8916600090815260018b016020526040902080547fffffffffffffffffffffffffffffffffffffff00000000000000000000000000166cffffffffffffffffffffffffff89161790558715613da557613d0988888589613db4565b9150613d1482613a83565b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260018c01602052604090208054600d90613d6e9084906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff1661485d565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b90999098509650505050505050565b600080613dc184866147ca565b613dcb9087614801565b9290920495945050505050565b600063ffffffff821115613b25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f3220626974730000000000000000000000000000000000000000000000000000606482015260840161074a565b73ffffffffffffffffffffffffffffffffffffffff811681146111b657600080fd5b60008060408385031215613ea357600080fd5b8235613eae81613e6e565b91506020830135613ebe81613e6e565b809150509250929050565b60008083601f840112613edb57600080fd5b50813567ffffffffffffffff811115613ef357600080fd5b6020830191508360208260051b8501011115610fb257600080fd5b600080600080600060808688031215613f2657600080fd5b853567ffffffffffffffff811115613f3d57600080fd5b613f4988828901613ec9565b909650945050602086013592506040860135613f6481613e6e565b91506060860135613f7481613e6e565b809150509295509295909350565b600060208284031215613f9457600080fd5b8135613f9f81613e6e565b9392505050565b600080600060608486031215613fbb57600080fd5b8335613fc681613e6e565b95602085013595506040909401359392505050565b60008060008060008060a08789031215613ff457600080fd5b863567ffffffffffffffff81111561400b57600080fd5b61401789828a01613ec9565b90975095505060208701359350604087013561403281613e6e565b9250606087013561404281613e6e565b9150608087013561405281613e6e565b809150509295509295509295565b60008060006040848603121561407557600080fd5b833567ffffffffffffffff81111561408c57600080fd5b61409886828701613ec9565b90945092505060208401356140ac81613e6e565b809150509250925092565b600081518084526020808501945080840160005b838110156140fd57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016140cb565b509495945050505050565b60408152600061411b60408301856140b7565b82810360208481019190915284518083528582019282019060005b8181101561415257845183529383019391830191600101614136565b5090979650505050505050565b60008060006060848603121561417457600080fd5b833561417f81613e6e565b9250602084013561418f81613e6e565b915060408401356140ac81613e6e565b600080600080606085870312156141b557600080fd5b843567ffffffffffffffff8111156141cc57600080fd5b6141d887828801613ec9565b9095509350506020850135915060408501356141f381613e6e565b939692955090935050565b602081526000613f9f60208301846140b7565b6000806000806060858703121561422757600080fd5b843567ffffffffffffffff81111561423e57600080fd5b61424a87828801613ec9565b909550935050602085013561425e81613e6e565b915060408501356141f381613e6e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156142c0576142c061426e565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561430d5761430d61426e565b604052919050565b80356affffffffffffffffffffff8116811461433057600080fd5b919050565b803563ffffffff8116811461433057600080fd5b6000602080838503121561435c57600080fd5b823567ffffffffffffffff8082111561437457600080fd5b818501915085601f83011261438857600080fd5b81358181111561439a5761439a61426e565b6143a8848260051b016142c6565b818152848101925060e09182028401850191888311156143c757600080fd5b938501935b8285101561446b5780858a0312156143e45760008081fd5b6143ec61429d565b6143f586614315565b81528686013587820152604061440c818801614335565b9082015260608681013561441f81613e6e565b9082015260808681013561443281613e6e565b9082015260a08681013561444581613e6e565b9082015260c08681013561445881613e6e565b90820152845293840193928501926143cc565b50979650505050505050565b6000806020838503121561448a57600080fd5b823567ffffffffffffffff8111156144a157600080fd5b6144ad85828601613ec9565b90969095509350505050565b6000806000606084860312156144ce57600080fd5b83356144d981613e6e565b925060208401356144e981613e6e565b91506144f760408501614335565b90509250925092565b60008060008060006060868803121561451857600080fd5b853561452381613e6e565b9450602086013567ffffffffffffffff8082111561454057600080fd5b61454c89838a01613ec9565b9096509450604088013591508082111561456557600080fd5b5061457288828901613ec9565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156106c9576106c96145b2565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614625576146256145b2565b5060010190565b60006fffffffffffffffffffffffffffffffff808316818103614651576146516145b2565b6001019392505050565b60006020828403121561466d57600080fd5b5051919050565b600181815b808511156146cd57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156146b3576146b36145b2565b808516156146c057918102915b93841c9390800290614679565b509250929050565b6000826146e4575060016106c9565b816146f1575060006106c9565b816001811461470757600281146147115761472d565b60019150506106c9565b60ff841115614722576147226145b2565b50506001821b6106c9565b5060208310610133831016604e8410600b8410161715614750575081810a6106c9565b61475a8383614674565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561478c5761478c6145b2565b029392505050565b6000613f9f60ff8416836146d5565b6000613f9f83836146d5565b6000602082840312156147c157600080fd5b613f9f82614315565b818103818111156106c9576106c96145b2565b600080604083850312156147f057600080fd5b505080516020909101519092909150565b80820281158282048414176106c9576106c96145b2565b60006020828403121561482a57600080fd5b815160ff81168114613f9f57600080fd5b60006020828403121561484d57600080fd5b81518015158114613f9f57600080fd5b6fffffffffffffffffffffffffffffffff818116838216019080821115614886576148866145b2565b509291505056fea26469706673582212208f7c0d54ed8f5ead6b20c83522e6c8dd085e12e6e2abf8aa636b0080f17f165f64736f6c63430008110033",
  "devdoc": {
    "author": "HopeLend*",
    "kind": "dev",
    "methods": {
      "claimAllRewards(address[],address)": {
        "details": "Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards",
        "params": {
          "assets": "The list of assets to check eligible distributions before claiming rewards",
          "to": "The address that will be receiving the rewards"
        },
        "returns": {
          "claimedAmounts": "List that contains the claimed amount per reward, following same order as \"rewardList\"*",
          "rewardsList": "List of addresses of the reward tokens"
        }
      },
      "claimAllRewardsOnBehalf(address[],address,address)": {
        "details": "Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager",
        "params": {
          "assets": "The list of assets to check eligible distributions before claiming rewards",
          "to": "The address that will be receiving the rewards",
          "user": "The address to check and claim rewards"
        },
        "returns": {
          "claimedAmounts": "List that contains the claimed amount per reward, following same order as \"rewardsList\"*",
          "rewardsList": "List of addresses of the reward tokens"
        }
      },
      "claimAllRewardsToSelf(address[])": {
        "details": "Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards",
        "params": {
          "assets": "The list of assets to check eligible distributions before claiming rewards"
        },
        "returns": {
          "claimedAmounts": "List that contains the claimed amount per reward, following same order as \"rewardsList\"*",
          "rewardsList": "List of addresses of the reward tokens"
        }
      },
      "claimRewards(address[],uint256,address,address)": {
        "details": "Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards",
        "params": {
          "amount": "The amount of rewards to claim",
          "assets": "List of assets to check eligible distributions before claiming rewards",
          "reward": "The address of the reward token",
          "to": "The address that will be receiving the rewards"
        },
        "returns": {
          "_0": "The amount of rewards claimed*"
        }
      },
      "claimRewardsOnBehalf(address[],uint256,address,address,address)": {
        "details": "Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager",
        "params": {
          "amount": "The amount of rewards to claim",
          "assets": "The list of assets to check eligible distributions before claiming rewards",
          "reward": "The address of the reward token",
          "to": "The address that will be receiving the rewards",
          "user": "The address to check and claim rewards"
        },
        "returns": {
          "_0": "The amount of rewards claimed*"
        }
      },
      "claimRewardsToSelf(address[],uint256,address)": {
        "details": "Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards",
        "params": {
          "amount": "The amount of rewards to claim",
          "assets": "The list of assets to check eligible distributions before claiming rewards",
          "reward": "The address of the reward token"
        },
        "returns": {
          "_0": "The amount of rewards claimed*"
        }
      },
      "configureAssets((uint88,uint256,uint32,address,address,address,address)[])": {
        "details": "Configure assets to incentivize with an emission of rewards per second until the end of distribution.",
        "params": {
          "config": "The assets configuration input, the list of structs contains the following fields:   uint104 emissionPerSecond: The emission per second following rewards unit decimals.   uint256 totalSupply: The total supply of the asset to incentivize   uint40 distributionEnd: The end of the distribution of the incentives for an asset   address asset: The asset address to incentivize   address reward: The reward token address   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible."
        }
      },
      "getAllUserRewards(address[],address)": {
        "details": "Returns a list all rewards of a user, including already accrued and unrealized claimable rewards",
        "params": {
          "assets": "List of incentivized assets to check eligible distributions",
          "user": "The address of the user"
        },
        "returns": {
          "rewardsList": "The list of reward addresses",
          "unclaimedAmounts": "The list of unclaimed amount of rewards*"
        }
      },
      "getAssetDecimals(address)": {
        "details": "Returns the decimals of an asset to calculate the distribution delta",
        "params": {
          "asset": "The address to retrieve decimals"
        },
        "returns": {
          "_0": "The decimals of an underlying asset"
        }
      },
      "getAssetIndex(address,address)": {
        "details": "Calculates the next value of an specific distribution index, with validations.",
        "params": {
          "asset": "The incentivized asset",
          "reward": "The reward token of the incentivized asset"
        },
        "returns": {
          "_0": "The old index of the asset distribution",
          "_1": "The new index of the asset distribution*"
        }
      },
      "getClaimer(address)": {
        "details": "Returns the whitelisted claimer for a certain address (0x0 if not set)",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The claimer address"
        }
      },
      "getDistributionEnd(address,address)": {
        "details": "Gets the end date for the distribution",
        "params": {
          "asset": "The incentivized asset",
          "reward": "The reward token of the incentivized asset"
        },
        "returns": {
          "_0": "The timestamp with the end of the distribution, in unix time format*"
        }
      },
      "getEmissionManager()": {
        "details": "Returns the address of the emission manager. Deprecated: This getter is maintained for compatibility purposes. Use the `EMISSION_MANAGER()` function instead.",
        "returns": {
          "_0": "The address of the EmissionManager"
        }
      },
      "getRewardOracle(address)": {
        "details": "Get the price aggregator oracle address",
        "params": {
          "reward": "The address of the reward"
        },
        "returns": {
          "_0": "The price oracle of the reward"
        }
      },
      "getRewardsByAsset(address)": {
        "details": "Returns the list of available reward token addresses of an incentivized asset",
        "params": {
          "asset": "The incentivized asset"
        },
        "returns": {
          "_0": "List of rewards addresses of the input asset*"
        }
      },
      "getRewardsData(address,address)": {
        "details": "Returns the configuration of the distribution reward for a certain asset",
        "params": {
          "asset": "The incentivized asset",
          "reward": "The reward token of the incentivized asset"
        },
        "returns": {
          "_0": "The index of the asset distribution",
          "_1": "The emission per second of the reward distribution",
          "_2": "The timestamp of the last update of the index",
          "_3": "The timestamp of the distribution end*"
        }
      },
      "getRewardsList()": {
        "details": "Returns the list of available reward addresses",
        "returns": {
          "_0": "List of rewards supported in this contract*"
        }
      },
      "getTransferStrategy(address)": {
        "details": "Returns the Transfer Strategy implementation contract address being used for a reward address",
        "params": {
          "reward": "The address of the reward"
        },
        "returns": {
          "_0": "The address of the TransferStrategy contract"
        }
      },
      "getUserAccruedRewards(address,address)": {
        "details": "Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.",
        "params": {
          "reward": "The address of the reward token",
          "user": "The address of the user"
        },
        "returns": {
          "_0": "Unclaimed rewards, not including new distributions*"
        }
      },
      "getUserAssetIndex(address,address,address)": {
        "details": "Returns the index of a user on a reward distribution",
        "params": {
          "asset": "The incentivized asset",
          "reward": "The reward token of the incentivized asset",
          "user": "Address of the user"
        },
        "returns": {
          "_0": "The current user asset index, not including new distributions*"
        }
      },
      "getUserRewards(address[],address,address)": {
        "details": "Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.",
        "params": {
          "assets": "List of incentivized assets to check eligible distributions",
          "reward": "The address of the reward token",
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The rewards amount*"
        }
      },
      "handleAction(address,uint256,uint256)": {
        "details": "Called by the corresponding asset on transfer hook in order to update the rewards distribution.The units of `totalSupply` and `userBalance` should be the same.",
        "params": {
          "totalSupply": "The total supply of the asset prior to user balance change",
          "user": "The address of the user whose asset balance has changed",
          "userBalance": "The previous user balance prior to balance change*"
        }
      },
      "initialize(address)": {
        "details": "Initialize for RewardsControllerIt expects an address as argument since its initialized via PoolAddressesProvider._updateImpl()*"
      },
      "setClaimer(address,address)": {
        "details": "Whitelists an address to claim the rewards on behalf of another address",
        "params": {
          "claimer": "The address of the claimer",
          "user": "The address of the user"
        }
      },
      "setDistributionEnd(address,address,uint32)": {
        "details": "Sets the end date for the distribution",
        "params": {
          "asset": "The asset to incentivize",
          "newDistributionEnd": "The end date of the incentivization, in unix time format*",
          "reward": "The reward token that incentives the asset"
        }
      },
      "setEmissionPerSecond(address,address[],uint88[])": {
        "details": "Sets the emission per second of a set of reward distributions",
        "params": {
          "asset": "The asset is being incentivized",
          "newEmissionsPerSecond": "List of new reward emissions per second",
          "rewards": "List of reward addresses are being distributed"
        }
      },
      "setRewardOracle(address,address)": {
        "details": "Sets an HopeLend Oracle contract to enforce rewards with a source of value.",
        "params": {
          "reward": "The address of the reward to set the price aggregator",
          "rewardOracle": "The address of price aggregator that follows IEACAggregatorProxy interface"
        }
      },
      "setTransferStrategy(address,address)": {
        "details": "Sets a TransferStrategy logic contract that determines the logic of the rewards transfer",
        "params": {
          "reward": "The address of the reward token",
          "transferStrategy": "The address of the TransferStrategy logic contract"
        }
      }
    },
    "title": "RewardsController",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setRewardOracle(address,address)": {
        "notice": "At the moment of reward configuration, the Incentives Controller performs a check to see if the reward asset oracle is compatible with IEACAggregator proxy. This check is enforced for integrators to be able to show incentives at the current HopeLend UI without the need to setup an external price registry"
      }
    },
    "notice": "Abstract contract template to build Distributors contracts for ERC20 rewards to protocol participants",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 43531,
        "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_emissionManager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 43536,
        "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_assets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(AssetData)45575_storage)"
      },
      {
        "astId": 43540,
        "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_isRewardEnabled",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 43543,
        "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_rewardsList",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 43546,
        "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_assetsList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21392,
        "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 21395,
        "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
        "label": "initializing",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 21465,
        "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
        "label": "______gap",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 42515,
        "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_authorizedClaimers",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 42520,
        "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_transferStrategy",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_contract(ITransferStrategyBase)45512)"
      },
      {
        "astId": 42525,
        "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_rewardOracle",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_contract(IEACAggregatorProxy)41756)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IEACAggregatorProxy)41756": {
        "encoding": "inplace",
        "label": "contract IEACAggregatorProxy",
        "numberOfBytes": "20"
      },
      "t_contract(ITransferStrategyBase)45512": {
        "encoding": "inplace",
        "label": "contract ITransferStrategyBase",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(IEACAggregatorProxy)41756)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IEACAggregatorProxy)",
        "numberOfBytes": "32",
        "value": "t_contract(IEACAggregatorProxy)41756"
      },
      "t_mapping(t_address,t_contract(ITransferStrategyBase)45512)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract ITransferStrategyBase)",
        "numberOfBytes": "32",
        "value": "t_contract(ITransferStrategyBase)45512"
      },
      "t_mapping(t_address,t_struct(AssetData)45575_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDataTypes.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)45575_storage"
      },
      "t_mapping(t_address,t_struct(RewardData)45561_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDataTypes.RewardData)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardData)45561_storage"
      },
      "t_mapping(t_address,t_struct(UserData)45547_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDataTypes.UserData)",
        "numberOfBytes": "32",
        "value": "t_struct(UserData)45547_storage"
      },
      "t_mapping(t_uint128,t_address)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AssetData)45575_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDataTypes.AssetData",
        "members": [
          {
            "astId": 45566,
            "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
            "label": "rewards",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(RewardData)45561_storage)"
          },
          {
            "astId": 45570,
            "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
            "label": "availableRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint128,t_address)"
          },
          {
            "astId": 45572,
            "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
            "label": "availableRewardsCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 45574,
            "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
            "label": "decimals",
            "offset": 16,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardData)45561_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDataTypes.RewardData",
        "members": [
          {
            "astId": 45549,
            "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 45551,
            "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
            "label": "emissionPerSecond",
            "offset": 13,
            "slot": "0",
            "type": "t_uint88"
          },
          {
            "astId": 45553,
            "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
            "label": "lastUpdateTimestamp",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 45555,
            "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
            "label": "distributionEnd",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 45560,
            "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
            "label": "usersData",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(UserData)45547_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserData)45547_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDataTypes.UserData",
        "members": [
          {
            "astId": 45544,
            "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 45546,
            "contract": "lend-periphery/contracts/rewards/RewardsController.sol:RewardsController",
            "label": "accrued",
            "offset": 13,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      }
    }
  }
}