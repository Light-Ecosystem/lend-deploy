{
  "address": "0x8c931022Ba091Fc71A5Ba5FcE3B644D91A3fECC0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromUser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toUser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BorrowAllowanceDelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "debtTokenDecimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "debtTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "debtTokenSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originalBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "workingBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "workingSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingTotal",
          "type": "uint256"
        }
      ],
      "name": "UpdateLiquidityLimit",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEBT_TOKEN_REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELEGATION_WITH_SIG_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_REVISION",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNDERLYING_ASSET_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveDelegation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromUser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toUser",
          "type": "address"
        }
      ],
      "name": "borrowAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allocation",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "period",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "periodTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prevFutureEpoch",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.CheckPointParameters",
          "name": "_st",
          "type": "tuple"
        }
      ],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IGaugeController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegationWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPreviousIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getScaledUserBalanceAndSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "historyGaugeRelativeWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "initializingPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "debtTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "debtTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "debtTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "integrateCheckpointOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "integrateFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "integrateInvSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingGauge",
      "outputs": [
        {
          "internalType": "contract ILendingGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "lpBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "scaledBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scaledTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lendingGauge",
          "type": "address"
        }
      ],
      "name": "setLendingGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "updateLiquidityLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingEscrow",
      "outputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "workingBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "a7aa37fda43f044bb98bf2062856f6b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowAllowanceDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"debtTokenDecimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"debtTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"debtTokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"workingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"workingSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingTotal\",\"type\":\"uint256\"}],\"name\":\"UpdateLiquidityLimit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEBT_TOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATION_WITH_SIG_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toUser\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocation\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevFutureEpoch\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.CheckPointParameters\",\"name\":\"_st\",\"type\":\"tuple\"}],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegationWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPreviousIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyGaugeRelativeWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"initializingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"debtTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"debtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"debtTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"integrateCheckpointOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"integrateFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"integrateInvSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingGauge\",\"outputs\":[{\"internalType\":\"contract ILendingGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"lpBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingGauge\",\"type\":\"address\"}],\"name\":\"setLendingGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateLiquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workingBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"HopeLend\",\"details\":\"Transfer and approve functionalities are disabled since its a non-transferable token\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Return cached value if chainId matches cache, otherwise recomputes separator\",\"returns\":{\"_0\":\"The domain separator of the token at current chain\"}},\"UNDERLYING_ASSET_ADDRESS()\":{\"returns\":{\"_0\":\"The address of the underlying asset\"}},\"approveDelegation(address,uint256)\":{\"params\":{\"amount\":\"The maximum amount being delegated.\",\"delegatee\":\"The address receiving the delegated borrowing power\"}},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"borrowAllowance(address,address)\":{\"params\":{\"fromUser\":\"The user to giving allowance\",\"toUser\":\"The user to give allowance to\"},\"returns\":{\"_0\":\"The current allowance of `toUser`\"}},\"burn(address,uint256,uint256)\":{\"details\":\"In some instances, a burn transaction will emit a mint event if the amount to burn is less than the interest that the user accrued\",\"params\":{\"amount\":\"The amount getting burned\",\"from\":\"The address from which the debt will be burned\",\"index\":\"The variable debt index of the reserve\"},\"returns\":{\"_0\":\"The scaled total debt of the reserve\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"pool\":\"The address of the Pool contract\"}},\"delegationWithSig(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp, type(uint256).max for max deadline\",\"delegatee\":\"The delegatee that can use the credit\",\"delegator\":\"The delegator of the credit\",\"r\":\"The R signature param\",\"s\":\"The S signature param\",\"v\":\"The V signature param\",\"value\":\"The amount to be delegated\"}},\"getPreviousIndex(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The last index interest was accrued to the user's balance, expressed in ray\"}},\"getScaledUserBalanceAndSupply(address)\":{\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The scaled balance of the user\",\"_1\":\"The scaled total supply\"}},\"initialize(address,address,uint8,string,string,bytes)\":{\"params\":{\"debtTokenDecimals\":\"The decimals of the debtToken, same as the underlying asset's\",\"debtTokenName\":\"The name of the token\",\"debtTokenSymbol\":\"The symbol of the token\",\"params\":\"A set of encoded parameters for additional initialization\",\"pool\":\"The pool contract that is initializing this contract\",\"underlyingAsset\":\"The address of the underlying asset of this hToken (E.g. WETH for hWETH)\"}},\"mint(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of debt being minted\",\"index\":\"The variable debt index of the reserve\",\"onBehalfOf\":\"The address receiving the debt tokens\",\"user\":\"The address receiving the borrowed underlying, being the delegatee in case of credit delegate, or same as `onBehalfOf` otherwise\"},\"returns\":{\"_0\":\"True if the previous balance of the user is 0, false otherwise\",\"_1\":\"The scaled total debt of the reserve\"}},\"nonces(address)\":{\"params\":{\"owner\":\"The address for which the nonce is being returned\"},\"returns\":{\"_0\":\"The nonce value for the input address`\"}},\"scaledBalanceOf(address)\":{\"details\":\"The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index at the moment of the update\",\"params\":{\"user\":\"The user whose balance is calculated\"},\"returns\":{\"_0\":\"The scaled balance of the user\"}},\"scaledTotalSupply()\":{\"returns\":{\"_0\":\"The scaled total supply\"}},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Being non transferrable, the debt token does not implement any of the standard ERC20 functions for transfer and allowance.\"}},\"title\":\"VariableDebtToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Get the domain separator for the token\"},\"UNDERLYING_ASSET_ADDRESS()\":{\"notice\":\"Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\"},\"approveDelegation(address,uint256)\":{\"notice\":\"Delegates borrowing power to a user on the specific debt token. Delegation will still respect the liquidation constraints (even if delegated, a delegatee cannot force a delegator HF to go below 1)\"},\"borrowAllowance(address,address)\":{\"notice\":\"Returns the borrow allowance of the user\"},\"burn(address,uint256,uint256)\":{\"notice\":\"Burns user variable debt\"},\"delegationWithSig(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates borrowing power to a user on the specific debt token via ERC712 signature\"},\"getPreviousIndex(address)\":{\"notice\":\"Returns last index interest was accrued to the user's balance\"},\"getScaledUserBalanceAndSupply(address)\":{\"notice\":\"Returns the scaled balance of the user and the scaled total supply.\"},\"initialize(address,address,uint8,string,string,bytes)\":{\"notice\":\"Initializes the debt token.\"},\"mint(address,address,uint256,uint256)\":{\"notice\":\"Mints debt token to the `onBehalfOf` address\"},\"nonces(address)\":{\"notice\":\"Returns the nonce value for address specified as parameter\"},\"scaledBalanceOf(address)\":{\"notice\":\"Returns the scaled balance of the user.\"},\"scaledTotalSupply()\":{\"notice\":\"Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\"}},\"notice\":\"Implements a variable debt token to track the borrowing positions of users at variable rate mode\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lend-core/contracts/protocol/tokenization/VariableDebtToken.sol\":\"VariableDebtToken\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"lend-core/contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return payable(msg.sender);\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x718d68d9ba5ae2eefd635e13acee792210ac7a7840139234c4c23de2b1870895\",\"license\":\"MIT\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xaab45993655e2e30909010506e0a120338362676a4047bb936c300a06297cc0f\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0aca3719153dfa4191414080c7aa8d43f20a0dd206e89c3a38e3fb0e0c306de1\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc26ff3a051d531ade6d9683c86c923b988eb921067c4673feaa98a7ea899af10\",\"license\":\"MIT\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n  /**\\n   * @dev Returns the downcasted uint224 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint224).\\n   *\\n   * Counterpart to Solidity's `uint224` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 224 bits\\n   */\\n  function toUint224(uint256 value) internal pure returns (uint224) {\\n    require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    return uint224(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint128 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint128).\\n   *\\n   * Counterpart to Solidity's `uint128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   */\\n  function toUint128(uint256 value) internal pure returns (uint128) {\\n    require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    return uint128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint96 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint96).\\n   *\\n   * Counterpart to Solidity's `uint96` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 96 bits\\n   */\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\n    require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    return uint96(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint64 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint64).\\n   *\\n   * Counterpart to Solidity's `uint64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   */\\n  function toUint64(uint256 value) internal pure returns (uint64) {\\n    require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    return uint64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint32 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint32).\\n   *\\n   * Counterpart to Solidity's `uint32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   */\\n  function toUint32(uint256 value) internal pure returns (uint32) {\\n    require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    return uint32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint16 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint16).\\n   *\\n   * Counterpart to Solidity's `uint16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   */\\n  function toUint16(uint256 value) internal pure returns (uint16) {\\n    require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    return uint16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint8 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint8).\\n   *\\n   * Counterpart to Solidity's `uint8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   */\\n  function toUint8(uint256 value) internal pure returns (uint8) {\\n    require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    return uint8(value);\\n  }\\n\\n  /**\\n   * @dev Converts a signed int256 into an unsigned uint256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be greater than or equal to 0.\\n   */\\n  function toUint256(int256 value) internal pure returns (uint256) {\\n    require(value >= 0, 'SafeCast: value must be positive');\\n    return uint256(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int128 from int256, reverting on\\n   * overflow (when the input is less than smallest int128 or\\n   * greater than largest int128).\\n   *\\n   * Counterpart to Solidity's `int128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt128(int256 value) internal pure returns (int128) {\\n    require(\\n      value >= type(int128).min && value <= type(int128).max,\\n      \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n    );\\n    return int128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int64 from int256, reverting on\\n   * overflow (when the input is less than smallest int64 or\\n   * greater than largest int64).\\n   *\\n   * Counterpart to Solidity's `int64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt64(int256 value) internal pure returns (int64) {\\n    require(\\n      value >= type(int64).min && value <= type(int64).max,\\n      \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n    );\\n    return int64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int32 from int256, reverting on\\n   * overflow (when the input is less than smallest int32 or\\n   * greater than largest int32).\\n   *\\n   * Counterpart to Solidity's `int32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt32(int256 value) internal pure returns (int32) {\\n    require(\\n      value >= type(int32).min && value <= type(int32).max,\\n      \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n    );\\n    return int32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int16 from int256, reverting on\\n   * overflow (when the input is less than smallest int16 or\\n   * greater than largest int16).\\n   *\\n   * Counterpart to Solidity's `int16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt16(int256 value) internal pure returns (int16) {\\n    require(\\n      value >= type(int16).min && value <= type(int16).max,\\n      \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n    );\\n    return int16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int8 from int256, reverting on\\n   * overflow (when the input is less than smallest int8 or\\n   * greater than largest int8).\\n   *\\n   * Counterpart to Solidity's `int8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt8(int256 value) internal pure returns (int8) {\\n    require(\\n      value >= type(int8).min && value <= type(int8).max,\\n      \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n    );\\n    return int8(value);\\n  }\\n\\n  /**\\n   * @dev Converts an unsigned uint256 into a signed int256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be less than or equal to maxInt256.\\n   */\\n  function toInt256(uint256 value) internal pure returns (int256) {\\n    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n    require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n    return int256(value);\\n  }\\n}\\n\",\"keccak256\":\"0x07e49e2bdfefb9f414444bd6be012b1e07b1f2a56d6a3fca5ab3f5733dd8abd0\",\"license\":\"MIT\"},\"lend-core/contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IACLManager\\n * @author HopeLend\\n * @notice Defines the basic interface for the ACL Manager\\n */\\ninterface IACLManager {\\n  /**\\n   * @notice Returns the contract address of the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Returns the identifier of the PoolAdmin role\\n   * @return The id of the PoolAdmin role\\n   */\\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the EmergencyAdmin role\\n   * @return The id of the EmergencyAdmin role\\n   */\\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the RiskAdmin role\\n   * @return The id of the RiskAdmin role\\n   */\\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the FlashBorrower role\\n   * @return The id of the FlashBorrower role\\n   */\\n  function FLASH_BORROWER_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the Bridge role\\n   * @return The id of the Bridge role\\n   */\\n  function BRIDGE_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the AssetListingAdmin role\\n   * @return The id of the AssetListingAdmin role\\n   */\\n  function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Set the role as admin of a specific role.\\n   * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n   * @param role The role to be managed by the admin role\\n   * @param adminRole The admin role\\n   */\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n  /**\\n   * @notice Adds a new admin as PoolAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addPoolAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as PoolAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removePoolAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is PoolAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is PoolAdmin, false otherwise\\n   */\\n  function isPoolAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as EmergencyAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as EmergencyAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is EmergencyAdmin, false otherwise\\n   */\\n  function isEmergencyAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as RiskAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addRiskAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as RiskAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeRiskAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is RiskAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is RiskAdmin, false otherwise\\n   */\\n  function isRiskAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new address as FlashBorrower\\n   * @param borrower The address of the new FlashBorrower\\n   */\\n  function addFlashBorrower(address borrower) external;\\n\\n  /**\\n   * @notice Removes an address as FlashBorrower\\n   * @param borrower The address of the FlashBorrower to remove\\n   */\\n  function removeFlashBorrower(address borrower) external;\\n\\n  /**\\n   * @notice Returns true if the address is FlashBorrower, false otherwise\\n   * @param borrower The address to check\\n   * @return True if the given address is FlashBorrower, false otherwise\\n   */\\n  function isFlashBorrower(address borrower) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new address as Bridge\\n   * @param bridge The address of the new Bridge\\n   */\\n  function addBridge(address bridge) external;\\n\\n  /**\\n   * @notice Removes an address as Bridge\\n   * @param bridge The address of the bridge to remove\\n   */\\n  function removeBridge(address bridge) external;\\n\\n  /**\\n   * @notice Returns true if the address is Bridge, false otherwise\\n   * @param bridge The address to check\\n   * @return True if the given address is Bridge, false otherwise\\n   */\\n  function isBridge(address bridge) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as AssetListingAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addAssetListingAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as AssetListingAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeAssetListingAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is AssetListingAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is AssetListingAdmin, false otherwise\\n   */\\n  function isAssetListingAdmin(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x26a68bad4080948b82a2203696c711ceeeb5e7bbcfd222856555ab9ae5d60e98\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IAbsGauge.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {ILendingGauge} from './ILendingGauge.sol';\\n\\n/**\\n * @title IAbsGauge\\n * @author HopeLend\\n * @notice Defines the basic interface for AbsGauge.\\n */\\ninterface IAbsGauge {\\n  function lendingGauge() external view returns (ILendingGauge);\\n}\\n\",\"keccak256\":\"0xafbed0fa6cdc53f1e721353b10f8ed40b18b52ea8ea6d5bbaed29b6490fed101\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/ICreditDelegationToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title ICreditDelegationToken\\n * @author HopeLend\\n * @notice Defines the basic interface for a token supporting credit delegation.\\n */\\ninterface ICreditDelegationToken {\\n  /**\\n   * @dev Emitted on `approveDelegation` and `borrowAllowance\\n   * @param fromUser The address of the delegator\\n   * @param toUser The address of the delegatee\\n   * @param asset The address of the delegated asset\\n   * @param amount The amount being delegated\\n   */\\n  event BorrowAllowanceDelegated(\\n    address indexed fromUser,\\n    address indexed toUser,\\n    address indexed asset,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @notice Delegates borrowing power to a user on the specific debt token.\\n   * Delegation will still respect the liquidation constraints (even if delegated, a\\n   * delegatee cannot force a delegator HF to go below 1)\\n   * @param delegatee The address receiving the delegated borrowing power\\n   * @param amount The maximum amount being delegated.\\n   */\\n  function approveDelegation(address delegatee, uint256 amount) external;\\n\\n  /**\\n   * @notice Returns the borrow allowance of the user\\n   * @param fromUser The user to giving allowance\\n   * @param toUser The user to give allowance to\\n   * @return The current allowance of `toUser`\\n   */\\n  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);\\n\\n  /**\\n   * @notice Delegates borrowing power to a user on the specific debt token via ERC712 signature\\n   * @param delegator The delegator of the credit\\n   * @param delegatee The delegatee that can use the credit\\n   * @param value The amount to be delegated\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n   * @param v The V signature param\\n   * @param s The S signature param\\n   * @param r The R signature param\\n   */\\n  function delegationWithSig(\\n    address delegator,\\n    address delegatee,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\",\"keccak256\":\"0x030ddb2f0e85860a2d0ba2025d946d7e72968a941d9f0b1d6673d920b97789aa\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\n\\ninterface IGaugeController {\\n    struct Point {\\n        uint256 bias;\\n        uint256 slope;\\n    }\\n\\n    struct VotedSlope {\\n        uint256 slope;\\n        uint256 power;\\n        uint256 end;\\n    }\\n\\n    struct UserPoint {\\n        uint256 bias;\\n        uint256 slope;\\n        uint256 ts;\\n        uint256 blk;\\n    }\\n\\n    event AddType(string name, int128 type_id);\\n\\n    event NewTypeWeight(int128 indexed type_id, uint256 time, uint256 weight, uint256 total_weight);\\n\\n    event NewGaugeWeight(address indexed gauge_address, uint256 time, uint256 weight, uint256 total_weight);\\n\\n    event VoteForGauge(address indexed user, address indexed gauge_address, uint256 time, uint256 weight);\\n\\n    event NewGauge(address indexed gauge_address, int128 gauge_type, uint256 weight);\\n\\n    /**\\n     * @notice Get gauge type for address\\n     *  @param _addr Gauge address\\n     * @return Gauge type id\\n     */\\n    function gaugeTypes(address _addr) external view returns (int128);\\n\\n    /**\\n     * @notice Add gauge `addr` of type `gauge_type` with weight `weight`\\n     * @param addr Gauge address\\n     * @param gaugeType Gauge type\\n     * @param weight Gauge weight\\n     */\\n    function addGauge(address addr, int128 gaugeType, uint256 weight) external;\\n\\n    /**\\n     * @notice Checkpoint to fill data common for all gauges\\n     */\\n    function checkpoint() external;\\n\\n    /**\\n     * @notice Checkpoint to fill data for both a specific gauge and common for all gauge\\n     * @param addr Gauge address\\n     */\\n    function checkpointGauge(address addr) external;\\n\\n    /**\\n     * @notice Get Gauge relative weight (not more than 1.0) normalized to 1e18(e.g. 1.0 == 1e18). Inflation which will be received by\\n     * it is inflation_rate * relative_weight / 1e18\\n     * @param gaugeAddress Gauge address\\n     * @param time Relative weight at the specified timestamp in the past or present\\n     * @return Value of relative weight normalized to 1e18\\n     */\\n    function gaugeRelativeWeight(address gaugeAddress, uint256 time) external view returns (uint256);\\n\\n    /**\\n     *  @notice Get gauge weight normalized to 1e18 and also fill all the unfilled values for type and gauge records\\n     * @dev Any address can call, however nothing is recorded if the values are filled already\\n     * @param gaugeAddress Gauge address\\n     * @param time Relative weight at the specified timestamp in the past or present\\n     * @return Value of relative weight normalized to 1e18\\n     */\\n    function gaugeRelativeWeightWrite(address gaugeAddress, uint256 time) external returns (uint256);\\n\\n    /**\\n     * @notice Add gauge type with name `_name` and weight `weight`\\n     * @dev only owner call\\n     * @param _name Name of gauge type\\n     * @param weight Weight of gauge type\\n     */\\n    function addType(string memory _name, uint256 weight) external;\\n\\n    /**\\n     * @notice Change gauge type `type_id` weight to `weight`\\n     * @dev only owner call\\n     * @param type_id Gauge type id\\n     * @param weight New Gauge weight\\n     */\\n    function changeTypeWeight(int128 type_id, uint256 weight) external;\\n\\n    /**\\n     * @notice Change weight of gauge `addr` to `weight`\\n     * @param gaugeAddress `Gauge` contract address\\n     * @param weight New Gauge weight\\n     */\\n    function changeGaugeWeight(address gaugeAddress, uint256 weight) external;\\n\\n    /**\\n     * @notice Allocate voting power for changing pool weights\\n     * @param gaugeAddress Gauge which `msg.sender` votes for\\n     * @param userWeight Weight for a gauge in bps (units of 0.01%). Minimal is 0.01%. Ignored if 0.\\n     *        example: 10%=1000,3%=300,0.01%=1,100%=10000\\n     */\\n    function voteForGaugeWeights(address gaugeAddress, uint256 userWeight) external;\\n\\n    /**\\n     * @notice Get current gauge weight\\n     * @param addr Gauge address\\n     * @return Gauge weight\\n     */\\n\\n    function getGaugeWeight(address addr) external view returns (uint256);\\n\\n    /**\\n     * @notice Get current type weight\\n     * @param type_id Type id\\n     * @return Type weight\\n     */\\n    function getTypeWeight(int128 type_id) external view returns (uint256);\\n\\n    /**\\n     * @notice Get current total (type-weighted) weight\\n     * @return Total weight\\n     */\\n    function getTotalWeight() external view returns (uint256);\\n\\n    /**\\n     * @notice Get sum of gauge weights per type\\n     * @param type_id Type id\\n     * @return Sum of gauge weights\\n     */\\n    function getWeightsSumPreType(int128 type_id) external view returns (uint256);\\n\\n    function votingEscrow() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2ad7cc0ae48ada235c39fc2337734bc4ddf772a8d0fd67c6cbb677126be5dc73\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableDebtToken\\n * @author HopeLend\\n * @notice Interface for the initialize function common between debt tokens\\n */\\ninterface IInitializableDebtToken {\\n  /**\\n   * @dev Emitted when a debt token is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param debtTokenDecimals The decimals of the debt token\\n   * @param debtTokenName The name of the debt token\\n   * @param debtTokenSymbol The symbol of the debt token\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    uint8 debtTokenDecimals,\\n    string debtTokenName,\\n    string debtTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the debt token.\\n   * @param pool The pool contract that is initializing this contract\\n   * @param underlyingAsset The address of the underlying asset of this hToken (E.g. WETH for hWETH)\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n   * @param debtTokenName The name of the token\\n   * @param debtTokenSymbol The symbol of the token\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address underlyingAsset,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb167242507f7e67e330f44dd0e638e5c4263d698d82685cd6aab195464f3c120\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/ILT.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\n\\ninterface ILT {\\n    /**\\n     * @dev Emitted when LT inflation rate update\\n     *\\n     * Note once a year\\n     */\\n    event UpdateMiningParameters(uint256 time, uint256 rate, uint256 supply);\\n\\n    /**\\n     * @dev Emitted when set LT minter,can set the minter only once, at creation\\n     */\\n    event SetMinter(address indexed minter);\\n\\n    function rate() external view returns (uint256);\\n\\n    /**\\n     * @notice Update mining rate and supply at the start of the epoch\\n     * @dev   Callable by any address, but only once per epoch\\n     *        Total supply becomes slightly larger if this function is called late\\n     */\\n    function updateMiningParameters() external;\\n\\n    /**\\n     * @notice Get timestamp of the next mining epoch start while simultaneously updating mining parameters\\n     * @return Timestamp of the next epoch\\n     */\\n    function futureEpochTimeWrite() external returns (uint256);\\n\\n    /**\\n     * @notice Current number of tokens in existence (claimed or unclaimed)\\n     */\\n    function availableSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice How much supply is mintable from start timestamp till end timestamp\\n     * @param start Start of the time interval (timestamp)\\n     * @param end End of the time interval (timestamp)\\n     * @return Tokens mintable from `start` till `end`\\n     */\\n    function mintableInTimeframe(uint256 start, uint256 end) external view returns (uint256);\\n\\n    /**\\n     *  @notice Set the minter address\\n     *  @dev Only callable once, when minter has not yet been set\\n     *  @param _minter Address of the minter\\n     */\\n    function setMinter(address _minter) external;\\n\\n    /**\\n     *  @notice Mint `value` tokens and assign them to `to`\\n     *   @dev Emits a Transfer event originating from 0x00\\n     *   @param to The account that will receive the created tokens\\n     *   @param value The amount that will be created\\n     *   @return bool success\\n     */\\n    function mint(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @notice Burn `value` tokens belonging to `msg.sender`\\n     * @dev Emits a Transfer event with a destination of 0x00\\n     * @param value The amount that will be burned\\n     * @return bool success\\n     */\\n    function burn(uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5d76c16bf5bc36c059bc40f6f16499ded973a07ff4cdc944e486f7d3965a73a9\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/ILendingGauge.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport './ILT.sol';\\nimport './IGaugeController.sol';\\nimport './IVotingEscrow.sol';\\nimport './IMinter.sol';\\nimport '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingGauge {\\n  /**\\n   * @dev Emitted when LendingGauge is created.\\n   * @param addressesProvider The address of the registered PoolAddressesProvider\\n   * @param assset The address of the underlying asset of the reserve\\n   * @param _phases Utilization rate and allocation ratio parameter configuration\\n   */\\n  event AddPhases(address indexed addressesProvider, address indexed assset, DataTypes.Phase[] _phases);\\n\\n  function initialize(\\n    address _pool,\\n    address _minter,\\n    address _votingEscrow,\\n    address _underlyingAsset\\n  ) external;\\n\\n  function votingEscrow() external view returns (IVotingEscrow);\\n\\n  function controller() external view returns (IGaugeController);\\n\\n  function minter() external view returns (IMinter);\\n\\n  function updateAllocation() external returns (bool);\\n\\n  function isKilled() external returns (bool);\\n\\n  function hvCheckpoint(address _addr) external;\\n\\n  function hvUpdateLiquidityLimit(address _addr) external;\\n}\\n\",\"keccak256\":\"0x77252bef599685bee767d47059cd2992d43e1bea42e59f5ec729386d90cfac05\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IMinter {\\n    function token() external view returns (address);\\n\\n    function controller() external view returns (address);\\n\\n    function minted(address user, address gauge) external view returns (uint256);\\n\\n    function mint(address gaugeAddress) external;\\n}\\n\",\"keccak256\":\"0xed25776681be143c0de2df9b95f3a46f392f4e26db10824fa9761113c79763c0\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author HopeLend\\n * @notice Defines the basic interface for an HopeLend Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the hTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the hTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of hTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useHTokens True if the repayment is done using hTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useHTokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveHToken True if the liquidators wants to receive the collateral hTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveHToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted hTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of hTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the hTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying hTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the hTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of hTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the hTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of hTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent hTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole hToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve hTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual hToken dust balance, if the user hToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithHTokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveHToken True if the liquidators wants to receive the collateral hTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveHToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.hopeLend.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.hopeLend.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an hToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param hTokenAddress The address of the hToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address hTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an hToken transfer\\n   * @dev Only callable by the overlying hToken of the `asset`\\n   * @param asset The address of the underlying asset of the hToken\\n   * @param from The user from which the hTokens are transferred\\n   * @param to The user receiving the hTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The hToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The hToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to hToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Updates the percent fo fee to Vault.\\n   * @param feeToVaultPercent The percent fo fee to Vault. 100% = 1e4\\n   */\\n  function updateFeeToVaultPercent(uint256 feeToVaultPercent) external;\\n\\n    /**\\n   * @notice Returns the percent of fee\\n   * @return feeToVaultPercent The the percent of fee, 100% = 1e4\\n   */\\n  function getFeeToVaultPercent() external view returns (uint256 feeToVaultPercent);\\n\\n  /**\\n   * @notice Returns the address of vault\\n   * @return feeToVault The the address of vault\\n   */\\n  function getFeeToVault() external view returns (address feeToVault);\\n\\n  /**\\n   * @notice Set the address of vault\\n   * @param feeToVault The id of the category\\n   */\\n  function setFeeToVault(address feeToVault) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of hTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying hTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the hTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of hTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc19137da96d8db950726e37ab4ac16f10939f61a2bf119dc4f7a5cf286ed6943\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author HopeLend\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the HopeLend market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple HopeLend markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x38f1da33df9b0e41408d012e128a385ffe79ab22431815fe1e8ce3e77caa5312\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author HopeLend\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted tokens\\n   * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Mint(\\n    address indexed caller,\\n    address indexed onBehalfOf,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted after the burn action\\n   * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n   * @param from The address from which the tokens will be burned\\n   * @param target The address that will receive the underlying, if any\\n   * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Burn(\\n    address indexed from,\\n    address indexed target,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @notice Returns the scaled balance of the user.\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n   * at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   */\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled total supply\\n   */\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   */\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns last index interest was accrued to the user's balance\\n   * @param user The address of the user\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\n   */\\n  function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x434eb17cb12dcfbb562a5be9a811f2c71672ed96e79c5ff1b7e0c9e53dcca19b\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableDebtToken} from './IInitializableDebtToken.sol';\\n\\n/**\\n * @title IVariableDebtToken\\n * @author HopeLend\\n * @notice Defines the basic interface for a variable debt token.\\n */\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n  /**\\n   * @notice Mints debt token to the `onBehalfOf` address\\n   * @param user The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `onBehalfOf` otherwise\\n   * @param onBehalfOf The address receiving the debt tokens\\n   * @param amount The amount of debt being minted\\n   * @param index The variable debt index of the reserve\\n   * @return True if the previous balance of the user is 0, false otherwise\\n   * @return The scaled total debt of the reserve\\n   */\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool, uint256);\\n\\n  /**\\n   * @notice Burns user variable debt\\n   * @dev In some instances, a burn transaction will emit a mint event\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the debt will be burned\\n   * @param amount The amount getting burned\\n   * @param index The variable debt index of the reserve\\n   * @return The scaled total debt of the reserve\\n   */\\n  function burn(\\n    address from,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\\n   * @return The address of the underlying asset\\n   */\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x91a13971bbb8d5f8586006b94e6f7d75d56e0916bf2015ff87cc08399518c7c7\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IVotingEscrow {\\n    struct Point {\\n        int256 bias;\\n        int256 slope;\\n        uint256 ts;\\n        uint256 blk;\\n    }\\n\\n    struct LockedBalance {\\n        int256 amount;\\n        uint256 end;\\n    }\\n\\n    event Deposit(\\n        address indexed provider,\\n        address indexed beneficiary,\\n        uint256 value,\\n        uint256 afterAmount,\\n        uint256 indexed locktime,\\n        uint256 _type,\\n        uint256 ts\\n    );\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n\\n    event Supply(uint256 prevSupply, uint256 supply);\\n\\n    event SetSmartWalletChecker(address sender, address indexed newChecker, address oldChecker);\\n\\n    event SetPermit2Address(address oldAddress, address newAddress);\\n\\n    /***\\n     * @dev Get the most recently recorded rate of voting power decrease for `_addr`\\n     * @param _addr Address of the user wallet\\n     * @return Value of the slope\\n     */\\n    function getLastUserSlope(address _addr) external view returns (int256);\\n\\n    /***\\n     * @dev Get the timestamp for checkpoint `_idx` for `_addr`\\n     * @param _addr User wallet address\\n     * @param _idx User epoch number\\n     * @return Epoch time of the checkpoint\\n     */\\n    function userPointHistoryTs(address _addr, uint256 _idx) external view returns (uint256);\\n\\n    /***\\n     * @dev Get timestamp when `_addr`'s lock finishes\\n     * @param _addr User wallet\\n     * @return Epoch time of the lock end\\n     */\\n    function lockedEnd(address _addr) external view returns (uint256);\\n\\n    function createLock(uint256 _value, uint256 _unlockTime, uint256 nonce, uint256 deadline, bytes memory signature) external;\\n\\n    function createLockFor(\\n        address _beneficiary,\\n        uint256 _value,\\n        uint256 _unlockTime,\\n        uint256 nonce,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n\\n    function increaseAmount(uint256 _value, uint256 nonce, uint256 deadline, bytes memory signature) external;\\n\\n    function increaseAmountFor(address _beneficiary, uint256 _value, uint256 nonce, uint256 deadline, bytes memory signature) external;\\n\\n    function increaseUnlockTime(uint256 _unlockTime) external;\\n\\n    function checkpointSupply() external;\\n\\n    function withdraw() external;\\n\\n    function epoch() external view returns (uint256);\\n\\n    function getUserPointHistory(address _userAddress, uint256 _index) external view returns (Point memory);\\n\\n    function supplyPointHistory(uint256 _index) external view returns (int256 bias, int256 slope, uint256 ts, uint256 blk);\\n\\n    /***\\n     * @notice Get the current voting power for `msg.sender`\\n     * @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n     * @param _addr User wallet address\\n     * @param _t Epoch time to return voting power at\\n     * @return User voting power\\n     * @dev return the present voting power if _t is 0\\n     */\\n    function balanceOfAtTime(address _addr, uint256 _t) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalSupplyAtTime(uint256 _t) external view returns (uint256);\\n\\n    function userPointEpoch(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaedac39ee5a1099b6fd2a58f417cd0c8c0891399e1fc73f0a5f636dee861d09b\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/gauge/AbsGauge.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport '../libraries/math/WadRayMath.sol';\\nimport {Math} from '../../dependencies/openzeppelin/contracts/Math.sol';\\nimport {Context} from '../../dependencies/openzeppelin/contracts/Context.sol';\\nimport '../../interfaces/ILT.sol';\\nimport '../../interfaces/IGaugeController.sol';\\nimport '../../interfaces/IVotingEscrow.sol';\\nimport '../../interfaces/IMinter.sol';\\nimport '../../interfaces/ILendingGauge.sol';\\nimport '../../interfaces/IAbsGauge.sol';\\nimport '../libraries/types/DataTypes.sol';\\nimport '../libraries/helpers/Errors.sol';\\n\\nabstract contract AbsGauge is Context, IAbsGauge {\\n  event UpdateLiquidityLimit(\\n    address user,\\n    uint256 originalBalance,\\n    uint256 originalSupply,\\n    uint256 workingBalance,\\n    uint256 workingSupply,\\n    uint256 votingBalance,\\n    uint256 votingTotal\\n  );\\n\\n  uint256 internal constant _TOKENLESS_PRODUCTION = 40;\\n  uint256 internal constant _DAY = 86400;\\n  uint256 internal constant _WEEK = _DAY * 7;\\n\\n  ILendingGauge public lendingGauge;\\n  IGaugeController public controller;\\n  IVotingEscrow public votingEscrow;\\n\\n  mapping(uint256 => uint256) public historyGaugeRelativeWeight;\\n  mapping(address => uint256) public workingBalances;\\n  uint256 public workingSupply;\\n  mapping(address => uint256) public integrateInvSupplyOf;\\n  mapping(address => uint256) public integrateCheckpointOf;\\n  mapping(address => uint256) public integrateFraction; //Mintable Token amount (include minted amount)\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private _initialized;\\n\\n  uint256 private _integrateInvSupply;\\n\\n  /**\\n   * @dev Only pool can call functions marked by this modifier.\\n   */\\n  modifier onlyLendingGauge() {\\n    require(_msgSender() == address(lendingGauge), Errors.CALLER_MUST_BE_LENDING_GAUGE);\\n    _;\\n  }\\n\\n  function _setLendingGauge(address _lendingPoolGuageAddr) internal {\\n    lendingGauge = ILendingGauge(_lendingPoolGuageAddr);\\n    controller = lendingGauge.controller();\\n    votingEscrow = lendingGauge.votingEscrow();\\n  }\\n\\n  /***\\n   * @notice Calculate limits which depend on the amount of lp Token per-user.\\n   *        Effectively it calculates working balances to apply amplification\\n   *        of LT production by LT\\n   * @param _addr User address\\n   * @param _l User's amount of liquidity (LP tokens)\\n   * @param _L Total amount of liquidity (LP tokens)\\n   */\\n  function _updateLiquidityLimit(\\n    address _addr,\\n    uint256 _l,\\n    uint256 _L\\n  ) internal {\\n    // To be called after totalSupply is updated\\n    uint256 _votingBalance = votingEscrow.balanceOfAtTime(_addr, block.timestamp);\\n    uint256 _votingTotal = votingEscrow.totalSupplyAtTime(block.timestamp);\\n\\n    uint256 _lim = (_l * _TOKENLESS_PRODUCTION) / 100;\\n    if (_votingTotal > 0) {\\n      // 0.4 * _l + 0.6 * _L * balance/total\\n      _lim += (_L * _votingBalance * (100 - _TOKENLESS_PRODUCTION)) / _votingTotal / 100;\\n    }\\n\\n    _lim = Math.min(_l, _lim);\\n    uint256 _oldBal = workingBalances[_addr];\\n    workingBalances[_addr] = _lim;\\n    uint256 _workingSupply = workingSupply + _lim - _oldBal;\\n    workingSupply = _workingSupply;\\n\\n    emit UpdateLiquidityLimit(_addr, _l, _L, _lim, _workingSupply, _votingBalance, _votingTotal);\\n  }\\n\\n  /***\\n   * @notice Checkpoint for a user\\n   * @param _addr User address\\n   *\\n   *This function does,\\n   *1. Calculate Iis for All: Calc and add Iis for every week. Iis only increses over time.\\n   *2. Calculate Iu for _addr: Calc by (defferece between Iis(last time) and Iis(this time))* LP deposit amount of _addr(include  locking boost)\\n   *\\n   * working_supply & working_balance = total_supply & total_balance with  locking boost\\u3002\\n   * Check whitepaper about Iis and Iu.\\n   */\\n  function _checkpoint(\\n    address _addr,\\n    uint256 _allocation,\\n    DataTypes.CheckPointParameters memory _st\\n  ) internal {\\n    if (block.timestamp > _st.periodTime) {\\n      uint256 _workingSupply = workingSupply;\\n      uint256 _prevWeekTime = _st.periodTime;\\n      uint256 _weekTime = Math.min(((_st.periodTime + _WEEK) / _WEEK) * _WEEK, block.timestamp);\\n      for (uint256 i; i < 500; i++) {\\n        uint256 _dt = _weekTime - _prevWeekTime;\\n        uint256 _preWeekTimeRound = (_prevWeekTime / _WEEK) * _WEEK;\\n        uint256 _w = historyGaugeRelativeWeight[_preWeekTimeRound];\\n        if (_w == 0) {\\n          _w = controller.gaugeRelativeWeight(address(lendingGauge), _preWeekTimeRound);\\n          historyGaugeRelativeWeight[_preWeekTimeRound] = _w;\\n        }\\n        if (_workingSupply > 0) {\\n          if (_st.prevFutureEpoch >= _prevWeekTime && _st.prevFutureEpoch < _weekTime) {\\n            _integrateInvSupply += (_st.rate * _w * _allocation * (_st.prevFutureEpoch - _prevWeekTime)) / _workingSupply / WadRayMath.RAY;\\n            _st.rate = _st.newRate;\\n            _integrateInvSupply += (_st.rate * _w * _allocation * (_weekTime - _st.prevFutureEpoch)) / _workingSupply / WadRayMath.RAY;\\n          } else {\\n            _integrateInvSupply += (_st.rate * _w * _allocation * _dt) / _workingSupply / WadRayMath.RAY;\\n          }\\n        }\\n        if (_weekTime == block.timestamp) {\\n          break;\\n        }\\n        _prevWeekTime = _weekTime;\\n        _weekTime = Math.min(_weekTime + _WEEK, block.timestamp);\\n      }\\n    }\\n    uint256 _workingBalance = workingBalances[_addr];\\n    integrateFraction[_addr] += (_workingBalance * (_integrateInvSupply - integrateInvSupplyOf[_addr])) / 10**18;\\n    integrateInvSupplyOf[_addr] = _integrateInvSupply;\\n    integrateCheckpointOf[_addr] = block.timestamp;\\n  }\\n\\n  function checkpoint(\\n    address _addr,\\n    uint256 _allocation,\\n    DataTypes.CheckPointParameters calldata _st\\n  ) external onlyLendingGauge {\\n    _checkpoint(_addr, _allocation, _st);\\n  }\\n\\n  function updateLiquidityLimit(address _addr) external onlyLendingGauge {\\n    _updateLiquidityLimit(_addr, lpBalanceOf(_addr), lpTotalSupply());\\n  }\\n\\n  /***\\n   * @notice The total amount of LP tokens that are currently deposited into the Gauge.\\n   */\\n  function lpBalanceOf(address _addr) public virtual view returns (uint256);\\n\\n  /***\\n   * @notice The total amount of LP tokens that are currently deposited into the Gauge.\\n   */\\n  function lpTotalSupply() public virtual view returns (uint256);\\n}\\n\",\"keccak256\":\"0x02adbd6223a557f6d8c006c1399e5c2b655c50b4ee260ef01bf718f6b72edbb9\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Errors library\\n * @author HopeLend\\n * @notice Defines the error messages emitted by the different contracts of the HopeLend protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_HTOKEN = '11'; // 'The caller of the function is not an HToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (hToken supply or accruedToTreasury)'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\n  string public constant FAILOVER_ALREADY_ACTIVE = '92'; // Failover is already active\\n  string public constant FAILOVER_ALREADY_DEACTIVATED = '93'; // Failover is already deactivated\\n  string public constant CALLER_MUST_BE_LENDING_GAUGE = '94'; // 'The caller of this function must be a lending gauge'\\n  string public constant PARAMETER_ADDRESS_NOT_ZERO = '95'; // 'Parameter address is not zero'\\n  string public constant LENDING_GAUGE_PERCENTAGE_NOT_MATCH = '96'; // 'LendingGauge end percentage must greater than start percentage && start percentage must be increasing'\\n  string public constant INVALID_PHASES_LENGTH = '97'; // 'LendingGauge phases length invalid'\\n  string public constant PHASES_NOT_DEFINED = '98'; // 'LendingGauge phases not defined'\\n  string public constant MUST_BE_NON_NEGATIVE = '99'; // 'Result must be non-negative'\\n  string public constant INVALID_FEE_TO_VAULT_PERCENT = '100'; // Invalid FeeToVaultPercent \\n}\\n\",\"keccak256\":\"0xe154c34ecd3b9b957750d4b1f48a50ae6b58be3e6ea67566f8a35bf75ce1569f\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/hopelend-upgradeability/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title VersionedInitializable\\n * @author HopeLend, inspired by the OpenZeppelin Initializable contract\\n * @notice Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * @dev WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 private lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(\\n      initializing || isConstructor() || revision > lastInitializedRevision,\\n      'Contract instance has already been initialized'\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      lastInitializedRevision = revision;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the revision number of the contract\\n   * @dev Needs to be defined in the inherited class as a constant.\\n   * @return The revision number\\n   */\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /**\\n   * @notice Returns true if and only if the function is running in the constructor\\n   * @return True if the function is running in the constructor\\n   */\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    uint256 cs;\\n    //solium-disable-next-line\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x6a00e8542181983fcea836469a52a1d9d867527f6c5f06ee5264861fb5065c0a\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title WadRayMath library\\n * @author HopeLend\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary WadRayMath {\\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant HALF_WAD = 0.5e18;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant HALF_RAY = 0.5e27;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a*b, in wad\\n   */\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_WAD), WAD)\\n    }\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a/b, in wad\\n   */\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, WAD), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raymul b\\n   */\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_RAY), RAY)\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raydiv b\\n   */\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, RAY), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @return b = a converted to wad, rounded half up to the nearest wad\\n   */\\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n    assembly {\\n      b := div(a, WAD_RAY_RATIO)\\n      let remainder := mod(a, WAD_RAY_RATIO)\\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n        b := add(b, 1)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @return b = a converted in ray\\n   */\\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n    // to avoid overflow, b/WAD_RAY_RATIO == a\\n    assembly {\\n      b := mul(a, WAD_RAY_RATIO)\\n\\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n        revert(0, 0)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x29a4cb6ebf96b3829c062f42a6b5ab3886b40f2a57d19d60f4aae47de6a08710\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //hToken address\\n    address hTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked hTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address hTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveHToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useHTokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address hToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address hTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n\\n  struct Phase {\\n    uint256 start;\\n    uint256 end;\\n    int256 k;\\n    uint256 b;\\n  }\\n\\n  struct CheckPointParameters {\\n    uint256 period;\\n    uint256 periodTime;\\n    uint256 rate;\\n    uint256 newRate;\\n    uint256 prevFutureEpoch;\\n  }\\n}\\n\",\"keccak256\":\"0x916e79cfe08070ef69e40cc77f5bc7a87aff0e9ed72c657329747d72b89b6d0c\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/tokenization/VariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {SafeCast} from '../../dependencies/openzeppelin/contracts/SafeCast.sol';\\nimport {VersionedInitializable} from '../libraries/hopelend-upgradeability/VersionedInitializable.sol';\\nimport {WadRayMath} from '../libraries/math/WadRayMath.sol';\\nimport {Errors} from '../libraries/helpers/Errors.sol';\\nimport {IPool} from '../../interfaces/IPool.sol';\\nimport {IInitializableDebtToken} from '../../interfaces/IInitializableDebtToken.sol';\\nimport {IVariableDebtToken} from '../../interfaces/IVariableDebtToken.sol';\\nimport {EIP712Base} from './base/EIP712Base.sol';\\nimport {DebtTokenBase} from './base/DebtTokenBase.sol';\\nimport {ScaledBalanceTokenBase} from './base/ScaledBalanceTokenBase.sol';\\n\\n/**\\n * @title VariableDebtToken\\n * @author HopeLend\\n * @notice Implements a variable debt token to track the borrowing positions of users\\n * at variable rate mode\\n * @dev Transfer and approve functionalities are disabled since its a non-transferable token\\n */\\ncontract VariableDebtToken is DebtTokenBase, ScaledBalanceTokenBase, IVariableDebtToken {\\n  using WadRayMath for uint256;\\n  using SafeCast for uint256;\\n\\n  uint256 public constant DEBT_TOKEN_REVISION = 0x1;\\n\\n  /**\\n   * @dev Constructor.\\n   * @param pool The address of the Pool contract\\n   */\\n  constructor(IPool pool) DebtTokenBase() ScaledBalanceTokenBase(pool, 'VARIABLE_DEBT_TOKEN_IMPL', 'VARIABLE_DEBT_TOKEN_IMPL', 0) {\\n    // Intentionally left blank\\n  }\\n\\n  /// @inheritdoc IInitializableDebtToken\\n  function initialize(\\n    IPool initializingPool,\\n    address underlyingAsset,\\n    uint8 debtTokenDecimals,\\n    string memory debtTokenName,\\n    string memory debtTokenSymbol,\\n    bytes calldata params\\n  ) external override initializer {\\n    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);\\n    _setName(debtTokenName);\\n    _setSymbol(debtTokenSymbol);\\n    _setDecimals(debtTokenDecimals);\\n\\n    _underlyingAsset = underlyingAsset;\\n\\n    _domainSeparator = _calculateDomainSeparator();\\n\\n    emit Initialized(underlyingAsset, address(POOL), debtTokenDecimals, debtTokenName, debtTokenSymbol, params);\\n  }\\n\\n  /// @inheritdoc VersionedInitializable\\n  function getRevision() internal virtual override pure returns (uint256) {\\n    return DEBT_TOKEN_REVISION;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function balanceOf(address user) public virtual override view returns (uint256) {\\n    uint256 scaledBalance = super.balanceOf(user);\\n\\n    if (scaledBalance == 0) {\\n      return 0;\\n    }\\n\\n    return scaledBalance.rayMul(POOL.getReserveNormalizedVariableDebt(_underlyingAsset));\\n  }\\n\\n  /// @inheritdoc IVariableDebtToken\\n  function mint(\\n    address user,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external virtual override onlyPool returns (bool, uint256) {\\n    if (user != onBehalfOf) {\\n      _decreaseBorrowAllowance(onBehalfOf, user, amount);\\n    }\\n    return (_mintScaled(user, onBehalfOf, amount, index), scaledTotalSupply());\\n  }\\n\\n  /// @inheritdoc IVariableDebtToken\\n  function burn(\\n    address from,\\n    uint256 amount,\\n    uint256 index\\n  ) external virtual override onlyPool returns (uint256) {\\n    _burnScaled(from, address(0), amount, index);\\n    return scaledTotalSupply();\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function totalSupply() public virtual override view returns (uint256) {\\n    return super.totalSupply().rayMul(POOL.getReserveNormalizedVariableDebt(_underlyingAsset));\\n  }\\n\\n  /// @inheritdoc EIP712Base\\n  function _EIP712BaseId() internal override view returns (string memory) {\\n    return name();\\n  }\\n\\n  /**\\n   * @dev Being non transferrable, the debt token does not implement any of the\\n   * standard ERC20 functions for transfer and allowance.\\n   */\\n  function transfer(address, uint256) external virtual override returns (bool) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  function allowance(address, address) external virtual override view returns (uint256) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  function approve(address, uint256) external virtual override returns (bool) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  function transferFrom(\\n    address,\\n    address,\\n    uint256\\n  ) external virtual override returns (bool) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  function increaseAllowance(address, uint256) external virtual override returns (bool) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  function decreaseAllowance(address, uint256) external virtual override returns (bool) {\\n    revert(Errors.OPERATION_NOT_SUPPORTED);\\n  }\\n\\n  /// @inheritdoc IVariableDebtToken\\n  function UNDERLYING_ASSET_ADDRESS() external override view returns (address) {\\n    return _underlyingAsset;\\n  }\\n\\n  function lpBalanceOf(address _addr) public override view returns (uint256) {\\n    return balanceOf(_addr);\\n  }\\n\\n  function lpTotalSupply() public override view returns (uint256) {\\n    return totalSupply();\\n  }\\n}\\n\",\"keccak256\":\"0x6d784dd3566ede8eacaea402bff06d949abe767be0fe159f5b6d25d898931f2d\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/tokenization/base/DebtTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {Context} from '../../../dependencies/openzeppelin/contracts/Context.sol';\\nimport {Errors} from '../../libraries/helpers/Errors.sol';\\nimport {VersionedInitializable} from '../../libraries/hopelend-upgradeability/VersionedInitializable.sol';\\nimport {ICreditDelegationToken} from '../../../interfaces/ICreditDelegationToken.sol';\\nimport {EIP712Base} from './EIP712Base.sol';\\n\\n/**\\n * @title DebtTokenBase\\n * @author HopeLend\\n * @notice Base contract for different types of debt tokens, like StableDebtToken or VariableDebtToken\\n */\\nabstract contract DebtTokenBase is\\n  VersionedInitializable,\\n  EIP712Base,\\n  Context,\\n  ICreditDelegationToken\\n{\\n  // Map of borrow allowances (delegator => delegatee => borrowAllowanceAmount)\\n  mapping(address => mapping(address => uint256)) internal _borrowAllowances;\\n\\n  // Credit Delegation Typehash\\n  bytes32 public constant DELEGATION_WITH_SIG_TYPEHASH =\\n    keccak256('DelegationWithSig(address delegatee,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  address internal _underlyingAsset;\\n\\n  /**\\n   * @dev Constructor.\\n   */\\n  constructor() EIP712Base() {\\n    // Intentionally left blank\\n  }\\n\\n  /// @inheritdoc ICreditDelegationToken\\n  function approveDelegation(address delegatee, uint256 amount) external override {\\n    _approveDelegation(_msgSender(), delegatee, amount);\\n  }\\n\\n  /// @inheritdoc ICreditDelegationToken\\n  function delegationWithSig(\\n    address delegator,\\n    address delegatee,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(delegator != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, Errors.INVALID_EXPIRATION);\\n    uint256 currentValidNonce = _nonces[delegator];\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        '\\\\x19\\\\x01',\\n        DOMAIN_SEPARATOR(),\\n        keccak256(\\n          abi.encode(DELEGATION_WITH_SIG_TYPEHASH, delegatee, value, currentValidNonce, deadline)\\n        )\\n      )\\n    );\\n    require(delegator == ecrecover(digest, v, r, s), Errors.INVALID_SIGNATURE);\\n    _nonces[delegator] = currentValidNonce + 1;\\n    _approveDelegation(delegator, delegatee, value);\\n  }\\n\\n  /// @inheritdoc ICreditDelegationToken\\n  function borrowAllowance(address fromUser, address toUser)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _borrowAllowances[fromUser][toUser];\\n  }\\n\\n  /**\\n   * @notice Updates the borrow allowance of a user on the specific debt token.\\n   * @param delegator The address delegating the borrowing power\\n   * @param delegatee The address receiving the delegated borrowing power\\n   * @param amount The allowance amount being delegated.\\n   */\\n  function _approveDelegation(\\n    address delegator,\\n    address delegatee,\\n    uint256 amount\\n  ) internal {\\n    _borrowAllowances[delegator][delegatee] = amount;\\n    emit BorrowAllowanceDelegated(delegator, delegatee, _underlyingAsset, amount);\\n  }\\n\\n  /**\\n   * @notice Decreases the borrow allowance of a user on the specific debt token.\\n   * @param delegator The address delegating the borrowing power\\n   * @param delegatee The address receiving the delegated borrowing power\\n   * @param amount The amount to subtract from the current allowance\\n   */\\n  function _decreaseBorrowAllowance(\\n    address delegator,\\n    address delegatee,\\n    uint256 amount\\n  ) internal {\\n    uint256 newAllowance = _borrowAllowances[delegator][delegatee] - amount;\\n\\n    _borrowAllowances[delegator][delegatee] = newAllowance;\\n\\n    emit BorrowAllowanceDelegated(delegator, delegatee, _underlyingAsset, newAllowance);\\n  }\\n}\\n\",\"keccak256\":\"0x52f6bd85800e9bef9a516b184e581877c79c217e333c16dfd5c4bdc17fcce2b8\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/tokenization/base/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title EIP712Base\\n * @author HopeLend\\n * @notice Base contract implementation of EIP712.\\n */\\nabstract contract EIP712Base {\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n\\n  // Map of address nonces (address => nonce)\\n  mapping(address => uint256) internal _nonces;\\n\\n  bytes32 internal _domainSeparator;\\n  uint256 internal immutable _chainId;\\n\\n  /**\\n   * @dev Constructor.\\n   */\\n  constructor() {\\n    _chainId = block.chainid;\\n  }\\n\\n  /**\\n   * @notice Get the domain separator for the token\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n    if (block.chainid == _chainId) {\\n      return _domainSeparator;\\n    }\\n    return _calculateDomainSeparator();\\n  }\\n\\n  /**\\n   * @notice Returns the nonce value for address specified as parameter\\n   * @param owner The address for which the nonce is being returned\\n   * @return The nonce value for the input address`\\n   */\\n  function nonces(address owner) public view virtual returns (uint256) {\\n    return _nonces[owner];\\n  }\\n\\n  /**\\n   * @notice Compute the current domain separator\\n   * @return The domain separator for the token\\n   */\\n  function _calculateDomainSeparator() internal view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          EIP712_DOMAIN,\\n          keccak256(bytes(_EIP712BaseId())),\\n          keccak256(EIP712_REVISION),\\n          block.chainid,\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns the user readable name of signing domain (e.g. token name)\\n   * @return The name of the signing domain\\n   */\\n  function _EIP712BaseId() internal view virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0xdb6a3745434cf0e91f4da52acd2a908fbf0eec865fc35e67e113da226846fe0c\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/tokenization/base/IncentivizedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IERC20Detailed} from '../../../dependencies/openzeppelin/contracts/IERC20Detailed.sol';\\nimport {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\nimport {WadRayMath} from '../../libraries/math/WadRayMath.sol';\\nimport {Errors} from '../../libraries/helpers/Errors.sol';\\nimport {IPoolAddressesProvider} from '../../../interfaces/IPoolAddressesProvider.sol';\\nimport {IPool} from '../../../interfaces/IPool.sol';\\nimport {IACLManager} from '../../../interfaces/IACLManager.sol';\\nimport {AbsGauge} from '../../gauge/AbsGauge.sol';\\n\\n/**\\n * @title IncentivizedERC20\\n * @author HopeLend, inspired by the Openzeppelin ERC20 implementation\\n * @notice Basic ERC20 implementation\\n */\\nabstract contract IncentivizedERC20 is AbsGauge, IERC20Detailed {\\n  using WadRayMath for uint256;\\n  using SafeCast for uint256;\\n\\n  /**\\n   * @dev Only pool admin can call functions marked by this modifier.\\n   */\\n  modifier onlyPoolAdmin() {\\n    IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());\\n    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Only pool can call functions marked by this modifier.\\n   */\\n  modifier onlyPool() {\\n    require(_msgSender() == address(POOL), Errors.CALLER_MUST_BE_POOL);\\n    _;\\n  }\\n\\n  /**\\n   * @dev UserState - additionalData is a flexible field.\\n   * HTokens and VariableDebtTokens use this field store the index of the\\n   * user's last supply/withdrawal/borrow/repayment. StableDebtTokens use\\n   * this field to store the user's stable rate.\\n   */\\n  struct UserState {\\n    uint128 balance;\\n    uint128 additionalData;\\n  }\\n  // Map of users address and their state data (userAddress => userStateData)\\n  mapping(address => UserState) internal _userState;\\n\\n  // Map of allowances (delegator => delegatee => allowanceAmount)\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 internal _totalSupply;\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n  IPoolAddressesProvider internal immutable _addressesProvider;\\n  IPool public immutable POOL;\\n\\n  /**\\n   * @dev Constructor.\\n   * @param pool The reference to the main Pool contract\\n   * @param name The name of the token\\n   * @param symbol The symbol of the token\\n   * @param decimals The number of decimals of the token\\n   */\\n  constructor(\\n    IPool pool,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) {\\n    _addressesProvider = pool.ADDRESSES_PROVIDER();\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = decimals;\\n    POOL = pool;\\n  }\\n\\n  function setLendingGauge(address _lendingGauge) external onlyPool {\\n    _setLendingGauge(_lendingGauge);\\n  }\\n\\n  /// @inheritdoc IERC20Detailed\\n  function name() public override view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /// @inheritdoc IERC20Detailed\\n  function symbol() external override view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /// @inheritdoc IERC20Detailed\\n  function decimals() external override view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function totalSupply() public virtual override view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function balanceOf(address account) public virtual override view returns (uint256) {\\n    return _userState[account].balance;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\n    uint128 castAmount = amount.toUint128();\\n    _transfer(_msgSender(), recipient, castAmount);\\n    return true;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function allowance(address owner, address spender) external virtual override view returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /// @inheritdoc IERC20\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external virtual override returns (bool) {\\n    uint128 castAmount = amount.toUint128();\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - castAmount);\\n    _transfer(sender, recipient, castAmount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Increases the allowance of spender to spend _msgSender() tokens\\n   * @param spender The user allowed to spend on behalf of _msgSender()\\n   * @param addedValue The amount being added to the allowance\\n   * @return `true`\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Decreases the allowance of spender to spend _msgSender() tokens\\n   * @param spender The user allowed to spend on behalf of _msgSender()\\n   * @param subtractedValue The amount being subtracted to the allowance\\n   * @return `true`\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Transfers tokens between two users and apply incentives if defined.\\n   * @param sender The source address\\n   * @param recipient The destination address\\n   * @param amount The amount getting transferred\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint128 amount\\n  ) internal virtual {\\n    if (address(lendingGauge) != address(0)) {\\n      lendingGauge.hvCheckpoint(sender);\\n      if (sender != recipient) {\\n        lendingGauge.hvCheckpoint(recipient);\\n      }\\n    }\\n\\n    uint128 oldSenderBalance = _userState[sender].balance;\\n    _userState[sender].balance = oldSenderBalance - amount;\\n    uint128 oldRecipientBalance = _userState[recipient].balance;\\n    _userState[recipient].balance = oldRecipientBalance + amount;\\n\\n    if (address(lendingGauge) != address(0)) {\\n      lendingGauge.hvUpdateLiquidityLimit(sender);\\n      if (sender != recipient) {\\n        lendingGauge.hvUpdateLiquidityLimit(recipient);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to use `amount` of `owner`s balance\\n   * @param owner The address owning the tokens\\n   * @param spender The address approved for spending\\n   * @param amount The amount of tokens to approve spending of\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @notice Update the name of the token\\n   * @param newName The new name for the token\\n   */\\n  function _setName(string memory newName) internal {\\n    _name = newName;\\n  }\\n\\n  /**\\n   * @notice Update the symbol for the token\\n   * @param newSymbol The new symbol for the token\\n   */\\n  function _setSymbol(string memory newSymbol) internal {\\n    _symbol = newSymbol;\\n  }\\n\\n  /**\\n   * @notice Update the number of decimals for the token\\n   * @param newDecimals The new number of decimals for the token\\n   */\\n  function _setDecimals(uint8 newDecimals) internal {\\n    _decimals = newDecimals;\\n  }\\n}\\n\",\"keccak256\":\"0x8a3a7f6627423371b3f2edd6190832d1b5261bbee6c79fdeecb348feb361213a\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/tokenization/base/MintableIncentivizedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPool} from '../../../interfaces/IPool.sol';\\nimport {IncentivizedERC20} from './IncentivizedERC20.sol';\\n\\n/**\\n * @title MintableIncentivizedERC20\\n * @author HopeLend\\n * @notice Implements mint and burn functions for IncentivizedERC20\\n */\\nabstract contract MintableIncentivizedERC20 is IncentivizedERC20 {\\n  /**\\n   * @dev Constructor.\\n   * @param pool The reference to the main Pool contract\\n   * @param name The name of the token\\n   * @param symbol The symbol of the token\\n   * @param decimals The number of decimals of the token\\n   */\\n  constructor(\\n    IPool pool,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) IncentivizedERC20(pool, name, symbol, decimals) {\\n    // Intentionally left blank\\n  }\\n\\n  /**\\n   * @notice Mints tokens to an account and apply incentives if defined\\n   * @param account The address receiving tokens\\n   * @param amount The amount of tokens to mint\\n   */\\n  function _mint(address account, uint128 amount) internal virtual {\\n    if (address(lendingGauge) != address(0)) {\\n      lendingGauge.hvCheckpoint(account);\\n    }\\n\\n    uint256 oldTotalSupply = _totalSupply;\\n    _totalSupply = oldTotalSupply + amount;\\n\\n    uint128 oldAccountBalance = _userState[account].balance;\\n    _userState[account].balance = oldAccountBalance + amount;\\n\\n    if (address(lendingGauge) != address(0)) {\\n      lendingGauge.hvUpdateLiquidityLimit(account);\\n    }\\n  }\\n\\n  /**\\n   * @notice Burns tokens from an account and apply incentives if defined\\n   * @param account The account whose tokens are burnt\\n   * @param amount The amount of tokens to burn\\n   */\\n  function _burn(address account, uint128 amount) internal virtual {\\n    if (address(lendingGauge) != address(0)) {\\n      lendingGauge.hvCheckpoint(account);\\n    }\\n\\n    uint256 oldTotalSupply = _totalSupply;\\n    _totalSupply = oldTotalSupply - amount;\\n\\n    uint128 oldAccountBalance = _userState[account].balance;\\n    _userState[account].balance = oldAccountBalance - amount;\\n\\n    if (address(lendingGauge) != address(0)) {\\n      lendingGauge.hvUpdateLiquidityLimit(account);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xacbb133800c49ecc7d4f738679c3c8927c13b001004967e03fe35f51cfd9650b\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/tokenization/base/ScaledBalanceTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\nimport {Errors} from '../../libraries/helpers/Errors.sol';\\nimport {WadRayMath} from '../../libraries/math/WadRayMath.sol';\\nimport {IPool} from '../../../interfaces/IPool.sol';\\nimport {IScaledBalanceToken} from '../../../interfaces/IScaledBalanceToken.sol';\\nimport {MintableIncentivizedERC20} from './MintableIncentivizedERC20.sol';\\n\\n/**\\n * @title ScaledBalanceTokenBase\\n * @author HopeLend\\n * @notice Basic ERC20 implementation of scaled balance token\\n */\\nabstract contract ScaledBalanceTokenBase is MintableIncentivizedERC20, IScaledBalanceToken {\\n  using WadRayMath for uint256;\\n  using SafeCast for uint256;\\n\\n  /**\\n   * @dev Constructor.\\n   * @param pool The reference to the main Pool contract\\n   * @param name The name of the token\\n   * @param symbol The symbol of the token\\n   * @param decimals The number of decimals of the token\\n   */\\n  constructor(\\n    IPool pool,\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) MintableIncentivizedERC20(pool, name, symbol, decimals) {\\n    // Intentionally left blank\\n  }\\n\\n  /// @inheritdoc IScaledBalanceToken\\n  function scaledBalanceOf(address user) external view override returns (uint256) {\\n    return super.balanceOf(user);\\n  }\\n\\n  /// @inheritdoc IScaledBalanceToken\\n  function getScaledUserBalanceAndSupply(address user)\\n    external\\n    view\\n    override\\n    returns (uint256, uint256)\\n  {\\n    return (super.balanceOf(user), super.totalSupply());\\n  }\\n\\n  /// @inheritdoc IScaledBalanceToken\\n  function scaledTotalSupply() public view virtual override returns (uint256) {\\n    return super.totalSupply();\\n  }\\n\\n  /// @inheritdoc IScaledBalanceToken\\n  function getPreviousIndex(address user) external view virtual override returns (uint256) {\\n    return _userState[user].additionalData;\\n  }\\n\\n  /**\\n   * @notice Implements the basic logic to mint a scaled balance token.\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the scaled tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function _mintScaled(\\n    address caller,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) internal returns (bool) {\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.INVALID_MINT_AMOUNT);\\n\\n    uint256 scaledBalance = super.balanceOf(onBehalfOf);\\n    uint256 balanceIncrease = scaledBalance.rayMul(index) -\\n      scaledBalance.rayMul(_userState[onBehalfOf].additionalData);\\n\\n    _userState[onBehalfOf].additionalData = index.toUint128();\\n\\n    _mint(onBehalfOf, amountScaled.toUint128());\\n\\n    uint256 amountToMint = amount + balanceIncrease;\\n    emit Transfer(address(0), onBehalfOf, amountToMint);\\n    emit Mint(caller, onBehalfOf, amountToMint, balanceIncrease, index);\\n\\n    return (scaledBalance == 0);\\n  }\\n\\n  /**\\n   * @notice Implements the basic logic to burn a scaled balance token.\\n   * @dev In some instances, a burn transaction will emit a mint event\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param user The user which debt is burnt\\n   * @param target The address that will receive the underlying, if any\\n   * @param amount The amount getting burned\\n   * @param index The variable debt index of the reserve\\n   */\\n  function _burnScaled(\\n    address user,\\n    address target,\\n    uint256 amount,\\n    uint256 index\\n  ) internal {\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.INVALID_BURN_AMOUNT);\\n\\n    uint256 scaledBalance = super.balanceOf(user);\\n    uint256 balanceIncrease = scaledBalance.rayMul(index) -\\n      scaledBalance.rayMul(_userState[user].additionalData);\\n\\n    _userState[user].additionalData = index.toUint128();\\n\\n    _burn(user, amountScaled.toUint128());\\n\\n    if (balanceIncrease > amount) {\\n      uint256 amountToMint = balanceIncrease - amount;\\n      emit Transfer(address(0), user, amountToMint);\\n      emit Mint(user, user, amountToMint, balanceIncrease, index);\\n    } else {\\n      uint256 amountToBurn = amount - balanceIncrease;\\n      emit Transfer(user, address(0), amountToBurn);\\n      emit Burn(user, target, amountToBurn, balanceIncrease, index);\\n    }\\n  }\\n\\n  /**\\n   * @notice Implements the basic logic to transfer scaled balance tokens between two users\\n   * @dev It emits a mint event with the interest accrued per user\\n   * @param sender The source address\\n   * @param recipient The destination address\\n   * @param amount The amount getting transferred\\n   * @param index The next liquidity index of the reserve\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount,\\n    uint256 index\\n  ) internal {\\n    uint256 senderScaledBalance = super.balanceOf(sender);\\n    uint256 senderBalanceIncrease = senderScaledBalance.rayMul(index) -\\n      senderScaledBalance.rayMul(_userState[sender].additionalData);\\n\\n    uint256 recipientScaledBalance = super.balanceOf(recipient);\\n    uint256 recipientBalanceIncrease = recipientScaledBalance.rayMul(index) -\\n      recipientScaledBalance.rayMul(_userState[recipient].additionalData);\\n\\n    _userState[sender].additionalData = index.toUint128();\\n    _userState[recipient].additionalData = index.toUint128();\\n\\n    super._transfer(sender, recipient, amount.rayDiv(index).toUint128());\\n\\n    if (senderBalanceIncrease > 0) {\\n      emit Transfer(address(0), sender, senderBalanceIncrease);\\n      emit Mint(_msgSender(), sender, senderBalanceIncrease, senderBalanceIncrease, index);\\n    }\\n\\n    if (sender != recipient && recipientBalanceIncrease > 0) {\\n      emit Transfer(address(0), recipient, recipientBalanceIncrease);\\n      emit Mint(_msgSender(), recipient, recipientBalanceIncrease, recipientBalanceIncrease, index);\\n    }\\n\\n    emit Transfer(sender, recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x15f4ce3612cdaa999be66b54f80025b310cd7b4b5647e051108abf045e589ce3\",\"license\":\"LGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e0604052600080553480156200001557600080fd5b50604051620035fb380380620035fb833981016040819052620000389162000191565b806040518060400160405280601881526020017f5641524941424c455f444542545f544f4b454e5f494d504c00000000000000008152506040518060400160405280601881526020017f5641524941424c455f444542545f544f4b454e5f494d504c0000000000000000815250600083838383838383834660808181525050836001600160a01b0316630542975c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011c919062000191565b6001600160a01b031660a05260466200013684826200025d565b5060476200014583826200025d565b506048805460ff191660ff9290921691909117905550506001600160a01b031660c0525062000329975050505050505050565b6001600160a01b03811681146200018e57600080fd5b50565b600060208284031215620001a457600080fd5b8151620001b18162000178565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001e357607f821691505b6020821081036200020457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025857600081815260208120601f850160051c81016020861015620002335750805b601f850160051c820191505b8181101562000254578281556001016200023f565b5050505b505050565b81516001600160401b03811115620002795762000279620001b8565b62000291816200028a8454620001ce565b846200020a565b602080601f831160018114620002c95760008415620002b05750858301515b600019600386901b1c1916600185901b17855562000254565b600085815260208120601f198616915b82811015620002fa57888601518255948401946001909101908401620002d9565b5085821015620003195787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05161327462000387600039600081816104e001528181610ced01528181610f3a0152818161109b015281816111e6015281816112e1015281816113b901526114cf0152600050506000610e6801526132746000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c80637fdd585f11610186578063b3f1c93d116100e3578063dd62ed3e11610097578063f5298aca11610071578063f5298aca1461073a578063f77c47911461074d578063ff7291df1461076d57600080fd5b8063dd62ed3e146106a9578063e0753986146106b7578063f3bfc7381461071357600080fd5b8063c04a8a10116100c8578063c04a8a101461066d578063c8562f7214610680578063caa0b9ed1461068957600080fd5b8063b3f1c93d1461063b578063b9a7b6221461066557600080fd5b8063a457c2d71161013a578063b16a19de1161011f578063b16a19de146105f5578063b1bd608614610613578063b1bf962d1461063357600080fd5b8063a457c2d714610301578063a9059cbb1461030157600080fd5b8063958da8de1161016b578063958da8de146105ba57806395d89b41146105da5780639c46665c146105e257600080fd5b80637fdd585f146105945780637ff33dd9146105a757600080fd5b8063313ce5671161023f5780636bd76d24116101f35780637699b4cd116101cd5780637699b4cd1461050257806378160376146105225780637ecebe001461055e57600080fd5b80636bd76d241461048257806370a08231146104c85780637535d246146104db57600080fd5b8063395093511161022457806339509351146103015780634f2bfe5b1461045a57806366be23221461047a57600080fd5b8063313ce5671461043d5780633644e5151461045257600080fd5b806313715da8116102965780631da24f3e1161027b5780631da24f3e146104095780631fbae8401461041c57806323b872dd1461042f57600080fd5b806313715da8146103e057806318160ddd146103f357600080fd5b80630afbcdc9116102c75780630afbcdc9146103245780630b52d5581461038657806310c282b81461039b57600080fd5b806306fdde03146102e3578063095ea7b314610301575b600080fd5b6102eb61078d565b6040516102f891906129de565b60405180910390f35b61031461030f366004612a13565b61081f565b60405190151581526020016102f8565b610371610332366004612a3f565b73ffffffffffffffffffffffffffffffffffffffff166000908152604360205260409020546045546fffffffffffffffffffffffffffffffff90911691565b604080519283526020830191909152016102f8565b610399610394366004612a72565b61088f565b005b6038546103bb9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f8565b6103996103ee366004612ae0565b610be0565b6103fb610c9e565b6040519081526020016102f8565b6103fb610417366004612a3f565b610d68565b61039961042a366004612a3f565b610da7565b61031461030f366004612b48565b60485460405160ff90911681526020016102f8565b6103fb610e64565b603a546103bb9073ffffffffffffffffffffffffffffffffffffffff1681565b6103fb610e9c565b6103fb610490366004612b89565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260366020908152604080832093909416825291909152205490565b6103fb6104d6366004612a3f565b610ea6565b6103bb7f000000000000000000000000000000000000000000000000000000000000000081565b6103fb610510366004612a3f565b603f6020526000908152604090205481565b6102eb6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b6103fb61056c366004612a3f565b73ffffffffffffffffffffffffffffffffffffffff1660009081526034602052604090205490565b6103996105a2366004612c9c565b610fb3565b6103996105b5366004612a3f565b6112aa565b6103fb6105c8366004612a3f565b603c6020526000908152604090205481565b6102eb611358565b6103fb6105f0366004612a3f565b611367565b60375473ffffffffffffffffffffffffffffffffffffffff166103bb565b6103fb610621366004612a3f565b603e6020526000908152604090205481565b6103fb611372565b61064e610649366004612d8e565b61137d565b6040805192151583526020830191909152016102f8565b6103fb600181565b61039961067b366004612a13565b611486565b6103fb603d5481565b6103fb610697366004612a3f565b60406020819052600091825290205481565b6103fb61030f366004612b89565b6103fb6106c5366004612a3f565b73ffffffffffffffffffffffffffffffffffffffff1660009081526043602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1690565b6103fb7f323db0410fecc107e39e2af5908671f4c8d106123b35a51501bb805c5fa36aa081565b6103fb610748366004612dd4565b611495565b6039546103bb9073ffffffffffffffffffffffffffffffffffffffff1681565b6103fb61077b366004612e09565b603b6020526000908152604090205481565b60606046805461079c90612e22565b80601f01602080910402602001604051908101604052809291908181526020018280546107c890612e22565b80156108155780601f106107ea57610100808354040283529160200191610815565b820191906000526020600020905b8154815290600101906020018083116107f857829003601f168201915b5050505050905090565b604080518082018252600281527f3830000000000000000000000000000000000000000000000000000000000000602082015290517f08c379a0000000000000000000000000000000000000000000000000000000008152600091610886916004016129de565b60405180910390fd5b60408051808201909152600281527f3737000000000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8816610911576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b50834211156040518060400160405280600281526020017f373800000000000000000000000000000000000000000000000000000000000081525090610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b5073ffffffffffffffffffffffffffffffffffffffff8716600090815260346020526040812054906109b4610e64565b604080517f323db0410fecc107e39e2af5908671f4c8d106123b35a51501bb805c5fa36aa0602082015273ffffffffffffffffffffffffffffffffffffffff8b1691810191909152606081018990526080810184905260a0810188905260c00160405160208183030381529060405280519060200120604051602001610a6c9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa158015610af2573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f373900000000000000000000000000000000000000000000000000000000000081525090610b98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b50610ba4826001612ea4565b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260346020526040902055610bd589898961155a565b505050505050505050565b60385473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f393400000000000000000000000000000000000000000000000000000000000081525090610c7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b50610c998383610c9436859003850185612eb7565b6115d1565b505050565b6037546040517f386497fd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152600091610d63917f00000000000000000000000000000000000000000000000000000000000000009091169063386497fd90602401602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190612f27565b604554906119e4565b905090565b73ffffffffffffffffffffffffffffffffffffffff81166000908152604360205260408120546fffffffffffffffffffffffffffffffff165b92915050565b60385473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f393400000000000000000000000000000000000000000000000000000000000081525090610e46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b50610e6181610e5483611367565b610e5c610e9c565b611a3b565b50565b60007f00000000000000000000000000000000000000000000000000000000000000004603610e94575060355490565b610d63611cac565b6000610d63610c9e565b73ffffffffffffffffffffffffffffffffffffffff81166000908152604360205260408120546fffffffffffffffffffffffffffffffff16808203610eee5750600092915050565b6037546040517f386497fd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152610fac917f0000000000000000000000000000000000000000000000000000000000000000169063386497fd90602401602060405180830381865afa158015610f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa59190612f27565b82906119e4565b9392505050565b6001805460ff1680610fc45750303b155b80610fd0575060005481115b61105c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a65640000000000000000000000000000000000006064820152608401610886565b60015460ff1615801561109957600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168117905560008290555b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f383700000000000000000000000000000000000000000000000000000000000081525090611156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b5061116086611d71565b61116985611d7d565b604880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff8916179055603780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a161790556111de611cac565b6035819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f5d8ce3e947367e84e7fa4f4ba36ebe75e6b6c6b93c25673faa4df0202b59c1388989898989604051611269959493929190612f40565b60405180910390a38015610bd557600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055505050505050505050565b60408051808201909152600281527f32330000000000000000000000000000000000000000000000000000000000006020820152337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461134e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b50610e6181611d89565b60606047805461079c90612e22565b6000610da182610ea6565b6000610d6360455490565b60408051808201909152600281527f323300000000000000000000000000000000000000000000000000000000000060208201526000908190337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614611426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461146557611465858786611f4c565b6114718686868661200c565b611479611372565b9150915094509492505050565b61149133838361155a565b5050565b60408051808201909152600281527f32330000000000000000000000000000000000000000000000000000000000006020820152600090337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461153c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b5061154a846000858561224d565b611552611372565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526036602090815260408083208786168085529083529281902086905560375490518681529416939192917fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1910160405180910390a4505050565b806020015142111561190e57603d546020820151600061163d6115f8620151806007612fc3565b611606620151806007612fc3565b611614620151806007612fc3565b87602001516116239190612ea4565b61162d9190612fda565b6116379190612fc3565b4261256a565b905060005b6101f48110156119095760006116588484613015565b9050600061166a620151806007612fc3565b611678620151806007612fc3565b6116829087612fda565b61168c9190612fc3565b6000818152603b6020526040812054919250819003611756576039546038546040517f65c6046800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018590529116906365c6046890604401602060405180830381865afa15801561171e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117429190612f27565b6000838152603b6020526040902081905590505b86156118c257858860800151101580156117735750848860800151105b15611863576b033b2e3c9fd0803ce800000087878a608001516117969190613015565b8b848c604001516117a79190612fc3565b6117b19190612fc3565b6117bb9190612fc3565b6117c59190612fda565b6117cf9190612fda565b604260008282546117e09190612ea4565b90915550506060880151604089015260808801516b033b2e3c9fd0803ce800000090889061180e9088613015565b8b848c6040015161181f9190612fc3565b6118299190612fc3565b6118339190612fc3565b61183d9190612fda565b6118479190612fda565b604260008282546118589190612ea4565b909155506118c29050565b6b033b2e3c9fd0803ce800000087848b848c604001516118839190612fc3565b61188d9190612fc3565b6118979190612fc3565b6118a19190612fda565b6118ab9190612fda565b604260008282546118bc9190612ea4565b90915550505b4285036118d157505050611909565b8495506118f16201518060076118e79190612fc3565b6116379087612ea4565b9450505050808061190190613028565b915050611642565b505050505b73ffffffffffffffffffffffffffffffffffffffff83166000908152603c6020908152604080832054603e90925290912054604254670de0b6b3a76400009161195691613015565b6119609083612fc3565b61196a9190612fda565b73ffffffffffffffffffffffffffffffffffffffff85166000908152604060208190528120805490919061199f908490612ea4565b909155505060425473ffffffffffffffffffffffffffffffffffffffff9094166000908152603e6020908152604080832096909655603f905293909320429055505050565b600081157ffffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff83900484111517611a1957600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b603a546040517f3037408d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301524260248301526000921690633037408d90604401602060405180830381865afa158015611ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad69190612f27565b603a546040517fd2dcd93300000000000000000000000000000000000000000000000000000000815242600482015291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063d2dcd93390602401602060405180830381865afa158015611b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6e9190612f27565b905060006064611b7f602887612fc3565b611b899190612fda565b90508115611bd457606482611b9f602883613015565b611ba98688612fc3565b611bb39190612fc3565b611bbd9190612fda565b611bc79190612fda565b611bd19082612ea4565b90505b611bde858261256a565b73ffffffffffffffffffffffffffffffffffffffff87166000908152603c60205260408120805490839055603d54929350918290611c1d908590612ea4565b611c279190613015565b603d8190556040805173ffffffffffffffffffffffffffffffffffffffff8b168152602081018a9052908101889052606081018590526080810182905260a0810187905260c081018690529091507f47211fe8b1eecabef1c013b28eb9caa892fd6bf2d3f1f5111d08cc115de841659060e00160405180910390a15050505050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611cd7612580565b8051602091820120604080518082018252600181527f310000000000000000000000000000000000000000000000000000000000000090840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b604661149182826130ae565b604761149182826130ae565b603880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604080517ff77c4791000000000000000000000000000000000000000000000000000000008152905163f77c4791916004808201926020929091908290030181865afa158015611e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4491906131c8565b603980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055603854604080517f4f2bfe5b00000000000000000000000000000000000000000000000000000000815290519190921691634f2bfe5b9160048083019260209291908290030181865afa158015611ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0491906131c8565b603a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603660209081526040808320938616835292905290812054611f8c908390613015565b73ffffffffffffffffffffffffffffffffffffffff808616600081815260366020908152604080832089861680855292529182902085905560375491519495509216927fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e190611ffe9086815260200190565b60405180910390a450505050565b600080612019848461258a565b60408051808201909152600281527f3234000000000000000000000000000000000000000000000000000000000000602082015290915081612088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152604360205260408120546fffffffffffffffffffffffffffffffff80821692916120e59184917001000000000000000000000000000000009004166119e4565b6120ef83876119e4565b6120f99190613015565b9050612104856125c9565b73ffffffffffffffffffffffffffffffffffffffff8816600090815260436020526040902080546fffffffffffffffffffffffffffffffff92831670010000000000000000000000000000000002921691909117905561216c87612167856125c9565b61266f565b60006121788288612ea4565b90508773ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516121da91815260200190565b60405180910390a3604080518281526020810184905290810187905273ffffffffffffffffffffffffffffffffffffffff808a1691908b16907f458f5fa412d0f69b08dd84872b0215675cc67bc1d5b6fd93300a1c3878b861969060600160405180910390a35050159695505050505050565b6000612259838361258a565b60408051808201909152600281527f32350000000000000000000000000000000000000000000000000000000000006020820152909150816122c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152604360205260408120546fffffffffffffffffffffffffffffffff80821692916123259184917001000000000000000000000000000000009004166119e4565b61232f83866119e4565b6123399190613015565b9050612344846125c9565b73ffffffffffffffffffffffffffffffffffffffff8816600090815260436020526040902080546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000292169190911790556123ac876123a7856125c9565b612872565b8481111561248b5760006123c08683613015565b90508773ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161242291815260200190565b60405180910390a3604080518281526020810184905290810186905273ffffffffffffffffffffffffffffffffffffffff89169081907f458f5fa412d0f69b08dd84872b0215675cc67bc1d5b6fd93300a1c3878b861969060600160405180910390a350612561565b60006124978287613015565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516124f991815260200190565b60405180910390a3604080518281526020810184905290810186905273ffffffffffffffffffffffffffffffffffffffff80891691908a16907f4cf25bc1d991c17529c25213d3cc0cda295eeaad5f13f361969b12ea48015f909060600160405180910390a3505b50505050505050565b60008183106125795781610fac565b5090919050565b6060610d6361078d565b600081156b033b2e3c9fd0803ce8000000600284041904841117156125ae57600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b60006fffffffffffffffffffffffffffffffff82111561266b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610886565b5090565b60385473ffffffffffffffffffffffffffffffffffffffff1615612713576038546040517f91451a4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152909116906391451a4990602401600060405180830381600087803b1580156126fa57600080fd5b505af115801561270e573d6000803e3d6000fd5b505050505b6045546127326fffffffffffffffffffffffffffffffff831682612ea4565b60455573ffffffffffffffffffffffffffffffffffffffff83166000908152604360205260409020546fffffffffffffffffffffffffffffffff1661277783826131e5565b73ffffffffffffffffffffffffffffffffffffffff858116600090815260436020526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9390931692909217909155603854161561286c576038546040517f8d56107e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015290911690638d56107e90602401600060405180830381600087803b15801561285357600080fd5b505af1158015612867573d6000803e3d6000fd5b505050505b50505050565b60385473ffffffffffffffffffffffffffffffffffffffff1615612916576038546040517f91451a4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152909116906391451a4990602401600060405180830381600087803b1580156128fd57600080fd5b505af1158015612911573d6000803e3d6000fd5b505050505b6045546129356fffffffffffffffffffffffffffffffff831682613015565b60455573ffffffffffffffffffffffffffffffffffffffff83166000908152604360205260409020546fffffffffffffffffffffffffffffffff166127778382613215565b6000815180845260005b818110156129a057602081850181015186830182015201612984565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610fac602083018461297a565b73ffffffffffffffffffffffffffffffffffffffff81168114610e6157600080fd5b60008060408385031215612a2657600080fd5b8235612a31816129f1565b946020939093013593505050565b600060208284031215612a5157600080fd5b8135610fac816129f1565b803560ff81168114612a6d57600080fd5b919050565b600080600080600080600060e0888a031215612a8d57600080fd5b8735612a98816129f1565b96506020880135612aa8816129f1565b95506040880135945060608801359350612ac460808901612a5c565b925060a0880135915060c0880135905092959891949750929550565b600080600083850360e0811215612af657600080fd5b8435612b01816129f1565b93506020850135925060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082011215612b3a57600080fd5b506040840190509250925092565b600080600060608486031215612b5d57600080fd5b8335612b68816129f1565b92506020840135612b78816129f1565b929592945050506040919091013590565b60008060408385031215612b9c57600080fd5b8235612ba7816129f1565b91506020830135612bb7816129f1565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112612c0257600080fd5b813567ffffffffffffffff80821115612c1d57612c1d612bc2565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715612c6357612c63612bc2565b81604052838152866020858801011115612c7c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060c0888a031215612cb757600080fd5b8735612cc2816129f1565b96506020880135612cd2816129f1565b9550612ce060408901612a5c565b9450606088013567ffffffffffffffff80821115612cfd57600080fd5b612d098b838c01612bf1565b955060808a0135915080821115612d1f57600080fd5b612d2b8b838c01612bf1565b945060a08a0135915080821115612d4157600080fd5b818a0191508a601f830112612d5557600080fd5b813581811115612d6457600080fd5b8b6020828501011115612d7657600080fd5b60208301945080935050505092959891949750929550565b60008060008060808587031215612da457600080fd5b8435612daf816129f1565b93506020850135612dbf816129f1565b93969395505050506040820135916060013590565b600080600060608486031215612de957600080fd5b8335612df4816129f1565b95602085013595506040909401359392505050565b600060208284031215612e1b57600080fd5b5035919050565b600181811c90821680612e3657607f821691505b602082108103612e6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610da157610da1612e75565b600060a08284031215612ec957600080fd5b60405160a0810181811067ffffffffffffffff82111715612eec57612eec612bc2565b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b600060208284031215612f3957600080fd5b5051919050565b60ff86168152608060208201526000612f5c608083018761297a565b8281036040840152612f6e818761297a565b905082810360608401528381528385602083013760006020858301015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601168201019150509695505050505050565b8082028115828204841417610da157610da1612e75565b600082613010577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81810381811115610da157610da1612e75565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361305957613059612e75565b5060010190565b601f821115610c9957600081815260208120601f850160051c810160208610156130875750805b601f850160051c820191505b818110156130a657828155600101613093565b505050505050565b815167ffffffffffffffff8111156130c8576130c8612bc2565b6130dc816130d68454612e22565b84613060565b602080601f83116001811461312f57600084156130f95750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556130a6565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561317c5788860151825594840194600190910190840161315d565b50858210156131b857878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156131da57600080fd5b8151610fac816129f1565b6fffffffffffffffffffffffffffffffff81811683821601908082111561320e5761320e612e75565b5092915050565b6fffffffffffffffffffffffffffffffff82811682821603908082111561320e5761320e612e7556fea26469706673582212203e7887552a7a98b128add2475f9c8ee451680e71eddcce94227c15e403d3a58f64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c80637fdd585f11610186578063b3f1c93d116100e3578063dd62ed3e11610097578063f5298aca11610071578063f5298aca1461073a578063f77c47911461074d578063ff7291df1461076d57600080fd5b8063dd62ed3e146106a9578063e0753986146106b7578063f3bfc7381461071357600080fd5b8063c04a8a10116100c8578063c04a8a101461066d578063c8562f7214610680578063caa0b9ed1461068957600080fd5b8063b3f1c93d1461063b578063b9a7b6221461066557600080fd5b8063a457c2d71161013a578063b16a19de1161011f578063b16a19de146105f5578063b1bd608614610613578063b1bf962d1461063357600080fd5b8063a457c2d714610301578063a9059cbb1461030157600080fd5b8063958da8de1161016b578063958da8de146105ba57806395d89b41146105da5780639c46665c146105e257600080fd5b80637fdd585f146105945780637ff33dd9146105a757600080fd5b8063313ce5671161023f5780636bd76d24116101f35780637699b4cd116101cd5780637699b4cd1461050257806378160376146105225780637ecebe001461055e57600080fd5b80636bd76d241461048257806370a08231146104c85780637535d246146104db57600080fd5b8063395093511161022457806339509351146103015780634f2bfe5b1461045a57806366be23221461047a57600080fd5b8063313ce5671461043d5780633644e5151461045257600080fd5b806313715da8116102965780631da24f3e1161027b5780631da24f3e146104095780631fbae8401461041c57806323b872dd1461042f57600080fd5b806313715da8146103e057806318160ddd146103f357600080fd5b80630afbcdc9116102c75780630afbcdc9146103245780630b52d5581461038657806310c282b81461039b57600080fd5b806306fdde03146102e3578063095ea7b314610301575b600080fd5b6102eb61078d565b6040516102f891906129de565b60405180910390f35b61031461030f366004612a13565b61081f565b60405190151581526020016102f8565b610371610332366004612a3f565b73ffffffffffffffffffffffffffffffffffffffff166000908152604360205260409020546045546fffffffffffffffffffffffffffffffff90911691565b604080519283526020830191909152016102f8565b610399610394366004612a72565b61088f565b005b6038546103bb9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f8565b6103996103ee366004612ae0565b610be0565b6103fb610c9e565b6040519081526020016102f8565b6103fb610417366004612a3f565b610d68565b61039961042a366004612a3f565b610da7565b61031461030f366004612b48565b60485460405160ff90911681526020016102f8565b6103fb610e64565b603a546103bb9073ffffffffffffffffffffffffffffffffffffffff1681565b6103fb610e9c565b6103fb610490366004612b89565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260366020908152604080832093909416825291909152205490565b6103fb6104d6366004612a3f565b610ea6565b6103bb7f000000000000000000000000000000000000000000000000000000000000000081565b6103fb610510366004612a3f565b603f6020526000908152604090205481565b6102eb6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b6103fb61056c366004612a3f565b73ffffffffffffffffffffffffffffffffffffffff1660009081526034602052604090205490565b6103996105a2366004612c9c565b610fb3565b6103996105b5366004612a3f565b6112aa565b6103fb6105c8366004612a3f565b603c6020526000908152604090205481565b6102eb611358565b6103fb6105f0366004612a3f565b611367565b60375473ffffffffffffffffffffffffffffffffffffffff166103bb565b6103fb610621366004612a3f565b603e6020526000908152604090205481565b6103fb611372565b61064e610649366004612d8e565b61137d565b6040805192151583526020830191909152016102f8565b6103fb600181565b61039961067b366004612a13565b611486565b6103fb603d5481565b6103fb610697366004612a3f565b60406020819052600091825290205481565b6103fb61030f366004612b89565b6103fb6106c5366004612a3f565b73ffffffffffffffffffffffffffffffffffffffff1660009081526043602052604090205470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1690565b6103fb7f323db0410fecc107e39e2af5908671f4c8d106123b35a51501bb805c5fa36aa081565b6103fb610748366004612dd4565b611495565b6039546103bb9073ffffffffffffffffffffffffffffffffffffffff1681565b6103fb61077b366004612e09565b603b6020526000908152604090205481565b60606046805461079c90612e22565b80601f01602080910402602001604051908101604052809291908181526020018280546107c890612e22565b80156108155780601f106107ea57610100808354040283529160200191610815565b820191906000526020600020905b8154815290600101906020018083116107f857829003601f168201915b5050505050905090565b604080518082018252600281527f3830000000000000000000000000000000000000000000000000000000000000602082015290517f08c379a0000000000000000000000000000000000000000000000000000000008152600091610886916004016129de565b60405180910390fd5b60408051808201909152600281527f3737000000000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8816610911576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b50834211156040518060400160405280600281526020017f373800000000000000000000000000000000000000000000000000000000000081525090610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b5073ffffffffffffffffffffffffffffffffffffffff8716600090815260346020526040812054906109b4610e64565b604080517f323db0410fecc107e39e2af5908671f4c8d106123b35a51501bb805c5fa36aa0602082015273ffffffffffffffffffffffffffffffffffffffff8b1691810191909152606081018990526080810184905260a0810188905260c00160405160208183030381529060405280519060200120604051602001610a6c9291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa158015610af2573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f373900000000000000000000000000000000000000000000000000000000000081525090610b98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b50610ba4826001612ea4565b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260346020526040902055610bd589898961155a565b505050505050505050565b60385473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f393400000000000000000000000000000000000000000000000000000000000081525090610c7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b50610c998383610c9436859003850185612eb7565b6115d1565b505050565b6037546040517f386497fd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152600091610d63917f00000000000000000000000000000000000000000000000000000000000000009091169063386497fd90602401602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190612f27565b604554906119e4565b905090565b73ffffffffffffffffffffffffffffffffffffffff81166000908152604360205260408120546fffffffffffffffffffffffffffffffff165b92915050565b60385473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f393400000000000000000000000000000000000000000000000000000000000081525090610e46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b50610e6181610e5483611367565b610e5c610e9c565b611a3b565b50565b60007f00000000000000000000000000000000000000000000000000000000000000004603610e94575060355490565b610d63611cac565b6000610d63610c9e565b73ffffffffffffffffffffffffffffffffffffffff81166000908152604360205260408120546fffffffffffffffffffffffffffffffff16808203610eee5750600092915050565b6037546040517f386497fd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152610fac917f0000000000000000000000000000000000000000000000000000000000000000169063386497fd90602401602060405180830381865afa158015610f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa59190612f27565b82906119e4565b9392505050565b6001805460ff1680610fc45750303b155b80610fd0575060005481115b61105c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a65640000000000000000000000000000000000006064820152608401610886565b60015460ff1615801561109957600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168117905560008290555b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f383700000000000000000000000000000000000000000000000000000000000081525090611156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b5061116086611d71565b61116985611d7d565b604880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff8916179055603780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a161790556111de611cac565b6035819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f5d8ce3e947367e84e7fa4f4ba36ebe75e6b6c6b93c25673faa4df0202b59c1388989898989604051611269959493929190612f40565b60405180910390a38015610bd557600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055505050505050505050565b60408051808201909152600281527f32330000000000000000000000000000000000000000000000000000000000006020820152337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461134e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b50610e6181611d89565b60606047805461079c90612e22565b6000610da182610ea6565b6000610d6360455490565b60408051808201909152600281527f323300000000000000000000000000000000000000000000000000000000000060208201526000908190337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614611426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461146557611465858786611f4c565b6114718686868661200c565b611479611372565b9150915094509492505050565b61149133838361155a565b5050565b60408051808201909152600281527f32330000000000000000000000000000000000000000000000000000000000006020820152600090337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461153c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b5061154a846000858561224d565b611552611372565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526036602090815260408083208786168085529083529281902086905560375490518681529416939192917fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e1910160405180910390a4505050565b806020015142111561190e57603d546020820151600061163d6115f8620151806007612fc3565b611606620151806007612fc3565b611614620151806007612fc3565b87602001516116239190612ea4565b61162d9190612fda565b6116379190612fc3565b4261256a565b905060005b6101f48110156119095760006116588484613015565b9050600061166a620151806007612fc3565b611678620151806007612fc3565b6116829087612fda565b61168c9190612fc3565b6000818152603b6020526040812054919250819003611756576039546038546040517f65c6046800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018590529116906365c6046890604401602060405180830381865afa15801561171e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117429190612f27565b6000838152603b6020526040902081905590505b86156118c257858860800151101580156117735750848860800151105b15611863576b033b2e3c9fd0803ce800000087878a608001516117969190613015565b8b848c604001516117a79190612fc3565b6117b19190612fc3565b6117bb9190612fc3565b6117c59190612fda565b6117cf9190612fda565b604260008282546117e09190612ea4565b90915550506060880151604089015260808801516b033b2e3c9fd0803ce800000090889061180e9088613015565b8b848c6040015161181f9190612fc3565b6118299190612fc3565b6118339190612fc3565b61183d9190612fda565b6118479190612fda565b604260008282546118589190612ea4565b909155506118c29050565b6b033b2e3c9fd0803ce800000087848b848c604001516118839190612fc3565b61188d9190612fc3565b6118979190612fc3565b6118a19190612fda565b6118ab9190612fda565b604260008282546118bc9190612ea4565b90915550505b4285036118d157505050611909565b8495506118f16201518060076118e79190612fc3565b6116379087612ea4565b9450505050808061190190613028565b915050611642565b505050505b73ffffffffffffffffffffffffffffffffffffffff83166000908152603c6020908152604080832054603e90925290912054604254670de0b6b3a76400009161195691613015565b6119609083612fc3565b61196a9190612fda565b73ffffffffffffffffffffffffffffffffffffffff85166000908152604060208190528120805490919061199f908490612ea4565b909155505060425473ffffffffffffffffffffffffffffffffffffffff9094166000908152603e6020908152604080832096909655603f905293909320429055505050565b600081157ffffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff83900484111517611a1957600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b603a546040517f3037408d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301524260248301526000921690633037408d90604401602060405180830381865afa158015611ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad69190612f27565b603a546040517fd2dcd93300000000000000000000000000000000000000000000000000000000815242600482015291925060009173ffffffffffffffffffffffffffffffffffffffff9091169063d2dcd93390602401602060405180830381865afa158015611b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6e9190612f27565b905060006064611b7f602887612fc3565b611b899190612fda565b90508115611bd457606482611b9f602883613015565b611ba98688612fc3565b611bb39190612fc3565b611bbd9190612fda565b611bc79190612fda565b611bd19082612ea4565b90505b611bde858261256a565b73ffffffffffffffffffffffffffffffffffffffff87166000908152603c60205260408120805490839055603d54929350918290611c1d908590612ea4565b611c279190613015565b603d8190556040805173ffffffffffffffffffffffffffffffffffffffff8b168152602081018a9052908101889052606081018590526080810182905260a0810187905260c081018690529091507f47211fe8b1eecabef1c013b28eb9caa892fd6bf2d3f1f5111d08cc115de841659060e00160405180910390a15050505050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611cd7612580565b8051602091820120604080518082018252600181527f310000000000000000000000000000000000000000000000000000000000000090840152805192830193909352918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b604661149182826130ae565b604761149182826130ae565b603880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604080517ff77c4791000000000000000000000000000000000000000000000000000000008152905163f77c4791916004808201926020929091908290030181865afa158015611e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4491906131c8565b603980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055603854604080517f4f2bfe5b00000000000000000000000000000000000000000000000000000000815290519190921691634f2bfe5b9160048083019260209291908290030181865afa158015611ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0491906131c8565b603a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152603660209081526040808320938616835292905290812054611f8c908390613015565b73ffffffffffffffffffffffffffffffffffffffff808616600081815260366020908152604080832089861680855292529182902085905560375491519495509216927fda919360433220e13b51e8c211e490d148e61a3bd53de8c097194e458b97f3e190611ffe9086815260200190565b60405180910390a450505050565b600080612019848461258a565b60408051808201909152600281527f3234000000000000000000000000000000000000000000000000000000000000602082015290915081612088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152604360205260408120546fffffffffffffffffffffffffffffffff80821692916120e59184917001000000000000000000000000000000009004166119e4565b6120ef83876119e4565b6120f99190613015565b9050612104856125c9565b73ffffffffffffffffffffffffffffffffffffffff8816600090815260436020526040902080546fffffffffffffffffffffffffffffffff92831670010000000000000000000000000000000002921691909117905561216c87612167856125c9565b61266f565b60006121788288612ea4565b90508773ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516121da91815260200190565b60405180910390a3604080518281526020810184905290810187905273ffffffffffffffffffffffffffffffffffffffff808a1691908b16907f458f5fa412d0f69b08dd84872b0215675cc67bc1d5b6fd93300a1c3878b861969060600160405180910390a35050159695505050505050565b6000612259838361258a565b60408051808201909152600281527f32350000000000000000000000000000000000000000000000000000000000006020820152909150816122c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088691906129de565b5073ffffffffffffffffffffffffffffffffffffffff85166000908152604360205260408120546fffffffffffffffffffffffffffffffff80821692916123259184917001000000000000000000000000000000009004166119e4565b61232f83866119e4565b6123399190613015565b9050612344846125c9565b73ffffffffffffffffffffffffffffffffffffffff8816600090815260436020526040902080546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000292169190911790556123ac876123a7856125c9565b612872565b8481111561248b5760006123c08683613015565b90508773ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161242291815260200190565b60405180910390a3604080518281526020810184905290810186905273ffffffffffffffffffffffffffffffffffffffff89169081907f458f5fa412d0f69b08dd84872b0215675cc67bc1d5b6fd93300a1c3878b861969060600160405180910390a350612561565b60006124978287613015565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516124f991815260200190565b60405180910390a3604080518281526020810184905290810186905273ffffffffffffffffffffffffffffffffffffffff80891691908a16907f4cf25bc1d991c17529c25213d3cc0cda295eeaad5f13f361969b12ea48015f909060600160405180910390a3505b50505050505050565b60008183106125795781610fac565b5090919050565b6060610d6361078d565b600081156b033b2e3c9fd0803ce8000000600284041904841117156125ae57600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b60006fffffffffffffffffffffffffffffffff82111561266b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610886565b5090565b60385473ffffffffffffffffffffffffffffffffffffffff1615612713576038546040517f91451a4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152909116906391451a4990602401600060405180830381600087803b1580156126fa57600080fd5b505af115801561270e573d6000803e3d6000fd5b505050505b6045546127326fffffffffffffffffffffffffffffffff831682612ea4565b60455573ffffffffffffffffffffffffffffffffffffffff83166000908152604360205260409020546fffffffffffffffffffffffffffffffff1661277783826131e5565b73ffffffffffffffffffffffffffffffffffffffff858116600090815260436020526040902080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9390931692909217909155603854161561286c576038546040517f8d56107e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015290911690638d56107e90602401600060405180830381600087803b15801561285357600080fd5b505af1158015612867573d6000803e3d6000fd5b505050505b50505050565b60385473ffffffffffffffffffffffffffffffffffffffff1615612916576038546040517f91451a4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152909116906391451a4990602401600060405180830381600087803b1580156128fd57600080fd5b505af1158015612911573d6000803e3d6000fd5b505050505b6045546129356fffffffffffffffffffffffffffffffff831682613015565b60455573ffffffffffffffffffffffffffffffffffffffff83166000908152604360205260409020546fffffffffffffffffffffffffffffffff166127778382613215565b6000815180845260005b818110156129a057602081850181015186830182015201612984565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081526000610fac602083018461297a565b73ffffffffffffffffffffffffffffffffffffffff81168114610e6157600080fd5b60008060408385031215612a2657600080fd5b8235612a31816129f1565b946020939093013593505050565b600060208284031215612a5157600080fd5b8135610fac816129f1565b803560ff81168114612a6d57600080fd5b919050565b600080600080600080600060e0888a031215612a8d57600080fd5b8735612a98816129f1565b96506020880135612aa8816129f1565b95506040880135945060608801359350612ac460808901612a5c565b925060a0880135915060c0880135905092959891949750929550565b600080600083850360e0811215612af657600080fd5b8435612b01816129f1565b93506020850135925060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc082011215612b3a57600080fd5b506040840190509250925092565b600080600060608486031215612b5d57600080fd5b8335612b68816129f1565b92506020840135612b78816129f1565b929592945050506040919091013590565b60008060408385031215612b9c57600080fd5b8235612ba7816129f1565b91506020830135612bb7816129f1565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112612c0257600080fd5b813567ffffffffffffffff80821115612c1d57612c1d612bc2565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715612c6357612c63612bc2565b81604052838152866020858801011115612c7c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060c0888a031215612cb757600080fd5b8735612cc2816129f1565b96506020880135612cd2816129f1565b9550612ce060408901612a5c565b9450606088013567ffffffffffffffff80821115612cfd57600080fd5b612d098b838c01612bf1565b955060808a0135915080821115612d1f57600080fd5b612d2b8b838c01612bf1565b945060a08a0135915080821115612d4157600080fd5b818a0191508a601f830112612d5557600080fd5b813581811115612d6457600080fd5b8b6020828501011115612d7657600080fd5b60208301945080935050505092959891949750929550565b60008060008060808587031215612da457600080fd5b8435612daf816129f1565b93506020850135612dbf816129f1565b93969395505050506040820135916060013590565b600080600060608486031215612de957600080fd5b8335612df4816129f1565b95602085013595506040909401359392505050565b600060208284031215612e1b57600080fd5b5035919050565b600181811c90821680612e3657607f821691505b602082108103612e6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610da157610da1612e75565b600060a08284031215612ec957600080fd5b60405160a0810181811067ffffffffffffffff82111715612eec57612eec612bc2565b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b600060208284031215612f3957600080fd5b5051919050565b60ff86168152608060208201526000612f5c608083018761297a565b8281036040840152612f6e818761297a565b905082810360608401528381528385602083013760006020858301015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601168201019150509695505050505050565b8082028115828204841417610da157610da1612e75565b600082613010577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81810381811115610da157610da1612e75565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361305957613059612e75565b5060010190565b601f821115610c9957600081815260208120601f850160051c810160208610156130875750805b601f850160051c820191505b818110156130a657828155600101613093565b505050505050565b815167ffffffffffffffff8111156130c8576130c8612bc2565b6130dc816130d68454612e22565b84613060565b602080601f83116001811461312f57600084156130f95750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556130a6565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561317c5788860151825594840194600190910190840161315d565b50858210156131b857878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156131da57600080fd5b8151610fac816129f1565b6fffffffffffffffffffffffffffffffff81811683821601908082111561320e5761320e612e75565b5092915050565b6fffffffffffffffffffffffffffffffff82811682821603908082111561320e5761320e612e7556fea26469706673582212203e7887552a7a98b128add2475f9c8ee451680e71eddcce94227c15e403d3a58f64736f6c63430008110033",
  "devdoc": {
    "author": "HopeLend",
    "details": "Transfer and approve functionalities are disabled since its a non-transferable token",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Return cached value if chainId matches cache, otherwise recomputes separator",
        "returns": {
          "_0": "The domain separator of the token at current chain"
        }
      },
      "UNDERLYING_ASSET_ADDRESS()": {
        "returns": {
          "_0": "The address of the underlying asset"
        }
      },
      "approveDelegation(address,uint256)": {
        "params": {
          "amount": "The maximum amount being delegated.",
          "delegatee": "The address receiving the delegated borrowing power"
        }
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "borrowAllowance(address,address)": {
        "params": {
          "fromUser": "The user to giving allowance",
          "toUser": "The user to give allowance to"
        },
        "returns": {
          "_0": "The current allowance of `toUser`"
        }
      },
      "burn(address,uint256,uint256)": {
        "details": "In some instances, a burn transaction will emit a mint event if the amount to burn is less than the interest that the user accrued",
        "params": {
          "amount": "The amount getting burned",
          "from": "The address from which the debt will be burned",
          "index": "The variable debt index of the reserve"
        },
        "returns": {
          "_0": "The scaled total debt of the reserve"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "pool": "The address of the Pool contract"
        }
      },
      "delegationWithSig(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The deadline timestamp, type(uint256).max for max deadline",
          "delegatee": "The delegatee that can use the credit",
          "delegator": "The delegator of the credit",
          "r": "The R signature param",
          "s": "The S signature param",
          "v": "The V signature param",
          "value": "The amount to be delegated"
        }
      },
      "getPreviousIndex(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The last index interest was accrued to the user's balance, expressed in ray"
        }
      },
      "getScaledUserBalanceAndSupply(address)": {
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The scaled balance of the user",
          "_1": "The scaled total supply"
        }
      },
      "initialize(address,address,uint8,string,string,bytes)": {
        "params": {
          "debtTokenDecimals": "The decimals of the debtToken, same as the underlying asset's",
          "debtTokenName": "The name of the token",
          "debtTokenSymbol": "The symbol of the token",
          "params": "A set of encoded parameters for additional initialization",
          "pool": "The pool contract that is initializing this contract",
          "underlyingAsset": "The address of the underlying asset of this hToken (E.g. WETH for hWETH)"
        }
      },
      "mint(address,address,uint256,uint256)": {
        "params": {
          "amount": "The amount of debt being minted",
          "index": "The variable debt index of the reserve",
          "onBehalfOf": "The address receiving the debt tokens",
          "user": "The address receiving the borrowed underlying, being the delegatee in case of credit delegate, or same as `onBehalfOf` otherwise"
        },
        "returns": {
          "_0": "True if the previous balance of the user is 0, false otherwise",
          "_1": "The scaled total debt of the reserve"
        }
      },
      "nonces(address)": {
        "params": {
          "owner": "The address for which the nonce is being returned"
        },
        "returns": {
          "_0": "The nonce value for the input address`"
        }
      },
      "scaledBalanceOf(address)": {
        "details": "The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index at the moment of the update",
        "params": {
          "user": "The user whose balance is calculated"
        },
        "returns": {
          "_0": "The scaled balance of the user"
        }
      },
      "scaledTotalSupply()": {
        "returns": {
          "_0": "The scaled total supply"
        }
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Being non transferrable, the debt token does not implement any of the standard ERC20 functions for transfer and allowance."
      }
    },
    "title": "VariableDebtToken",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "Get the domain separator for the token"
      },
      "UNDERLYING_ASSET_ADDRESS()": {
        "notice": "Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)"
      },
      "approveDelegation(address,uint256)": {
        "notice": "Delegates borrowing power to a user on the specific debt token. Delegation will still respect the liquidation constraints (even if delegated, a delegatee cannot force a delegator HF to go below 1)"
      },
      "borrowAllowance(address,address)": {
        "notice": "Returns the borrow allowance of the user"
      },
      "burn(address,uint256,uint256)": {
        "notice": "Burns user variable debt"
      },
      "delegationWithSig(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates borrowing power to a user on the specific debt token via ERC712 signature"
      },
      "getPreviousIndex(address)": {
        "notice": "Returns last index interest was accrued to the user's balance"
      },
      "getScaledUserBalanceAndSupply(address)": {
        "notice": "Returns the scaled balance of the user and the scaled total supply."
      },
      "initialize(address,address,uint8,string,string,bytes)": {
        "notice": "Initializes the debt token."
      },
      "mint(address,address,uint256,uint256)": {
        "notice": "Mints debt token to the `onBehalfOf` address"
      },
      "nonces(address)": {
        "notice": "Returns the nonce value for address specified as parameter"
      },
      "scaledBalanceOf(address)": {
        "notice": "Returns the scaled balance of the user."
      },
      "scaledTotalSupply()": {
        "notice": "Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)"
      }
    },
    "notice": "Implements a variable debt token to track the borrowing positions of users at variable rate mode",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17531,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 17534,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "initializing",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 17604,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "______gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 34145,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34147,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_domainSeparator",
        "offset": 0,
        "slot": "53",
        "type": "t_bytes32"
      },
      {
        "astId": 33922,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_borrowAllowances",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 33929,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_underlyingAsset",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 13223,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "lendingGauge",
        "offset": 0,
        "slot": "56",
        "type": "t_contract(ILendingGauge)5744"
      },
      {
        "astId": 13226,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "controller",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IGaugeController)5067"
      },
      {
        "astId": 13229,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "votingEscrow",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(IVotingEscrow)8026"
      },
      {
        "astId": 13233,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "historyGaugeRelativeWeight",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13237,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "workingBalances",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13239,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "workingSupply",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      },
      {
        "astId": 13243,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "integrateInvSupplyOf",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13247,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "integrateCheckpointOf",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13251,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "integrateFraction",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13254,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "65",
        "type": "t_bool"
      },
      {
        "astId": 13256,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_integrateInvSupply",
        "offset": 0,
        "slot": "66",
        "type": "t_uint256"
      },
      {
        "astId": 34309,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_userState",
        "offset": 0,
        "slot": "67",
        "type": "t_mapping(t_address,t_struct(UserState)34304_storage)"
      },
      {
        "astId": 34315,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 34317,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "69",
        "type": "t_uint256"
      },
      {
        "astId": 34319,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_name",
        "offset": 0,
        "slot": "70",
        "type": "t_string_storage"
      },
      {
        "astId": 34321,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "71",
        "type": "t_string_storage"
      },
      {
        "astId": 34323,
        "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "72",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGaugeController)5067": {
        "encoding": "inplace",
        "label": "contract IGaugeController",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingGauge)5744": {
        "encoding": "inplace",
        "label": "contract ILendingGauge",
        "numberOfBytes": "20"
      },
      "t_contract(IVotingEscrow)8026": {
        "encoding": "inplace",
        "label": "contract IVotingEscrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserState)34304_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IncentivizedERC20.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)34304_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UserState)34304_storage": {
        "encoding": "inplace",
        "label": "struct IncentivizedERC20.UserState",
        "members": [
          {
            "astId": 34301,
            "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 34303,
            "contract": "lend-core/contracts/protocol/tokenization/VariableDebtToken.sol:VariableDebtToken",
            "label": "additionalData",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}