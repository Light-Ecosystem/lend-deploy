{
  "address": "0x45893564ea46463600D4cA678227931a14A7ce7e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressesProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "k",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "b",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct DataTypes.Phase[]",
          "name": "_phases",
          "type": "tuple[]"
        }
      ],
      "name": "AddPhases",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "k",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "b",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.Phase[]",
          "name": "_phases",
          "type": "tuple[]"
        }
      ],
      "name": "addPhases",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "checkedGauge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "claimableTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IGaugeController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "futureEpochTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "hvCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "hvUpdateLiquidityLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_votingEscrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlyingAsset",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "integrateFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "integrateFractionOfHToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "integrateFractionOfVariableDebtToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isKilled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "kick",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ltToken",
      "outputs": [
        {
          "internalType": "contract ILT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "contract IMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "periodTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "phases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "k",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isKilled",
          "type": "bool"
        }
      ],
      "name": "setKilled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableDebtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAllocation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "userCheckpoint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "variableDebtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingEscrow",
      "outputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x57c7523b3462108b8fb95c1787d339c0359fc9c6e17fcced06e487241510cde2",
  "receipt": {
    "to": null,
    "from": "0x1Ee532cf775be02E0B306571e3555321FC75988d",
    "contractAddress": "0x45893564ea46463600D4cA678227931a14A7ce7e",
    "transactionIndex": 17,
    "gasUsed": "3488755",
    "logsBloom": "0x
    "blockHash": "0x27ef23c80c0ccaf22448ef91c0e379b10e6c228618d9d0293a0629ec44bd9b37",
    "transactionHash": "0x57c7523b3462108b8fb95c1787d339c0359fc9c6e17fcced06e487241510cde2",
    "logs": [],
    "blockNumber": 3915483,
    "cumulativeGasUsed": "11261359",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "546209111f7b58dd9954aeb4e65bc649",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"k\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DataTypes.Phase[]\",\"name\":\"_phases\",\"type\":\"tuple[]\"}],\"name\":\"AddPhases\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"k\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.Phase[]\",\"name\":\"_phases\",\"type\":\"tuple[]\"}],\"name\":\"addPhases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkedGauge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"claimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IGaugeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"hvCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"hvUpdateLiquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"integrateFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"integrateFractionOfHToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"integrateFractionOfVariableDebtToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isKilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"kick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ltToken\",\"outputs\":[{\"internalType\":\"contract ILT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"k\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isKilled\",\"type\":\"bool\"}],\"name\":\"setKilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableDebtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userCheckpoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"variableDebtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPhases((uint256,uint256,int256,uint256)[])\":{\"notice\":\"Add parameters for calculating fund utilization rate and allocation ratio\"},\"hvCheckpoint(address)\":{\"notice\":\"Reserve aggregation checkpoint\"},\"hvUpdateLiquidityLimit(address)\":{\"notice\":\"Reserve aggregation updateLiquidityLimit\"},\"integrateFraction(address)\":{\"notice\":\"Reserve incentive aggregation\"},\"updateAllocation()\":{\"notice\":\"Update debt token allocation ratio based on fund utilization rate\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lend-core/contracts/protocol/gauge/LendingGauge.sol\":\"LendingGauge\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xaab45993655e2e30909010506e0a120338362676a4047bb936c300a06297cc0f\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from './IERC20.sol';\\n\\ninterface IERC20Detailed is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0aca3719153dfa4191414080c7aa8d43f20a0dd206e89c3a38e3fb0e0c306de1\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n  /**\\n   * @dev Returns the downcasted uint224 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint224).\\n   *\\n   * Counterpart to Solidity's `uint224` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 224 bits\\n   */\\n  function toUint224(uint256 value) internal pure returns (uint224) {\\n    require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    return uint224(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint128 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint128).\\n   *\\n   * Counterpart to Solidity's `uint128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   */\\n  function toUint128(uint256 value) internal pure returns (uint128) {\\n    require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    return uint128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint96 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint96).\\n   *\\n   * Counterpart to Solidity's `uint96` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 96 bits\\n   */\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\n    require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    return uint96(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint64 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint64).\\n   *\\n   * Counterpart to Solidity's `uint64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   */\\n  function toUint64(uint256 value) internal pure returns (uint64) {\\n    require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    return uint64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint32 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint32).\\n   *\\n   * Counterpart to Solidity's `uint32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   */\\n  function toUint32(uint256 value) internal pure returns (uint32) {\\n    require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    return uint32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint16 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint16).\\n   *\\n   * Counterpart to Solidity's `uint16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   */\\n  function toUint16(uint256 value) internal pure returns (uint16) {\\n    require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    return uint16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint8 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint8).\\n   *\\n   * Counterpart to Solidity's `uint8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   */\\n  function toUint8(uint256 value) internal pure returns (uint8) {\\n    require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    return uint8(value);\\n  }\\n\\n  /**\\n   * @dev Converts a signed int256 into an unsigned uint256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be greater than or equal to 0.\\n   */\\n  function toUint256(int256 value) internal pure returns (uint256) {\\n    require(value >= 0, 'SafeCast: value must be positive');\\n    return uint256(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int128 from int256, reverting on\\n   * overflow (when the input is less than smallest int128 or\\n   * greater than largest int128).\\n   *\\n   * Counterpart to Solidity's `int128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt128(int256 value) internal pure returns (int128) {\\n    require(\\n      value >= type(int128).min && value <= type(int128).max,\\n      \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n    );\\n    return int128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int64 from int256, reverting on\\n   * overflow (when the input is less than smallest int64 or\\n   * greater than largest int64).\\n   *\\n   * Counterpart to Solidity's `int64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt64(int256 value) internal pure returns (int64) {\\n    require(\\n      value >= type(int64).min && value <= type(int64).max,\\n      \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n    );\\n    return int64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int32 from int256, reverting on\\n   * overflow (when the input is less than smallest int32 or\\n   * greater than largest int32).\\n   *\\n   * Counterpart to Solidity's `int32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt32(int256 value) internal pure returns (int32) {\\n    require(\\n      value >= type(int32).min && value <= type(int32).max,\\n      \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n    );\\n    return int32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int16 from int256, reverting on\\n   * overflow (when the input is less than smallest int16 or\\n   * greater than largest int16).\\n   *\\n   * Counterpart to Solidity's `int16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt16(int256 value) internal pure returns (int16) {\\n    require(\\n      value >= type(int16).min && value <= type(int16).max,\\n      \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n    );\\n    return int16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int8 from int256, reverting on\\n   * overflow (when the input is less than smallest int8 or\\n   * greater than largest int8).\\n   *\\n   * Counterpart to Solidity's `int8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function toInt8(int256 value) internal pure returns (int8) {\\n    require(\\n      value >= type(int8).min && value <= type(int8).max,\\n      \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n    );\\n    return int8(value);\\n  }\\n\\n  /**\\n   * @dev Converts an unsigned uint256 into a signed int256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be less than or equal to maxInt256.\\n   */\\n  function toInt256(uint256 value) internal pure returns (int256) {\\n    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n    require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n    return int256(value);\\n  }\\n}\\n\",\"keccak256\":\"0x07e49e2bdfefb9f414444bd6be012b1e07b1f2a56d6a3fca5ab3f5733dd8abd0\",\"license\":\"MIT\"},\"lend-core/contracts/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(\\n      initializing || isConstructor() || !initialized,\\n      'Contract instance has already been initialized'\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    uint256 cs;\\n    //solium-disable-next-line\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x88328665bf4a9ca3d42f14170a64c2b87a40f34ddeb1bf1d550d037be0718a52\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IACLManager\\n * @author HopeLend\\n * @notice Defines the basic interface for the ACL Manager\\n */\\ninterface IACLManager {\\n  /**\\n   * @notice Returns the contract address of the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Returns the identifier of the PoolAdmin role\\n   * @return The id of the PoolAdmin role\\n   */\\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the EmergencyAdmin role\\n   * @return The id of the EmergencyAdmin role\\n   */\\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the RiskAdmin role\\n   * @return The id of the RiskAdmin role\\n   */\\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the FlashBorrower role\\n   * @return The id of the FlashBorrower role\\n   */\\n  function FLASH_BORROWER_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the Bridge role\\n   * @return The id of the Bridge role\\n   */\\n  function BRIDGE_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the AssetListingAdmin role\\n   * @return The id of the AssetListingAdmin role\\n   */\\n  function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Set the role as admin of a specific role.\\n   * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n   * @param role The role to be managed by the admin role\\n   * @param adminRole The admin role\\n   */\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n  /**\\n   * @notice Adds a new admin as PoolAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addPoolAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as PoolAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removePoolAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is PoolAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is PoolAdmin, false otherwise\\n   */\\n  function isPoolAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as EmergencyAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as EmergencyAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is EmergencyAdmin, false otherwise\\n   */\\n  function isEmergencyAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as RiskAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addRiskAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as RiskAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeRiskAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is RiskAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is RiskAdmin, false otherwise\\n   */\\n  function isRiskAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new address as FlashBorrower\\n   * @param borrower The address of the new FlashBorrower\\n   */\\n  function addFlashBorrower(address borrower) external;\\n\\n  /**\\n   * @notice Removes an address as FlashBorrower\\n   * @param borrower The address of the FlashBorrower to remove\\n   */\\n  function removeFlashBorrower(address borrower) external;\\n\\n  /**\\n   * @notice Returns true if the address is FlashBorrower, false otherwise\\n   * @param borrower The address to check\\n   * @return True if the given address is FlashBorrower, false otherwise\\n   */\\n  function isFlashBorrower(address borrower) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new address as Bridge\\n   * @param bridge The address of the new Bridge\\n   */\\n  function addBridge(address bridge) external;\\n\\n  /**\\n   * @notice Removes an address as Bridge\\n   * @param bridge The address of the bridge to remove\\n   */\\n  function removeBridge(address bridge) external;\\n\\n  /**\\n   * @notice Returns true if the address is Bridge, false otherwise\\n   * @param bridge The address to check\\n   * @return True if the given address is Bridge, false otherwise\\n   */\\n  function isBridge(address bridge) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as AssetListingAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addAssetListingAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as AssetListingAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeAssetListingAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is AssetListingAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is AssetListingAdmin, false otherwise\\n   */\\n  function isAssetListingAdmin(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x26a68bad4080948b82a2203696c711ceeeb5e7bbcfd222856555ab9ae5d60e98\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\n\\ninterface IGaugeController {\\n    struct Point {\\n        uint256 bias;\\n        uint256 slope;\\n    }\\n\\n    struct VotedSlope {\\n        uint256 slope;\\n        uint256 power;\\n        uint256 end;\\n    }\\n\\n    struct UserPoint {\\n        uint256 bias;\\n        uint256 slope;\\n        uint256 ts;\\n        uint256 blk;\\n    }\\n\\n    event AddType(string name, int128 type_id);\\n\\n    event NewTypeWeight(int128 indexed type_id, uint256 time, uint256 weight, uint256 total_weight);\\n\\n    event NewGaugeWeight(address indexed gauge_address, uint256 time, uint256 weight, uint256 total_weight);\\n\\n    event VoteForGauge(address indexed user, address indexed gauge_address, uint256 time, uint256 weight);\\n\\n    event NewGauge(address indexed gauge_address, int128 gauge_type, uint256 weight);\\n\\n    /**\\n     * @notice Get gauge type for address\\n     *  @param _addr Gauge address\\n     * @return Gauge type id\\n     */\\n    function gaugeTypes(address _addr) external view returns (int128);\\n\\n    /**\\n     * @notice Add gauge `addr` of type `gauge_type` with weight `weight`\\n     * @param addr Gauge address\\n     * @param gaugeType Gauge type\\n     * @param weight Gauge weight\\n     */\\n    function addGauge(address addr, int128 gaugeType, uint256 weight) external;\\n\\n    /**\\n     * @notice Checkpoint to fill data common for all gauges\\n     */\\n    function checkpoint() external;\\n\\n    /**\\n     * @notice Checkpoint to fill data for both a specific gauge and common for all gauge\\n     * @param addr Gauge address\\n     */\\n    function checkpointGauge(address addr) external;\\n\\n    /**\\n     * @notice Get Gauge relative weight (not more than 1.0) normalized to 1e18(e.g. 1.0 == 1e18). Inflation which will be received by\\n     * it is inflation_rate * relative_weight / 1e18\\n     * @param gaugeAddress Gauge address\\n     * @param time Relative weight at the specified timestamp in the past or present\\n     * @return Value of relative weight normalized to 1e18\\n     */\\n    function gaugeRelativeWeight(address gaugeAddress, uint256 time) external view returns (uint256);\\n\\n    /**\\n     *  @notice Get gauge weight normalized to 1e18 and also fill all the unfilled values for type and gauge records\\n     * @dev Any address can call, however nothing is recorded if the values are filled already\\n     * @param gaugeAddress Gauge address\\n     * @param time Relative weight at the specified timestamp in the past or present\\n     * @return Value of relative weight normalized to 1e18\\n     */\\n    function gaugeRelativeWeightWrite(address gaugeAddress, uint256 time) external returns (uint256);\\n\\n    /**\\n     * @notice Add gauge type with name `_name` and weight `weight`\\n     * @dev only owner call\\n     * @param _name Name of gauge type\\n     * @param weight Weight of gauge type\\n     */\\n    function addType(string memory _name, uint256 weight) external;\\n\\n    /**\\n     * @notice Change gauge type `type_id` weight to `weight`\\n     * @dev only owner call\\n     * @param type_id Gauge type id\\n     * @param weight New Gauge weight\\n     */\\n    function changeTypeWeight(int128 type_id, uint256 weight) external;\\n\\n    /**\\n     * @notice Change weight of gauge `addr` to `weight`\\n     * @param gaugeAddress `Gauge` contract address\\n     * @param weight New Gauge weight\\n     */\\n    function changeGaugeWeight(address gaugeAddress, uint256 weight) external;\\n\\n    /**\\n     * @notice Allocate voting power for changing pool weights\\n     * @param gaugeAddress Gauge which `msg.sender` votes for\\n     * @param userWeight Weight for a gauge in bps (units of 0.01%). Minimal is 0.01%. Ignored if 0.\\n     *        example: 10%=1000,3%=300,0.01%=1,100%=10000\\n     */\\n    function voteForGaugeWeights(address gaugeAddress, uint256 userWeight) external;\\n\\n    /**\\n     * @notice Get current gauge weight\\n     * @param addr Gauge address\\n     * @return Gauge weight\\n     */\\n\\n    function getGaugeWeight(address addr) external view returns (uint256);\\n\\n    /**\\n     * @notice Get current type weight\\n     * @param type_id Type id\\n     * @return Type weight\\n     */\\n    function getTypeWeight(int128 type_id) external view returns (uint256);\\n\\n    /**\\n     * @notice Get current total (type-weighted) weight\\n     * @return Total weight\\n     */\\n    function getTotalWeight() external view returns (uint256);\\n\\n    /**\\n     * @notice Get sum of gauge weights per type\\n     * @param type_id Type id\\n     * @return Sum of gauge weights\\n     */\\n    function getWeightsSumPreType(int128 type_id) external view returns (uint256);\\n\\n    function votingEscrow() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2ad7cc0ae48ada235c39fc2337734bc4ddf772a8d0fd67c6cbb677126be5dc73\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IHTokenRewards.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\nimport '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface IHTokenRewards {\\n  function setLendingGauge(address _lendingGauge) external;\\n\\n  function integrateFraction(address _addr) external view returns (uint256);\\n\\n  function balanceOf(address _addr) external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function checkpoint(\\n    address _addr,\\n    uint256 _allocation,\\n    DataTypes.CheckPointParameters calldata _st\\n  ) external;\\n\\n  function updateLiquidityLimit(address _addr) external;\\n\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n  function workingBalances(address _addr) external view returns (uint256);\\n\\n  function integrateCheckpointOf(address _addr) external view returns (uint256);\\n\\n  function lpBalanceOf(address _addr) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4015363d3aadc9eaf275d74e1011827a5d384879eb1f5939edeba6936b42ffa4\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/ILT.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\n\\ninterface ILT {\\n    /**\\n     * @dev Emitted when LT inflation rate update\\n     *\\n     * Note once a year\\n     */\\n    event UpdateMiningParameters(uint256 time, uint256 rate, uint256 supply);\\n\\n    /**\\n     * @dev Emitted when set LT minter,can set the minter only once, at creation\\n     */\\n    event SetMinter(address indexed minter);\\n\\n    function rate() external view returns (uint256);\\n\\n    /**\\n     * @notice Update mining rate and supply at the start of the epoch\\n     * @dev   Callable by any address, but only once per epoch\\n     *        Total supply becomes slightly larger if this function is called late\\n     */\\n    function updateMiningParameters() external;\\n\\n    /**\\n     * @notice Get timestamp of the next mining epoch start while simultaneously updating mining parameters\\n     * @return Timestamp of the next epoch\\n     */\\n    function futureEpochTimeWrite() external returns (uint256);\\n\\n    /**\\n     * @notice Current number of tokens in existence (claimed or unclaimed)\\n     */\\n    function availableSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice How much supply is mintable from start timestamp till end timestamp\\n     * @param start Start of the time interval (timestamp)\\n     * @param end End of the time interval (timestamp)\\n     * @return Tokens mintable from `start` till `end`\\n     */\\n    function mintableInTimeframe(uint256 start, uint256 end) external view returns (uint256);\\n\\n    /**\\n     *  @notice Set the minter address\\n     *  @dev Only callable once, when minter has not yet been set\\n     *  @param _minter Address of the minter\\n     */\\n    function setMinter(address _minter) external;\\n\\n    /**\\n     *  @notice Mint `value` tokens and assign them to `to`\\n     *   @dev Emits a Transfer event originating from 0x00\\n     *   @param to The account that will receive the created tokens\\n     *   @param value The amount that will be created\\n     *   @return bool success\\n     */\\n    function mint(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @notice Burn `value` tokens belonging to `msg.sender`\\n     * @dev Emits a Transfer event with a destination of 0x00\\n     * @param value The amount that will be burned\\n     * @return bool success\\n     */\\n    function burn(uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5d76c16bf5bc36c059bc40f6f16499ded973a07ff4cdc944e486f7d3965a73a9\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/ILendingGauge.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport './ILT.sol';\\nimport './IGaugeController.sol';\\nimport './IVotingEscrow.sol';\\nimport './IMinter.sol';\\nimport '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingGauge {\\n  /**\\n   * @dev Emitted when LendingGauge is created.\\n   * @param addressesProvider The address of the registered PoolAddressesProvider\\n   * @param assset The address of the underlying asset of the reserve\\n   * @param _phases Utilization rate and allocation ratio parameter configuration\\n   */\\n  event AddPhases(address indexed addressesProvider, address indexed assset, DataTypes.Phase[] _phases);\\n\\n  function initialize(\\n    address _pool,\\n    address _minter,\\n    address _votingEscrow,\\n    address _underlyingAsset\\n  ) external;\\n\\n  function votingEscrow() external view returns (IVotingEscrow);\\n\\n  function controller() external view returns (IGaugeController);\\n\\n  function minter() external view returns (IMinter);\\n\\n  function updateAllocation() external returns (bool);\\n\\n  function isKilled() external returns (bool);\\n\\n  function hvCheckpoint(address _addr) external;\\n\\n  function hvUpdateLiquidityLimit(address _addr) external;\\n}\\n\",\"keccak256\":\"0x77252bef599685bee767d47059cd2992d43e1bea42e59f5ec729386d90cfac05\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IMinter {\\n    function token() external view returns (address);\\n\\n    function controller() external view returns (address);\\n\\n    function minted(address user, address gauge) external view returns (uint256);\\n\\n    function mint(address gaugeAddress) external;\\n}\\n\",\"keccak256\":\"0xed25776681be143c0de2df9b95f3a46f392f4e26db10824fa9761113c79763c0\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author HopeLend\\n * @notice Defines the basic interface for an HopeLend Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the hTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the hTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of hTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useHTokens True if the repayment is done using hTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useHTokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveHToken True if the liquidators wants to receive the collateral hTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveHToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted hTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of hTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the hTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying hTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the hTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of hTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the hTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of hTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent hTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole hToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve hTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual hToken dust balance, if the user hToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithHTokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveHToken True if the liquidators wants to receive the collateral hTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveHToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.hopeLend.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.hopeLend.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an hToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param hTokenAddress The address of the hToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address hTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an hToken transfer\\n   * @dev Only callable by the overlying hToken of the `asset`\\n   * @param asset The address of the underlying asset of the hToken\\n   * @param from The user from which the hTokens are transferred\\n   * @param to The user receiving the hTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The hToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The hToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to hToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Updates the percent fo fee to Vault.\\n   * @param feeToVaultPercent The percent fo fee to Vault. 100% = 1e4\\n   */\\n  function updateFeeToVaultPercent(uint256 feeToVaultPercent) external;\\n\\n    /**\\n   * @notice Returns the percent of fee\\n   * @return feeToVaultPercent The the percent of fee, 100% = 1e4\\n   */\\n  function getFeeToVaultPercent() external view returns (uint256 feeToVaultPercent);\\n\\n  /**\\n   * @notice Returns the address of vault\\n   * @return feeToVault The the address of vault\\n   */\\n  function getFeeToVault() external view returns (address feeToVault);\\n\\n  /**\\n   * @notice Set the address of vault\\n   * @param feeToVault The id of the category\\n   */\\n  function setFeeToVault(address feeToVault) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of hTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying hTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the hTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of hTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc19137da96d8db950726e37ab4ac16f10939f61a2bf119dc4f7a5cf286ed6943\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author HopeLend\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the HopeLend market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple HopeLend markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x38f1da33df9b0e41408d012e128a385ffe79ab22431815fe1e8ce3e77caa5312\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IVariableDebtTokenRewards.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\nimport '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface IVariableDebtTokenRewards {\\n  function setLendingGauge(address _lendingGauge) external;\\n\\n  function integrateFraction(address _addr) external view returns (uint256);\\n\\n  function balanceOf(address _addr) external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function checkpoint(\\n    address _addr,\\n    uint256 _allocation,\\n    DataTypes.CheckPointParameters calldata _st\\n  ) external;\\n\\n  function updateLiquidityLimit(address _addr) external;\\n\\n  function workingBalances(address _addr) external view returns (uint256);\\n\\n  function integrateCheckpointOf(address _addr) external view returns (uint256);\\n\\n  function lpBalanceOf(address _addr) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b78fb8016620e76f5c942c656915e76053e9612bf245b8e6a251caaadc429c7\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\ninterface IVotingEscrow {\\n    struct Point {\\n        int256 bias;\\n        int256 slope;\\n        uint256 ts;\\n        uint256 blk;\\n    }\\n\\n    struct LockedBalance {\\n        int256 amount;\\n        uint256 end;\\n    }\\n\\n    event Deposit(\\n        address indexed provider,\\n        address indexed beneficiary,\\n        uint256 value,\\n        uint256 afterAmount,\\n        uint256 indexed locktime,\\n        uint256 _type,\\n        uint256 ts\\n    );\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n\\n    event Supply(uint256 prevSupply, uint256 supply);\\n\\n    event SetSmartWalletChecker(address sender, address indexed newChecker, address oldChecker);\\n\\n    event SetPermit2Address(address oldAddress, address newAddress);\\n\\n    /***\\n     * @dev Get the most recently recorded rate of voting power decrease for `_addr`\\n     * @param _addr Address of the user wallet\\n     * @return Value of the slope\\n     */\\n    function getLastUserSlope(address _addr) external view returns (int256);\\n\\n    /***\\n     * @dev Get the timestamp for checkpoint `_idx` for `_addr`\\n     * @param _addr User wallet address\\n     * @param _idx User epoch number\\n     * @return Epoch time of the checkpoint\\n     */\\n    function userPointHistoryTs(address _addr, uint256 _idx) external view returns (uint256);\\n\\n    /***\\n     * @dev Get timestamp when `_addr`'s lock finishes\\n     * @param _addr User wallet\\n     * @return Epoch time of the lock end\\n     */\\n    function lockedEnd(address _addr) external view returns (uint256);\\n\\n    function createLock(uint256 _value, uint256 _unlockTime, uint256 nonce, uint256 deadline, bytes memory signature) external;\\n\\n    function createLockFor(\\n        address _beneficiary,\\n        uint256 _value,\\n        uint256 _unlockTime,\\n        uint256 nonce,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n\\n    function increaseAmount(uint256 _value, uint256 nonce, uint256 deadline, bytes memory signature) external;\\n\\n    function increaseAmountFor(address _beneficiary, uint256 _value, uint256 nonce, uint256 deadline, bytes memory signature) external;\\n\\n    function increaseUnlockTime(uint256 _unlockTime) external;\\n\\n    function checkpointSupply() external;\\n\\n    function withdraw() external;\\n\\n    function epoch() external view returns (uint256);\\n\\n    function getUserPointHistory(address _userAddress, uint256 _index) external view returns (Point memory);\\n\\n    function supplyPointHistory(uint256 _index) external view returns (int256 bias, int256 slope, uint256 ts, uint256 blk);\\n\\n    /***\\n     * @notice Get the current voting power for `msg.sender`\\n     * @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n     * @param _addr User wallet address\\n     * @param _t Epoch time to return voting power at\\n     * @return User voting power\\n     * @dev return the present voting power if _t is 0\\n     */\\n    function balanceOfAtTime(address _addr, uint256 _t) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalSupplyAtTime(uint256 _t) external view returns (uint256);\\n\\n    function userPointEpoch(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaedac39ee5a1099b6fd2a58f417cd0c8c0891399e1fc73f0a5f636dee861d09b\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/gauge/LendingGauge.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/ILT.sol';\\nimport '../../interfaces/IGaugeController.sol';\\nimport '../../interfaces/IVotingEscrow.sol';\\nimport '../../interfaces/IMinter.sol';\\nimport '../../dependencies/openzeppelin/contracts/IERC20Detailed.sol';\\nimport '../../interfaces/IHTokenRewards.sol';\\nimport '../../interfaces/IVariableDebtTokenRewards.sol';\\nimport '../../interfaces/IACLManager.sol';\\nimport '../../interfaces/IPool.sol';\\nimport '../../interfaces/ILendingGauge.sol';\\nimport '../../dependencies/openzeppelin/upgradeability/Initializable.sol';\\nimport '../../dependencies/openzeppelin/contracts/SafeCast.sol';\\nimport '../libraries/types/DataTypes.sol';\\nimport '../libraries/helpers/Errors.sol';\\n\\ncontract LendingGauge is ILendingGauge, Initializable {\\n  using WadRayMath for uint256;\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n\\n  /**\\n   * @dev Only pool admin can call functions marked by this modifier.\\n   */\\n  modifier onlyPoolAdmin() {\\n    IACLManager aclManager = IACLManager(_addressesProvider.getACLManager());\\n    require(aclManager.isPoolAdmin(msg.sender), Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Only pool can call functions marked by this modifier.\\n   */\\n  modifier onlyPool() {\\n    require(msg.sender == address(POOL), Errors.CALLER_MUST_BE_POOL);\\n    _;\\n  }\\n\\n  uint256 internal constant _DAY = 86400;\\n  uint256 internal constant _WEEK = _DAY * 7;\\n\\n  IPoolAddressesProvider internal _addressesProvider;\\n  IPool public POOL;\\n  address public hToken;\\n  address public variableDebtToken;\\n  address public stableDebtToken;\\n  address public underlyingAsset;\\n\\n  IMinter public minter;\\n  ILT public ltToken;\\n  IVotingEscrow public votingEscrow;\\n  IGaugeController public controller;\\n\\n  address public factory;\\n  string public name;\\n  bool public isKilled;\\n\\n  uint256 public period;\\n  mapping(uint256 => uint256) public periodTimestamp;\\n  uint256 public inflationRate;\\n  uint256 public futureEpochTime;\\n\\n  mapping(uint256 => bool) public checkedGauge;\\n  DataTypes.Phase[] public phases;\\n  uint256 public borrowAllocation;\\n\\n  constructor() {\\n    factory = address(0xdead);\\n  }\\n\\n  function initialize(\\n    address _pool,\\n    address _minter,\\n    address _votingEscrow,\\n    address _underlyingAsset\\n  ) public override {\\n    require(_pool != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    require(_minter != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    require(_votingEscrow != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    require(_underlyingAsset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\n    require(factory == address(0), 'GP002');\\n    factory = msg.sender;\\n    POOL = IPool(_pool);\\n    _addressesProvider = POOL.ADDRESSES_PROVIDER();\\n    minter = IMinter(_minter);\\n    ltToken = ILT(minter.token());\\n    votingEscrow = IVotingEscrow(_votingEscrow);\\n    controller = IGaugeController(minter.controller());\\n    DataTypes.ReserveData memory reserve = POOL.getReserveData(_underlyingAsset);\\n    hToken = reserve.hTokenAddress;\\n    variableDebtToken = reserve.variableDebtTokenAddress;\\n    stableDebtToken = reserve.stableDebtTokenAddress;\\n    underlyingAsset = _underlyingAsset;\\n    name = string.concat(IERC20Detailed(_underlyingAsset).symbol(), ' LendingGauge');\\n    periodTimestamp[0] = block.timestamp;\\n    inflationRate = ltToken.rate();\\n    futureEpochTime = ltToken.futureEpochTimeWrite();\\n  }\\n\\n  /**\\n   * Add parameters for calculating fund utilization rate and allocation ratio\\n   */\\n  function addPhases(DataTypes.Phase[] calldata _phases) external onlyPoolAdmin {\\n    require(_phases.length >= 4 && _phases.length <= 10, Errors.INVALID_PHASES_LENGTH);\\n    delete phases;\\n    for (uint256 i = 0; i < _phases.length; i++) {\\n      _addPhase(_phases[i]);\\n    }\\n    emit AddPhases(address(_addressesProvider), underlyingAsset, _phases);\\n  }\\n\\n  /**\\n   * Update debt token allocation ratio based on fund utilization rate\\n   */\\n  function updateAllocation() external override onlyPool returns (bool) {\\n    uint256 stableDebtTokenTotalSupply = IERC20(stableDebtToken).totalSupply();\\n    uint256 variableDebtTokenTotalSupply = IERC20(variableDebtToken).totalSupply();\\n    uint256 totalDebt = stableDebtTokenTotalSupply + variableDebtTokenTotalSupply;\\n    if (totalDebt == 0) {\\n      borrowAllocation = 0;\\n      return true;\\n    }\\n    uint256 availableLiquidity = IERC20(underlyingAsset).balanceOf(hToken);\\n    uint256 availableLiquidityPlusDebt = availableLiquidity + totalDebt;\\n    borrowAllocation = _getAllocationByUtilizationRate(totalDebt.rayDiv(availableLiquidityPlusDebt));\\n    return true;\\n  }\\n\\n  /**\\n   * Reserve incentive aggregation\\n   */\\n  function integrateFraction(address _addr) public view returns (uint256) {\\n    return IHTokenRewards(hToken).integrateFraction(_addr) + IVariableDebtTokenRewards(variableDebtToken).integrateFraction(_addr);\\n  }\\n\\n  /**\\n   * Reserve aggregation checkpoint\\n   */\\n  function hvCheckpoint(address _addr) public override {\\n    DataTypes.CheckPointParameters memory _st;\\n    _st.period = period;\\n    _st.periodTime = periodTimestamp[_st.period];\\n    _st.rate = inflationRate;\\n    _st.newRate = _st.rate;\\n    _st.prevFutureEpoch = futureEpochTime;\\n    if (_st.prevFutureEpoch <= block.timestamp) {\\n      futureEpochTime = ltToken.futureEpochTimeWrite();\\n      _st.newRate = ltToken.rate();\\n      inflationRate = _st.newRate;\\n    }\\n    uint256 _weekTime = (block.timestamp / _WEEK) * _WEEK;\\n    if (!checkedGauge[_weekTime]) {\\n      checkedGauge[_weekTime] = true;\\n      controller.checkpointGauge(address(this));\\n    }\\n    if (isKilled) {\\n      // Stop distributing inflation as soon as killed\\n      _st.rate = 0;\\n      _st.newRate = 0;\\n    }\\n    if (IHTokenRewards(hToken).totalSupply() != 0) {\\n      IHTokenRewards(hToken).checkpoint(_addr, _calRelativeWeightByAllocation(hToken), _st);\\n    }\\n    if (IVariableDebtTokenRewards(variableDebtToken).totalSupply() != 0) {\\n      IVariableDebtTokenRewards(variableDebtToken).checkpoint(_addr, _calRelativeWeightByAllocation(variableDebtToken), _st);\\n    }\\n    _st.period += 1;\\n    period = _st.period;\\n    periodTimestamp[_st.period] = block.timestamp;\\n  }\\n\\n  /**\\n   * Reserve aggregation updateLiquidityLimit\\n   */\\n  function hvUpdateLiquidityLimit(address _addr) external override {\\n    if (IHTokenRewards(hToken).totalSupply() != 0) {\\n      IHTokenRewards(hToken).updateLiquidityLimit(_addr);\\n    }\\n    if (IVariableDebtTokenRewards(variableDebtToken).totalSupply() != 0) {\\n      IVariableDebtTokenRewards(variableDebtToken).updateLiquidityLimit(_addr);\\n    }\\n  }\\n\\n  /***\\n   * @notice Record a checkpoint for `_addr`\\n   * @param _addr User address\\n   * @return bool success\\n   */\\n  function userCheckpoint(address _addr) external returns (bool) {\\n    require((msg.sender == _addr) || (msg.sender == address(minter)), 'GP000');\\n    _userCheckpoint(_addr);\\n    return true;\\n  }\\n\\n  /***\\n   * @notice Get the number of claimable tokens per user\\n   * @dev This function should be manually changed to \\\"view\\\" in the ABI\\n   * @return uint256 number of claimable tokens per user\\n   */\\n  function claimableTokens(address _addr) external returns (uint256) {\\n    hvCheckpoint(_addr);\\n    return (integrateFraction(_addr) - minter.minted(_addr, address(this)));\\n  }\\n\\n  /***\\n   * @notice Get the number of integrateFraction(hToken) value per user\\n   * @dev This function should be manually changed to \\\"view\\\" in the ABI\\n   * @return uint256 number of integrateFraction(hToken) value per user\\n   */\\n  function integrateFractionOfHToken(address _addr) external returns (uint256) {\\n    hvCheckpoint(_addr);\\n    return IHTokenRewards(hToken).integrateFraction(_addr);\\n  }\\n\\n  /***\\n   * @notice Get the number of integrateFraction(vdToken) value per user\\n   * @dev This function should be manually changed to \\\"view\\\" in the ABI\\n   * @return uint256 number of integrateFraction(vdToken) value per user\\n   */\\n  function integrateFractionOfVariableDebtToken(address _addr) external returns (uint256) {\\n    hvCheckpoint(_addr);\\n    return IVariableDebtTokenRewards(variableDebtToken).integrateFraction(_addr);\\n  }\\n\\n  /***\\n   * @notice Set the killed status for this contract\\n   * @dev When killed, the gauge always yields a rate of 0 and so cannot mint LT\\n   * @param _is_killed Killed status to set\\n   */\\n  function setKilled(bool _isKilled) external onlyPoolAdmin {\\n    isKilled = _isKilled;\\n  }\\n\\n  /***\\n   * @notice Kick `_addr` for abusing their boost\\n   * @dev Only if either they had another voting event, or their voting escrow lock expired\\n   * @param _addr Address to kick\\n   */\\n  function kick(address _addr) external {\\n    uint256 _hTokenLast = IHTokenRewards(hToken).integrateCheckpointOf(_addr);\\n    uint256 _variableDebtTokenLast = IVariableDebtTokenRewards(variableDebtToken).integrateCheckpointOf(_addr);\\n    uint256 _tVe = votingEscrow.userPointHistoryTs(_addr, votingEscrow.userPointEpoch(_addr));\\n    uint256 _hTokenBalance = IHTokenRewards(hToken).lpBalanceOf(_addr);\\n    uint256 _variableDebtTokenBalance = IVariableDebtTokenRewards(variableDebtToken).lpBalanceOf(_addr);\\n\\n    require(votingEscrow.balanceOfAtTime(_addr, block.timestamp) == 0 || _tVe > _hTokenLast || _tVe > _variableDebtTokenLast, 'GP001');\\n    require(\\n      IHTokenRewards(hToken).workingBalances(_addr) > (_hTokenBalance * 40) / 100 ||\\n        IVariableDebtTokenRewards(variableDebtToken).workingBalances(_addr) > (_variableDebtTokenBalance * 40) / 100,\\n      'GP001'\\n    );\\n\\n    _userCheckpoint(_addr);\\n  }\\n\\n  function _addPhase(DataTypes.Phase memory _phase) internal {\\n    require(_phase.end > _phase.start, Errors.LENDING_GAUGE_PERCENTAGE_NOT_MATCH);\\n    require(phases.length == 0 || _phase.start == phases[phases.length - 1].end, Errors.LENDING_GAUGE_PERCENTAGE_NOT_MATCH);\\n    phases.push(DataTypes.Phase(_phase.start, _phase.end, _phase.k, _phase.b));\\n  }\\n\\n  /**\\n   * Calculate the allocation ratio between HToken and DebtToken\\n   * @param _tokenAddr hToken\\u3001vdToken address\\n   */\\n  function _calRelativeWeightByAllocation(address _tokenAddr) private view returns (uint256) {\\n    return _tokenAddr == hToken ? WadRayMath.RAY - borrowAllocation : borrowAllocation;\\n  }\\n\\n  /**\\n   * Calculate the debt token allocation ratio based on fund utilization rate\\n   * @dev borrowAllocation = kx + b. k = (y2 - y1) / (x2 - x1). b = y1 - k * x1.\\n   * @param _utilizationRate Utilization rate\\n   */\\n  function _getAllocationByUtilizationRate(uint256 _utilizationRate) internal view returns (uint256) {\\n    require(phases.length > 0, Errors.PHASES_NOT_DEFINED);\\n    if (_utilizationRate == 0) {\\n      return 0;\\n    }\\n    for (uint256 i = 0; i < phases.length; i++) {\\n      if (_utilizationRate > phases[i].start && _utilizationRate <= phases[i].end) {\\n        int256 _borrowAllocation = (phases[i].k * _utilizationRate.toInt256()) / WadRayMath.RAY.toInt256() + phases[i].b.toInt256();\\n        require(_borrowAllocation >= 0, Errors.MUST_BE_NON_NEGATIVE);\\n        return _borrowAllocation.toUint256();\\n      }\\n    }\\n    return 0;\\n  }\\n\\n  /***\\n   * @notice Record a checkpoint for `_addr`\\n   * @param _addr User address\\n   * @return bool success\\n   */\\n  function _userCheckpoint(address _addr) internal {\\n    DataTypes.CheckPointParameters memory _st;\\n    _st.period = period;\\n    _st.periodTime = periodTimestamp[_st.period];\\n    _st.rate = inflationRate;\\n    _st.newRate = _st.rate;\\n    _st.prevFutureEpoch = futureEpochTime;\\n    if (_st.prevFutureEpoch <= block.timestamp) {\\n      futureEpochTime = ltToken.futureEpochTimeWrite();\\n      _st.newRate = ltToken.rate();\\n      inflationRate = _st.newRate;\\n    }\\n    uint256 _weekTime = (block.timestamp / _WEEK) * _WEEK;\\n    if (!checkedGauge[_weekTime]) {\\n      checkedGauge[_weekTime] = true;\\n      controller.checkpointGauge(address(this));\\n    }\\n    if (isKilled) {\\n      // Stop distributing inflation as soon as killed\\n      _st.rate = 0;\\n      _st.newRate = 0;\\n    }\\n    if (IHTokenRewards(hToken).totalSupply() != 0) {\\n      IHTokenRewards(hToken).checkpoint(_addr, _calRelativeWeightByAllocation(hToken), _st);\\n      IHTokenRewards(hToken).updateLiquidityLimit(_addr);\\n    }\\n    if (IVariableDebtTokenRewards(variableDebtToken).totalSupply() != 0) {\\n      IVariableDebtTokenRewards(variableDebtToken).checkpoint(_addr, _calRelativeWeightByAllocation(variableDebtToken), _st);\\n      IVariableDebtTokenRewards(variableDebtToken).updateLiquidityLimit(_addr);\\n    }\\n    _st.period += 1;\\n    period = _st.period;\\n    periodTimestamp[_st.period] = block.timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x78597e12c5ae59141847c1a1de36e6116c2860eaf16833d56aff56fc076d6c2d\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Errors library\\n * @author HopeLend\\n * @notice Defines the error messages emitted by the different contracts of the HopeLend protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_HTOKEN = '11'; // 'The caller of the function is not an HToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (hToken supply or accruedToTreasury)'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\n  string public constant FAILOVER_ALREADY_ACTIVE = '92'; // Failover is already active\\n  string public constant FAILOVER_ALREADY_DEACTIVATED = '93'; // Failover is already deactivated\\n  string public constant CALLER_MUST_BE_LENDING_GAUGE = '94'; // 'The caller of this function must be a lending gauge'\\n  string public constant PARAMETER_ADDRESS_NOT_ZERO = '95'; // 'Parameter address is not zero'\\n  string public constant LENDING_GAUGE_PERCENTAGE_NOT_MATCH = '96'; // 'LendingGauge end percentage must greater than start percentage && start percentage must be increasing'\\n  string public constant INVALID_PHASES_LENGTH = '97'; // 'LendingGauge phases length invalid'\\n  string public constant PHASES_NOT_DEFINED = '98'; // 'LendingGauge phases not defined'\\n  string public constant MUST_BE_NON_NEGATIVE = '99'; // 'Result must be non-negative'\\n  string public constant INVALID_FEE_TO_VAULT_PERCENT = '100'; // Invalid FeeToVaultPercent \\n}\\n\",\"keccak256\":\"0xe154c34ecd3b9b957750d4b1f48a50ae6b58be3e6ea67566f8a35bf75ce1569f\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title WadRayMath library\\n * @author HopeLend\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary WadRayMath {\\n  // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant HALF_WAD = 0.5e18;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant HALF_RAY = 0.5e27;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a*b, in wad\\n   */\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_WAD), WAD)\\n    }\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @param b Wad\\n   * @return c = a/b, in wad\\n   */\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, WAD), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @notice Multiplies two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raymul b\\n   */\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n    assembly {\\n      if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, b), HALF_RAY), RAY)\\n    }\\n  }\\n\\n  /**\\n   * @notice Divides two ray, rounding half up to the nearest ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @param b Ray\\n   * @return c = a raydiv b\\n   */\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n    assembly {\\n      if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n        revert(0, 0)\\n      }\\n\\n      c := div(add(mul(a, RAY), div(b, 2)), b)\\n    }\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Ray\\n   * @return b = a converted to wad, rounded half up to the nearest wad\\n   */\\n  function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n    assembly {\\n      b := div(a, WAD_RAY_RATIO)\\n      let remainder := mod(a, WAD_RAY_RATIO)\\n      if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n        b := add(b, 1)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n   * @param a Wad\\n   * @return b = a converted in ray\\n   */\\n  function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n    // to avoid overflow, b/WAD_RAY_RATIO == a\\n    assembly {\\n      b := mul(a, WAD_RAY_RATIO)\\n\\n      if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n        revert(0, 0)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x29a4cb6ebf96b3829c062f42a6b5ab3886b40f2a57d19d60f4aae47de6a08710\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //hToken address\\n    address hTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked hTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address hTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveHToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useHTokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address hToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address hTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n\\n  struct Phase {\\n    uint256 start;\\n    uint256 end;\\n    int256 k;\\n    uint256 b;\\n  }\\n\\n  struct CheckPointParameters {\\n    uint256 period;\\n    uint256 periodTime;\\n    uint256 rate;\\n    uint256 newRate;\\n    uint256 prevFutureEpoch;\\n  }\\n}\\n\",\"keccak256\":\"0x916e79cfe08070ef69e40cc77f5bc7a87aff0e9ed72c657329747d72b89b6d0c\",\"license\":\"LGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50603d80546001600160a01b03191661dead179055613e3b806100346000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638d56107e1161010f578063b07b709b116100a2578063f146fa6f11610071578063f146fa6f146104b1578063f77c4791146104ba578063f8c8765e146104da578063fc6e3b3b146104ed57600080fd5b8063b07b709b14610462578063c45a015514610475578063caa0b9ed14610495578063ef78d4fd146104a857600080fd5b80639636e4f8116100de5780639636e4f81461041357806396c55175146104265780639e48d35e14610439578063a5870d6b1461044257600080fd5b80638d56107e146103c05780638fe8a101146103d357806391451a49146103e0578063915541f5146103f357600080fd5b806337ba5dbb116101875780636ecb8114116101565780636ecb8114146103655780637158da7c1461036d5780637535d2461461038d57806384d24226146103ad57600080fd5b806337ba5dbb146102df5780634f2bfe5b146102f257806353d637de1461031257806361c773cf1461034557600080fd5b8063279248ac116101c3578063279248ac146102625780632e37eef61461028357806331e202cc146102b657806331f9e35b146102d657600080fd5b806306fdde03146101ea5780630754617214610208578063095995041461024d575b600080fd5b6101f261050d565b6040516101ff919061347a565b60405180910390f35b6039546102289073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ff565b61026061025b3660046134d9565b61059b565b005b61027561027036600461351f565b61076a565b6040519081526020016101ff565b61029661029136600461353c565b610810565b6040805194855260208501939093529183015260608201526080016101ff565b6102756102c436600461353c565b60416020526000908152604090205481565b61027560425481565b6102756102ed36600461351f565b61084a565b603b546102289073ffffffffffffffffffffffffffffffffffffffff1681565b61033561032036600461353c565b60446020526000908152604090205460ff1681565b60405190151581526020016101ff565b6037546102289073ffffffffffffffffffffffffffffffffffffffff1681565b6103356108ad565b6038546102289073ffffffffffffffffffffffffffffffffffffffff1681565b6034546102289073ffffffffffffffffffffffffffffffffffffffff1681565b6102756103bb36600461351f565b610b53565b6102606103ce36600461351f565b610c0b565b603f546103359060ff1681565b6102606103ee36600461351f565b610e46565b6036546102289073ffffffffffffffffffffffffffffffffffffffff1681565b610260610421366004613555565b61141e565b61026061043436600461351f565b6116ef565b61027560435481565b603a546102289073ffffffffffffffffffffffffffffffffffffffff1681565b61033561047036600461351f565b611d75565b603d546102289073ffffffffffffffffffffffffffffffffffffffff1681565b6102756104a336600461351f565b611e29565b61027560405481565b61027560465481565b603c546102289073ffffffffffffffffffffffffffffffffffffffff1681565b6102606104e83660046135ca565b611f5c565b6035546102289073ffffffffffffffffffffffffffffffffffffffff1681565b603e805461051a90613626565b80601f016020809104026020016040519081016040528092919081815260200182805461054690613626565b80156105935780601f1061056857610100808354040283529160200191610593565b820191906000526020600020905b81548152906001019060200180831161057657829003601f168201915b505050505081565b603354604080517f707cd716000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163707cd7169160048083019260209291908290030181865afa15801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f9190613689565b6040517f7be53ca100000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff821690637be53ca190602401602060405180830381865afa15801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c091906136a6565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525090610737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b60405180910390fd5b5050603f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600061077582610e46565b6036546040517fcaa0b9ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063caa0b9ed906024015b602060405180830381865afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a91906136c3565b92915050565b6045818154811061082057600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919350919084565b600061085582610e46565b6035546040517fcaa0b9ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063caa0b9ed906024016107c9565b60345460408051808201909152600281527f3233000000000000000000000000000000000000000000000000000000000000602082015260009173ffffffffffffffffffffffffffffffffffffffff163314610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b50603754604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa1580156109a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cb91906136c3565b90506000603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6091906136c3565b90506000610a6e828461370b565b905080600003610a875750506000604655506001905090565b6038546035546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260009291909116906370a0823190602401602060405180830381865afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2291906136c3565b90506000610b30838361370b565b9050610b44610b3f84836127bd565b6127fc565b60465550600194505050505090565b6000610b5e82610e46565b6039546040517f8b752bb000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015230602483015290911690638b752bb090604401602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf891906136c3565b610c0183611e29565b61080a919061371e565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9c91906136c3565b15610d27576035546040517f1fbae84000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690631fbae84090602401600060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050505b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db891906136c3565b15610e43576036546040517f1fbae84000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690631fbae84090602401600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b505050505b50565b610e786040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604080548083526000908152604160209081529082902054908301526042549082018190526060820152604354608082018190524210610fe757603a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663277dbafb6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4591906136c3565b604355603a54604080517f2c4e722e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691632c4e722e916004808201926020929091908290030181865afa158015610fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdc91906136c3565b606082018190526042555b6000610ff7620151806007613731565b611005620151806007613731565b61100f9042613777565b6110199190613731565b60008181526044602052604090205490915060ff166110ee576000818152604460205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055603c5490517f8aca6a2300000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff90911690638aca6a2390602401600060405180830381600087803b1580156110d557600080fd5b505af11580156110e9573d6000803e3d6000fd5b505050505b603f5460ff16156111085760006040830181905260608301525b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611175573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119991906136c3565b1561127b5760355473ffffffffffffffffffffffffffffffffffffffff166313715da8846111c683612a19565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9093166004840152602483019190915285516044830152602086015160648301528501516084820152606085015160a4820152608085015160c482015260e401600060405180830381600087803b15801561126257600080fd5b505af1158015611276573d6000803e3d6000fd5b505050505b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130c91906136c3565b156113ef5760365473ffffffffffffffffffffffffffffffffffffffff166313715da88461133983612a19565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9093166004840152602483019190915285516044830152602086015160648301528501516084820152606085015160a4820152608085015160c482015260e4015b600060405180830381600087803b1580156113d657600080fd5b505af11580156113ea573d6000803e3d6000fd5b505050505b600182600001818151611402919061370b565b9052505051604081815560009182526041602052902042905550565b603354604080517f707cd716000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163707cd7169160048083019260209291908290030181865afa15801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b29190613689565b6040517f7be53ca100000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff821690637be53ca190602401602060405180830381865afa15801561151f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154391906136a6565b6040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250906115b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b50600482108015906115c45750600a8211155b6040518060400160405280600281526020017f393700000000000000000000000000000000000000000000000000000000000081525090611632576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b5061163f60456000613411565b60005b8281101561168c5761167a84848381811061165f5761165f61378b565b9050608002018036038101906116759190613813565b612a5f565b8061168481613879565b915050611642565b5060385460335460405173ffffffffffffffffffffffffffffffffffffffff92831692909116907f4b0a853bf836a6c3caf8c7b7169b8f51cb5a854bb1736ba5a698637e8286b219906116e290879087906138b1565b60405180910390a3505050565b6035546040517f7699b4cd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000921690637699b4cd90602401602060405180830381865afa158015611760573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178491906136c3565b6036546040517f7699b4cd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015292935060009290911690637699b4cd90602401602060405180830381865afa1580156117fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181e91906136c3565b603b546040517f81fc83bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529293506000929091169063eac6a66790869083906381fc83bb90602401602060405180830381865afa15801561189e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c291906136c3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381865afa158015611930573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195491906136c3565b6035546040517f9c46665c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015292935060009290911690639c46665c90602401602060405180830381865afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee91906136c3565b6036546040517f9c46665c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015292935060009290911690639c46665c90602401602060405180830381865afa158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8891906136c3565b603b546040517f3037408d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152426024830152929350911690633037408d90604401602060405180830381865afa158015611b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2491906136c3565b1580611b2f57508483115b80611b3957508383115b611b9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4750303031000000000000000000000000000000000000000000000000000000604482015260640161072e565b6064611bac836028613731565b611bb69190613777565b6035546040517f958da8de00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301529091169063958da8de90602401602060405180830381865afa158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a91906136c3565b1180611cfe57506064611c5e826028613731565b611c689190613777565b6036546040517f958da8de00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301529091169063958da8de90602401602060405180830381865afa158015611cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfc91906136c3565b115b611d64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4750303031000000000000000000000000000000000000000000000000000000604482015260640161072e565b611d6d86612c6b565b505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff83161480611db2575060395473ffffffffffffffffffffffffffffffffffffffff1633145b611e18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4750303030000000000000000000000000000000000000000000000000000000604482015260640161072e565b611e2182612c6b565b506001919050565b6036546040517fcaa0b9ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152600092169063caa0b9ed90602401602060405180830381865afa158015611e9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebe91906136c3565b6035546040517fcaa0b9ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529091169063caa0b9ed90602401602060405180830381865afa158015611f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5291906136c3565b61080a919061370b565b60408051808201909152600281527f3737000000000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8516611fde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b5060408051808201909152600281527f3737000000000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8416612061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b5060408051808201909152600281527f3737000000000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff83166120e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b5060408051808201909152600281527f3737000000000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8216612167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b50603d5473ffffffffffffffffffffffffffffffffffffffff16156121e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4750303032000000000000000000000000000000000000000000000000000000604482015260640161072e565b603d80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811633179091556034805473ffffffffffffffffffffffffffffffffffffffff8716921682179055604080517f0542975c0000000000000000000000000000000000000000000000000000000081529051630542975c916004808201926020929091908290030181865afa15801561228a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ae9190613689565b6033805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155603980549286169290911682179055604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905163fc0c546a916004808201926020929091908290030181865afa158015612355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123799190613689565b603a80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617909155603b8054909116848316179055603954604080517ff77c47910000000000000000000000000000000000000000000000000000000081529051919092169163f77c47919160048083019260209291908290030181865afa158015612425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124499190613689565b603c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9283161790556034546040517f35ea6a75000000000000000000000000000000000000000000000000000000008152838316600482015260009291909116906335ea6a75906024016101e060405180830381865afa1580156124ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250e9190613995565b610100810151603580547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617909155610140830151603680548316918416919091179055610120830151603780548316918416919091179055603880549091169185169182179055604080517f95d89b41000000000000000000000000000000000000000000000000000000008152905192935090916395d89b41916004808201926000929091908290030181865afa1580156125ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526126309190810190613ab8565b6040516020016126409190613b83565b604051602081830303815290604052603e908161265d9190613c0f565b506000805260416020908152427f22157c206018468b45ae7922bc7a0b0cb8feed201dac3c6fb5e7876aa94e11e955603a54604080517f2c4e722e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921692632c4e722e926004808401938290030181865afa1580156126f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271a91906136c3565b604255603a54604080517f277dbafb000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169163277dbafb9160048082019260209290919082900301816000875af115801561278f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b391906136c3565b6043555050505050565b600081156b033b2e3c9fd0803ce8000000600284041904841117156127e157600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b60455460408051808201909152600281527f3938000000000000000000000000000000000000000000000000000000000000602082015260009161286d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b508160000361287e57506000919050565b60005b604554811015612a10576045818154811061289e5761289e61378b565b906000526020600020906004020160000154831180156128e25750604581815481106128cc576128cc61378b565b9060005260206000209060040201600101548311155b156129fe576000612916604583815481106128ff576128ff61378b565b9060005260206000209060040201600301546132ef565b61292b6b033b2e3c9fd0803ce80000006132ef565b612934866132ef565b604585815481106129475761294761378b565b9060005260206000209060040201600201546129639190613d29565b61296d9190613d75565b6129779190613ddd565b905060008112156040518060400160405280600281526020017f3939000000000000000000000000000000000000000000000000000000000000815250906129ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b506129f6816133a5565b949350505050565b80612a0881613879565b915050612881565b50600092915050565b60355460009073ffffffffffffffffffffffffffffffffffffffff838116911614612a465760465461080a565b60465461080a906b033b2e3c9fd0803ce800000061371e565b80600001518160200151116040518060400160405280600281526020017f393600000000000000000000000000000000000000000000000000000000000081525090612ad8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b506045541580612b1c575060458054612af39060019061371e565b81548110612b0357612b0361378b565b9060005260206000209060040201600101548160000151145b6040518060400160405280600281526020017f393600000000000000000000000000000000000000000000000000000000000081525090612b8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b506040805160808101825282518152602080840151908201908152838301519282019283526060938401519382019384526045805460018101825560009190915291517fa80a8fcc11760162f08bb091d2c9389d07f2b73d0e996161dfac6f1043b5fc0b600490930292830155517fa80a8fcc11760162f08bb091d2c9389d07f2b73d0e996161dfac6f1043b5fc0c82015590517fa80a8fcc11760162f08bb091d2c9389d07f2b73d0e996161dfac6f1043b5fc0d82015590517fa80a8fcc11760162f08bb091d2c9389d07f2b73d0e996161dfac6f1043b5fc0e90910155565b612c9d6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604080548083526000908152604160209081529082902054908301526042549082018190526060820152604354608082018190524210612e0c57603a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663277dbafb6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6a91906136c3565b604355603a54604080517f2c4e722e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691632c4e722e916004808201926020929091908290030181865afa158015612ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0191906136c3565b606082018190526042555b6000612e1c620151806007613731565b612e2a620151806007613731565b612e349042613777565b612e3e9190613731565b60008181526044602052604090205490915060ff16612f13576000818152604460205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055603c5490517f8aca6a2300000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff90911690638aca6a2390602401600060405180830381600087803b158015612efa57600080fd5b505af1158015612f0e573d6000803e3d6000fd5b505050505b603f5460ff1615612f2d5760006040830181905260608301525b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbe91906136c3565b156131255760355473ffffffffffffffffffffffffffffffffffffffff166313715da884612feb83612a19565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9093166004840152602483019190915285516044830152602086015160648301528501516084820152606085015160a4820152608085015160c482015260e401600060405180830381600087803b15801561308757600080fd5b505af115801561309b573d6000803e3d6000fd5b50506035546040517f1fbae84000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301529091169250631fbae8409150602401600060405180830381600087803b15801561310c57600080fd5b505af1158015613120573d6000803e3d6000fd5b505050505b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b691906136c3565b156113ef5760365473ffffffffffffffffffffffffffffffffffffffff166313715da8846131e383612a19565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9093166004840152602483019190915285516044830152602086015160648301528501516084820152606085015160a4820152608085015160c482015260e401600060405180830381600087803b15801561327f57600080fd5b505af1158015613293573d6000803e3d6000fd5b50506036546040517f1fbae84000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301529091169250631fbae84091506024016113bc565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156133a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e74323536000000000000000000000000000000000000000000000000606482015260840161072e565b5090565b6000808212156133a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161072e565b5080546000825560040290600052602060002090810190610e4391905b808211156133a15760008082556001820181905560028201819055600382015560040161342e565b60005b83811015613471578181015183820152602001613459565b50506000910152565b6020815260008251806020840152613499816040850160208701613456565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b8015158114610e4357600080fd5b6000602082840312156134eb57600080fd5b81356134f6816134cb565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610e4357600080fd5b60006020828403121561353157600080fd5b81356134f6816134fd565b60006020828403121561354e57600080fd5b5035919050565b6000806020838503121561356857600080fd5b823567ffffffffffffffff8082111561358057600080fd5b818501915085601f83011261359457600080fd5b8135818111156135a357600080fd5b8660208260071b85010111156135b857600080fd5b60209290920196919550909350505050565b600080600080608085870312156135e057600080fd5b84356135eb816134fd565b935060208501356135fb816134fd565b9250604085013561360b816134fd565b9150606085013561361b816134fd565b939692955090935050565b600181811c9082168061363a57607f821691505b602082108103613673577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8051613684816134fd565b919050565b60006020828403121561369b57600080fd5b81516134f6816134fd565b6000602082840312156136b857600080fd5b81516134f6816134cb565b6000602082840312156136d557600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561080a5761080a6136dc565b8181038181111561080a5761080a6136dc565b808202811582820484141761080a5761080a6136dc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261378657613786613748565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171561380d5761380d6137ba565b60405290565b60006080828403121561382557600080fd5b6040516080810181811067ffffffffffffffff82111715613848576138486137ba565b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036138aa576138aa6136dc565b5060010190565b6020808252818101839052600090604080840186845b878110156138ff57813583528482013585840152838201358484015260608083013590840152608092830192909101906001016138c7565b5090979650505050505050565b60006020828403121561391e57600080fd5b6040516020810181811067ffffffffffffffff82111715613941576139416137ba565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461368457600080fd5b805164ffffffffff8116811461368457600080fd5b805161ffff8116811461368457600080fd5b60006101e082840312156139a857600080fd5b6139b06137e9565b6139ba848461390c565b81526139c86020840161394e565b60208201526139d96040840161394e565b60408201526139ea6060840161394e565b60608201526139fb6080840161394e565b6080820152613a0c60a0840161394e565b60a0820152613a1d60c0840161396e565b60c0820152613a2e60e08401613983565b60e0820152610100613a41818501613679565b90820152610120613a53848201613679565b90820152610140613a65848201613679565b90820152610160613a77848201613679565b90820152610180613a8984820161394e565b908201526101a0613a9b84820161394e565b908201526101c0613aad84820161394e565b908201529392505050565b600060208284031215613aca57600080fd5b815167ffffffffffffffff80821115613ae257600080fd5b818401915084601f830112613af657600080fd5b815181811115613b0857613b086137ba565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613b4e57613b4e6137ba565b81604052828152876020848701011115613b6757600080fd5b613b78836020830160208801613456565b979650505050505050565b60008251613b95818460208701613456565b7f204c656e64696e67476175676500000000000000000000000000000000000000920191825250600d01919050565b601f821115613c0a57600081815260208120601f850160051c81016020861015613beb5750805b601f850160051c820191505b81811015611d6d57828155600101613bf7565b505050565b815167ffffffffffffffff811115613c2957613c296137ba565b613c3d81613c378454613626565b84613bc4565b602080601f831160018114613c905760008415613c5a5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555611d6d565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015613cdd57888601518255948401946001909101908401613cbe565b5085821015613d1957878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b808202600082127f800000000000000000000000000000000000000000000000000000000000000084141615613d6157613d616136dc565b818105831482151761080a5761080a6136dc565b600082613d8457613d84613748565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615613dd857613dd86136dc565b500590565b8082018281126000831280158216821582161715613dfd57613dfd6136dc565b50509291505056fea26469706673582212200ed8471c028a6c7431550a5fc4e3d02d70a2dac946fd1c1f16fe9b74b6db954264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80638d56107e1161010f578063b07b709b116100a2578063f146fa6f11610071578063f146fa6f146104b1578063f77c4791146104ba578063f8c8765e146104da578063fc6e3b3b146104ed57600080fd5b8063b07b709b14610462578063c45a015514610475578063caa0b9ed14610495578063ef78d4fd146104a857600080fd5b80639636e4f8116100de5780639636e4f81461041357806396c55175146104265780639e48d35e14610439578063a5870d6b1461044257600080fd5b80638d56107e146103c05780638fe8a101146103d357806391451a49146103e0578063915541f5146103f357600080fd5b806337ba5dbb116101875780636ecb8114116101565780636ecb8114146103655780637158da7c1461036d5780637535d2461461038d57806384d24226146103ad57600080fd5b806337ba5dbb146102df5780634f2bfe5b146102f257806353d637de1461031257806361c773cf1461034557600080fd5b8063279248ac116101c3578063279248ac146102625780632e37eef61461028357806331e202cc146102b657806331f9e35b146102d657600080fd5b806306fdde03146101ea5780630754617214610208578063095995041461024d575b600080fd5b6101f261050d565b6040516101ff919061347a565b60405180910390f35b6039546102289073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ff565b61026061025b3660046134d9565b61059b565b005b61027561027036600461351f565b61076a565b6040519081526020016101ff565b61029661029136600461353c565b610810565b6040805194855260208501939093529183015260608201526080016101ff565b6102756102c436600461353c565b60416020526000908152604090205481565b61027560425481565b6102756102ed36600461351f565b61084a565b603b546102289073ffffffffffffffffffffffffffffffffffffffff1681565b61033561032036600461353c565b60446020526000908152604090205460ff1681565b60405190151581526020016101ff565b6037546102289073ffffffffffffffffffffffffffffffffffffffff1681565b6103356108ad565b6038546102289073ffffffffffffffffffffffffffffffffffffffff1681565b6034546102289073ffffffffffffffffffffffffffffffffffffffff1681565b6102756103bb36600461351f565b610b53565b6102606103ce36600461351f565b610c0b565b603f546103359060ff1681565b6102606103ee36600461351f565b610e46565b6036546102289073ffffffffffffffffffffffffffffffffffffffff1681565b610260610421366004613555565b61141e565b61026061043436600461351f565b6116ef565b61027560435481565b603a546102289073ffffffffffffffffffffffffffffffffffffffff1681565b61033561047036600461351f565b611d75565b603d546102289073ffffffffffffffffffffffffffffffffffffffff1681565b6102756104a336600461351f565b611e29565b61027560405481565b61027560465481565b603c546102289073ffffffffffffffffffffffffffffffffffffffff1681565b6102606104e83660046135ca565b611f5c565b6035546102289073ffffffffffffffffffffffffffffffffffffffff1681565b603e805461051a90613626565b80601f016020809104026020016040519081016040528092919081815260200182805461054690613626565b80156105935780601f1061056857610100808354040283529160200191610593565b820191906000526020600020905b81548152906001019060200180831161057657829003601f168201915b505050505081565b603354604080517f707cd716000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163707cd7169160048083019260209291908290030181865afa15801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f9190613689565b6040517f7be53ca100000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff821690637be53ca190602401602060405180830381865afa15801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c091906136a6565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525090610737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b60405180910390fd5b5050603f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600061077582610e46565b6036546040517fcaa0b9ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063caa0b9ed906024015b602060405180830381865afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a91906136c3565b92915050565b6045818154811061082057600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919350919084565b600061085582610e46565b6035546040517fcaa0b9ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063caa0b9ed906024016107c9565b60345460408051808201909152600281527f3233000000000000000000000000000000000000000000000000000000000000602082015260009173ffffffffffffffffffffffffffffffffffffffff163314610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b50603754604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa1580156109a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cb91906136c3565b90506000603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6091906136c3565b90506000610a6e828461370b565b905080600003610a875750506000604655506001905090565b6038546035546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216600482015260009291909116906370a0823190602401602060405180830381865afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2291906136c3565b90506000610b30838361370b565b9050610b44610b3f84836127bd565b6127fc565b60465550600194505050505090565b6000610b5e82610e46565b6039546040517f8b752bb000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015230602483015290911690638b752bb090604401602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf891906136c3565b610c0183611e29565b61080a919061371e565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9c91906136c3565b15610d27576035546040517f1fbae84000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690631fbae84090602401600060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050505b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db891906136c3565b15610e43576036546040517f1fbae84000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690631fbae84090602401600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b505050505b50565b610e786040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604080548083526000908152604160209081529082902054908301526042549082018190526060820152604354608082018190524210610fe757603a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663277dbafb6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610f21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4591906136c3565b604355603a54604080517f2c4e722e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691632c4e722e916004808201926020929091908290030181865afa158015610fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdc91906136c3565b606082018190526042555b6000610ff7620151806007613731565b611005620151806007613731565b61100f9042613777565b6110199190613731565b60008181526044602052604090205490915060ff166110ee576000818152604460205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055603c5490517f8aca6a2300000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff90911690638aca6a2390602401600060405180830381600087803b1580156110d557600080fd5b505af11580156110e9573d6000803e3d6000fd5b505050505b603f5460ff16156111085760006040830181905260608301525b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611175573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119991906136c3565b1561127b5760355473ffffffffffffffffffffffffffffffffffffffff166313715da8846111c683612a19565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9093166004840152602483019190915285516044830152602086015160648301528501516084820152606085015160a4820152608085015160c482015260e401600060405180830381600087803b15801561126257600080fd5b505af1158015611276573d6000803e3d6000fd5b505050505b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130c91906136c3565b156113ef5760365473ffffffffffffffffffffffffffffffffffffffff166313715da88461133983612a19565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9093166004840152602483019190915285516044830152602086015160648301528501516084820152606085015160a4820152608085015160c482015260e4015b600060405180830381600087803b1580156113d657600080fd5b505af11580156113ea573d6000803e3d6000fd5b505050505b600182600001818151611402919061370b565b9052505051604081815560009182526041602052902042905550565b603354604080517f707cd716000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163707cd7169160048083019260209291908290030181865afa15801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b29190613689565b6040517f7be53ca100000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff821690637be53ca190602401602060405180830381865afa15801561151f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154391906136a6565b6040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250906115b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b50600482108015906115c45750600a8211155b6040518060400160405280600281526020017f393700000000000000000000000000000000000000000000000000000000000081525090611632576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b5061163f60456000613411565b60005b8281101561168c5761167a84848381811061165f5761165f61378b565b9050608002018036038101906116759190613813565b612a5f565b8061168481613879565b915050611642565b5060385460335460405173ffffffffffffffffffffffffffffffffffffffff92831692909116907f4b0a853bf836a6c3caf8c7b7169b8f51cb5a854bb1736ba5a698637e8286b219906116e290879087906138b1565b60405180910390a3505050565b6035546040517f7699b4cd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000921690637699b4cd90602401602060405180830381865afa158015611760573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178491906136c3565b6036546040517f7699b4cd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015292935060009290911690637699b4cd90602401602060405180830381865afa1580156117fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181e91906136c3565b603b546040517f81fc83bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529293506000929091169063eac6a66790869083906381fc83bb90602401602060405180830381865afa15801561189e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c291906136c3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381865afa158015611930573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195491906136c3565b6035546040517f9c46665c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015292935060009290911690639c46665c90602401602060405180830381865afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee91906136c3565b6036546040517f9c46665c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015292935060009290911690639c46665c90602401602060405180830381865afa158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8891906136c3565b603b546040517f3037408d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152426024830152929350911690633037408d90604401602060405180830381865afa158015611b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2491906136c3565b1580611b2f57508483115b80611b3957508383115b611b9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4750303031000000000000000000000000000000000000000000000000000000604482015260640161072e565b6064611bac836028613731565b611bb69190613777565b6035546040517f958da8de00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301529091169063958da8de90602401602060405180830381865afa158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a91906136c3565b1180611cfe57506064611c5e826028613731565b611c689190613777565b6036546040517f958da8de00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301529091169063958da8de90602401602060405180830381865afa158015611cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfc91906136c3565b115b611d64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4750303031000000000000000000000000000000000000000000000000000000604482015260640161072e565b611d6d86612c6b565b505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff83161480611db2575060395473ffffffffffffffffffffffffffffffffffffffff1633145b611e18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4750303030000000000000000000000000000000000000000000000000000000604482015260640161072e565b611e2182612c6b565b506001919050565b6036546040517fcaa0b9ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152600092169063caa0b9ed90602401602060405180830381865afa158015611e9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebe91906136c3565b6035546040517fcaa0b9ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529091169063caa0b9ed90602401602060405180830381865afa158015611f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5291906136c3565b61080a919061370b565b60408051808201909152600281527f3737000000000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8516611fde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b5060408051808201909152600281527f3737000000000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8416612061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b5060408051808201909152600281527f3737000000000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff83166120e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b5060408051808201909152600281527f3737000000000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8216612167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b50603d5473ffffffffffffffffffffffffffffffffffffffff16156121e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4750303032000000000000000000000000000000000000000000000000000000604482015260640161072e565b603d80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811633179091556034805473ffffffffffffffffffffffffffffffffffffffff8716921682179055604080517f0542975c0000000000000000000000000000000000000000000000000000000081529051630542975c916004808201926020929091908290030181865afa15801561228a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ae9190613689565b6033805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155603980549286169290911682179055604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905163fc0c546a916004808201926020929091908290030181865afa158015612355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123799190613689565b603a80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617909155603b8054909116848316179055603954604080517ff77c47910000000000000000000000000000000000000000000000000000000081529051919092169163f77c47919160048083019260209291908290030181865afa158015612425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124499190613689565b603c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9283161790556034546040517f35ea6a75000000000000000000000000000000000000000000000000000000008152838316600482015260009291909116906335ea6a75906024016101e060405180830381865afa1580156124ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250e9190613995565b610100810151603580547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617909155610140830151603680548316918416919091179055610120830151603780548316918416919091179055603880549091169185169182179055604080517f95d89b41000000000000000000000000000000000000000000000000000000008152905192935090916395d89b41916004808201926000929091908290030181865afa1580156125ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526126309190810190613ab8565b6040516020016126409190613b83565b604051602081830303815290604052603e908161265d9190613c0f565b506000805260416020908152427f22157c206018468b45ae7922bc7a0b0cb8feed201dac3c6fb5e7876aa94e11e955603a54604080517f2c4e722e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921692632c4e722e926004808401938290030181865afa1580156126f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271a91906136c3565b604255603a54604080517f277dbafb000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169163277dbafb9160048082019260209290919082900301816000875af115801561278f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b391906136c3565b6043555050505050565b600081156b033b2e3c9fd0803ce8000000600284041904841117156127e157600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b60455460408051808201909152600281527f3938000000000000000000000000000000000000000000000000000000000000602082015260009161286d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b508160000361287e57506000919050565b60005b604554811015612a10576045818154811061289e5761289e61378b565b906000526020600020906004020160000154831180156128e25750604581815481106128cc576128cc61378b565b9060005260206000209060040201600101548311155b156129fe576000612916604583815481106128ff576128ff61378b565b9060005260206000209060040201600301546132ef565b61292b6b033b2e3c9fd0803ce80000006132ef565b612934866132ef565b604585815481106129475761294761378b565b9060005260206000209060040201600201546129639190613d29565b61296d9190613d75565b6129779190613ddd565b905060008112156040518060400160405280600281526020017f3939000000000000000000000000000000000000000000000000000000000000815250906129ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b506129f6816133a5565b949350505050565b80612a0881613879565b915050612881565b50600092915050565b60355460009073ffffffffffffffffffffffffffffffffffffffff838116911614612a465760465461080a565b60465461080a906b033b2e3c9fd0803ce800000061371e565b80600001518160200151116040518060400160405280600281526020017f393600000000000000000000000000000000000000000000000000000000000081525090612ad8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b506045541580612b1c575060458054612af39060019061371e565b81548110612b0357612b0361378b565b9060005260206000209060040201600101548160000151145b6040518060400160405280600281526020017f393600000000000000000000000000000000000000000000000000000000000081525090612b8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e919061347a565b506040805160808101825282518152602080840151908201908152838301519282019283526060938401519382019384526045805460018101825560009190915291517fa80a8fcc11760162f08bb091d2c9389d07f2b73d0e996161dfac6f1043b5fc0b600490930292830155517fa80a8fcc11760162f08bb091d2c9389d07f2b73d0e996161dfac6f1043b5fc0c82015590517fa80a8fcc11760162f08bb091d2c9389d07f2b73d0e996161dfac6f1043b5fc0d82015590517fa80a8fcc11760162f08bb091d2c9389d07f2b73d0e996161dfac6f1043b5fc0e90910155565b612c9d6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b604080548083526000908152604160209081529082902054908301526042549082018190526060820152604354608082018190524210612e0c57603a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663277dbafb6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6a91906136c3565b604355603a54604080517f2c4e722e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691632c4e722e916004808201926020929091908290030181865afa158015612ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0191906136c3565b606082018190526042555b6000612e1c620151806007613731565b612e2a620151806007613731565b612e349042613777565b612e3e9190613731565b60008181526044602052604090205490915060ff16612f13576000818152604460205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055603c5490517f8aca6a2300000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff90911690638aca6a2390602401600060405180830381600087803b158015612efa57600080fd5b505af1158015612f0e573d6000803e3d6000fd5b505050505b603f5460ff1615612f2d5760006040830181905260608301525b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbe91906136c3565b156131255760355473ffffffffffffffffffffffffffffffffffffffff166313715da884612feb83612a19565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9093166004840152602483019190915285516044830152602086015160648301528501516084820152606085015160a4820152608085015160c482015260e401600060405180830381600087803b15801561308757600080fd5b505af115801561309b573d6000803e3d6000fd5b50506035546040517f1fbae84000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301529091169250631fbae8409150602401600060405180830381600087803b15801561310c57600080fd5b505af1158015613120573d6000803e3d6000fd5b505050505b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b691906136c3565b156113ef5760365473ffffffffffffffffffffffffffffffffffffffff166313715da8846131e383612a19565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9093166004840152602483019190915285516044830152602086015160648301528501516084820152606085015160a4820152608085015160c482015260e401600060405180830381600087803b15801561327f57600080fd5b505af1158015613293573d6000803e3d6000fd5b50506036546040517f1fbae84000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301529091169250631fbae84091506024016113bc565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156133a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e74323536000000000000000000000000000000000000000000000000606482015260840161072e565b5090565b6000808212156133a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161072e565b5080546000825560040290600052602060002090810190610e4391905b808211156133a15760008082556001820181905560028201819055600382015560040161342e565b60005b83811015613471578181015183820152602001613459565b50506000910152565b6020815260008251806020840152613499816040850160208701613456565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b8015158114610e4357600080fd5b6000602082840312156134eb57600080fd5b81356134f6816134cb565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610e4357600080fd5b60006020828403121561353157600080fd5b81356134f6816134fd565b60006020828403121561354e57600080fd5b5035919050565b6000806020838503121561356857600080fd5b823567ffffffffffffffff8082111561358057600080fd5b818501915085601f83011261359457600080fd5b8135818111156135a357600080fd5b8660208260071b85010111156135b857600080fd5b60209290920196919550909350505050565b600080600080608085870312156135e057600080fd5b84356135eb816134fd565b935060208501356135fb816134fd565b9250604085013561360b816134fd565b9150606085013561361b816134fd565b939692955090935050565b600181811c9082168061363a57607f821691505b602082108103613673577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8051613684816134fd565b919050565b60006020828403121561369b57600080fd5b81516134f6816134fd565b6000602082840312156136b857600080fd5b81516134f6816134cb565b6000602082840312156136d557600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561080a5761080a6136dc565b8181038181111561080a5761080a6136dc565b808202811582820484141761080a5761080a6136dc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261378657613786613748565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171561380d5761380d6137ba565b60405290565b60006080828403121561382557600080fd5b6040516080810181811067ffffffffffffffff82111715613848576138486137ba565b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036138aa576138aa6136dc565b5060010190565b6020808252818101839052600090604080840186845b878110156138ff57813583528482013585840152838201358484015260608083013590840152608092830192909101906001016138c7565b5090979650505050505050565b60006020828403121561391e57600080fd5b6040516020810181811067ffffffffffffffff82111715613941576139416137ba565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461368457600080fd5b805164ffffffffff8116811461368457600080fd5b805161ffff8116811461368457600080fd5b60006101e082840312156139a857600080fd5b6139b06137e9565b6139ba848461390c565b81526139c86020840161394e565b60208201526139d96040840161394e565b60408201526139ea6060840161394e565b60608201526139fb6080840161394e565b6080820152613a0c60a0840161394e565b60a0820152613a1d60c0840161396e565b60c0820152613a2e60e08401613983565b60e0820152610100613a41818501613679565b90820152610120613a53848201613679565b90820152610140613a65848201613679565b90820152610160613a77848201613679565b90820152610180613a8984820161394e565b908201526101a0613a9b84820161394e565b908201526101c0613aad84820161394e565b908201529392505050565b600060208284031215613aca57600080fd5b815167ffffffffffffffff80821115613ae257600080fd5b818401915084601f830112613af657600080fd5b815181811115613b0857613b086137ba565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613b4e57613b4e6137ba565b81604052828152876020848701011115613b6757600080fd5b613b78836020830160208801613456565b979650505050505050565b60008251613b95818460208701613456565b7f204c656e64696e67476175676500000000000000000000000000000000000000920191825250600d01919050565b601f821115613c0a57600081815260208120601f850160051c81016020861015613beb5750805b601f850160051c820191505b81811015611d6d57828155600101613bf7565b505050565b815167ffffffffffffffff811115613c2957613c296137ba565b613c3d81613c378454613626565b84613bc4565b602080601f831160018114613c905760008415613c5a5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555611d6d565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015613cdd57888601518255948401946001909101908401613cbe565b5085821015613d1957878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b808202600082127f800000000000000000000000000000000000000000000000000000000000000084141615613d6157613d616136dc565b818105831482151761080a5761080a6136dc565b600082613d8457613d84613748565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615613dd857613dd86136dc565b500590565b8082018281126000831280158216821582161715613dfd57613dfd6136dc565b50509291505056fea26469706673582212200ed8471c028a6c7431550a5fc4e3d02d70a2dac946fd1c1f16fe9b74b6db954264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPhases((uint256,uint256,int256,uint256)[])": {
        "notice": "Add parameters for calculating fund utilization rate and allocation ratio"
      },
      "hvCheckpoint(address)": {
        "notice": "Reserve aggregation checkpoint"
      },
      "hvUpdateLiquidityLimit(address)": {
        "notice": "Reserve aggregation updateLiquidityLimit"
      },
      "integrateFraction(address)": {
        "notice": "Reserve incentive aggregation"
      },
      "updateAllocation()": {
        "notice": "Update debt token allocation ratio based on fund utilization rate"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11665,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11668,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11726,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 22112,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "_addressesProvider",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IPoolAddressesProvider)14605"
      },
      {
        "astId": 22115,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "POOL",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IPool)14396"
      },
      {
        "astId": 22117,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "hToken",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 22119,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "variableDebtToken",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 22121,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "stableDebtToken",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 22123,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "underlyingAsset",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 22126,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "minter",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IMinter)13733"
      },
      {
        "astId": 22129,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "ltToken",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(ILT)13638"
      },
      {
        "astId": 22132,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "votingEscrow",
        "offset": 0,
        "slot": "59",
        "type": "t_contract(IVotingEscrow)15988"
      },
      {
        "astId": 22135,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "controller",
        "offset": 0,
        "slot": "60",
        "type": "t_contract(IGaugeController)13029"
      },
      {
        "astId": 22137,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "factory",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      },
      {
        "astId": 22139,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "name",
        "offset": 0,
        "slot": "62",
        "type": "t_string_storage"
      },
      {
        "astId": 22141,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "isKilled",
        "offset": 0,
        "slot": "63",
        "type": "t_bool"
      },
      {
        "astId": 22143,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "period",
        "offset": 0,
        "slot": "64",
        "type": "t_uint256"
      },
      {
        "astId": 22147,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "periodTimestamp",
        "offset": 0,
        "slot": "65",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 22149,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "inflationRate",
        "offset": 0,
        "slot": "66",
        "type": "t_uint256"
      },
      {
        "astId": 22151,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "futureEpochTime",
        "offset": 0,
        "slot": "67",
        "type": "t_uint256"
      },
      {
        "astId": 22155,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "checkedGauge",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 22159,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "phases",
        "offset": 0,
        "slot": "69",
        "type": "t_array(t_struct(Phase)35239_storage)dyn_storage"
      },
      {
        "astId": 22161,
        "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
        "label": "borrowAllocation",
        "offset": 0,
        "slot": "70",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Phase)35239_storage)dyn_storage": {
        "base": "t_struct(Phase)35239_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.Phase[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGaugeController)13029": {
        "encoding": "inplace",
        "label": "contract IGaugeController",
        "numberOfBytes": "20"
      },
      "t_contract(ILT)13638": {
        "encoding": "inplace",
        "label": "contract ILT",
        "numberOfBytes": "20"
      },
      "t_contract(IMinter)13733": {
        "encoding": "inplace",
        "label": "contract IMinter",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)14396": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolAddressesProvider)14605": {
        "encoding": "inplace",
        "label": "contract IPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IVotingEscrow)15988": {
        "encoding": "inplace",
        "label": "contract IVotingEscrow",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Phase)35239_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Phase",
        "members": [
          {
            "astId": 35232,
            "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 35234,
            "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 35236,
            "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
            "label": "k",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 35238,
            "contract": "lend-core/contracts/protocol/gauge/LendingGauge.sol:LendingGauge",
            "label": "b",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}