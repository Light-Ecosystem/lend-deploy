{
  "address": "0x1821610a350D43c3dA271755B39B970783b8b384",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hopeLendGovShortTimelock",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "cancelStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "funds",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x88c8795272e370de398ded4cf9abf77b84a48d49dc13cd627f24694c4ed19f63",
  "receipt": {
    "to": null,
    "from": "0x1Ee532cf775be02E0B306571e3555321FC75988d",
    "contractAddress": "0x1821610a350D43c3dA271755B39B970783b8b384",
    "transactionIndex": 34,
    "gasUsed": "596246",
    "logsBloom": "0x
    "blockHash": "0xcc828a4fc3d11ae5fe6a9f0b4a07c60dff0433a1b71a413b14a39c314b299d26",
    "transactionHash": "0x88c8795272e370de398ded4cf9abf77b84a48d49dc13cd627f24694c4ed19f63",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 9403517,
        "transactionHash": "0x88c8795272e370de398ded4cf9abf77b84a48d49dc13cd627f24694c4ed19f63",
        "address": "0x1821610a350D43c3dA271755B39B970783b8b384",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ee532cf775be02e0b306571e3555321fc75988d"
        ],
        "data": "0x",
        "logIndex": 2118,
        "blockHash": "0xcc828a4fc3d11ae5fe6a9f0b4a07c60dff0433a1b71a413b14a39c314b299d26"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 9403517,
        "transactionHash": "0x88c8795272e370de398ded4cf9abf77b84a48d49dc13cd627f24694c4ed19f63",
        "address": "0x1821610a350D43c3dA271755B39B970783b8b384",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001ee532cf775be02e0b306571e3555321fc75988d",
          "0x000000000000000000000000c6c1ef70746f6bed0a43c912b2b2047f25d3ea87"
        ],
        "data": "0x",
        "logIndex": 2119,
        "blockHash": "0xcc828a4fc3d11ae5fe6a9f0b4a07c60dff0433a1b71a413b14a39c314b299d26"
      }
    ],
    "blockNumber": 9403517,
    "cumulativeGasUsed": "13402938",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc6C1eF70746F6Bed0A43C912B2B2047f25d3eA87"
  ],
  "numDeployments": 1,
  "solcInputHash": "7b5dc1d7c8cb2a46fd1d020015de3f76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hopeLendGovShortTimelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"approve(address,address,address,uint256)\":{\"params\":{\"amount\":\"Allowance to approve*\",\"collector\":\"The collector contract with funds (HopeLend ecosystem reserve)\",\"recipient\":\"Allowance's recipient\",\"token\":\"The asset address\"}},\"cancelStream(address,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (HopeLend ecosystem reserve)\",\"streamId\":\"The id of the stream to cancel\"},\"returns\":{\"_0\":\"bool If the cancellation happened correctly*\"}},\"constructor\":{\"params\":{\"hopeLendGovShortTimelock\":\"The address of the HopeLend's governance executor, owning this contract\"}},\"createStream(address,address,uint256,address,uint256,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (HopeLend ecosystem reserve)\",\"deposit\":\"Total amount to be streamed\",\"recipient\":\"The recipient of the stream of token\",\"startTime\":\"The unix timestamp for when the stream starts\",\"stopTime\":\"The unix timestamp for when the stream stops\",\"tokenAddress\":\"The ERC20 token to use as streaming asset\"},\"returns\":{\"_0\":\"uint256 The stream id created*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address,address,address,uint256)\":{\"params\":{\"amount\":\"Amount to transfer*\",\"collector\":\"The collector contract with funds (HopeLend ecosystem reserve)\",\"recipient\":\"Transfer's recipient\",\"token\":\"The asset address\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"withdrawFromStream(address,uint256,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (HopeLend ecosystem reserve)\",\"funds\":\"Amount to withdraw\",\"streamId\":\"The id of the stream to withdraw tokens from\"},\"returns\":{\"_0\":\"bool If the withdrawal finished properly*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,address,address,uint256)\":{\"notice\":\"Proxy function for ERC20's approve(), pointing to a specific collector contract\"},\"cancelStream(address,uint256)\":{\"notice\":\"Proxy function to cancel a stream of token on a specific collector contract\"},\"constructor\":{\"notice\":\"Constructor.\"},\"createStream(address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Proxy function to create a stream of token on a specific collector contract\"},\"transfer(address,address,address,uint256)\":{\"notice\":\"Proxy function for ERC20's transfer(), pointing to a specific collector contract\"},\"withdrawFromStream(address,uint256,uint256)\":{\"notice\":\"Proxy function to withdraw from a stream of token on a specific collector contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lend-periphery/contracts/treasury/HopeLendEcosystemReserveController.sol\":\"HopeLendEcosystemReserveController\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"lend-core/contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return payable(msg.sender);\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x718d68d9ba5ae2eefd635e13acee792210ac7a7840139234c4c23de2b1870895\",\"license\":\"MIT\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xaab45993655e2e30909010506e0a120338362676a4047bb936c300a06297cc0f\",\"license\":\"LGPL-3.0\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x8c163fb0fb6e09d4ece34ede2d749086faeaa8438c07cf5529e5fbca680043e2\",\"license\":\"MIT\"},\"lend-core/contracts/dependencies/openzeppelin/contracts/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport './Ownable.sol';\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n  address private _pendingOwner;\\n\\n  event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Returns the address of the pending owner.\\n   */\\n  function pendingOwner() public virtual view returns (address) {\\n    return _pendingOwner;\\n  }\\n\\n  /**\\n   * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual override onlyOwner {\\n    _pendingOwner = newOwner;\\n    emit OwnershipTransferStarted(owner(), newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual override {\\n    delete _pendingOwner;\\n    super._transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev The new owner accepts the ownership transfer.\\n   */\\n  function acceptOwnership() external {\\n    address sender = _msgSender();\\n    require(pendingOwner() == sender, 'Ownable2Step: caller is not the new owner');\\n    _transferOwnership(sender);\\n  }\\n}\\n\",\"keccak256\":\"0xcc203d3e2ad72b2543f05b9091910ec47c91379872fd9a0605a5fab442bef807\",\"license\":\"MIT\"},\"lend-periphery/contracts/treasury/HopeLendEcosystemReserveController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {Ownable2Step} from 'lend-core/contracts/dependencies/openzeppelin/contracts/Ownable2Step.sol';\\nimport {IStreamable} from './interfaces/IStreamable.sol';\\nimport {IAdminControlledEcosystemReserve} from './interfaces/IAdminControlledEcosystemReserve.sol';\\nimport {IHopeLendEcosystemReserveController} from './interfaces/IHopeLendEcosystemReserveController.sol';\\nimport {IERC20} from 'lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\n\\ncontract HopeLendEcosystemReserveController is Ownable2Step, IHopeLendEcosystemReserveController {\\n  /**\\n   * @notice Constructor.\\n   * @param hopeLendGovShortTimelock The address of the HopeLend's governance executor, owning this contract\\n   */\\n  constructor(address hopeLendGovShortTimelock) {\\n    _transferOwnership(hopeLendGovShortTimelock);\\n  }\\n\\n  /// @inheritdoc IHopeLendEcosystemReserveController\\n  function approve(\\n    address collector,\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IAdminControlledEcosystemReserve(collector).approve(token, recipient, amount);\\n  }\\n\\n  /// @inheritdoc IHopeLendEcosystemReserveController\\n  function transfer(\\n    address collector,\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IAdminControlledEcosystemReserve(collector).transfer(token, recipient, amount);\\n  }\\n\\n  /// @inheritdoc IHopeLendEcosystemReserveController\\n  function createStream(\\n    address collector,\\n    address recipient,\\n    uint256 deposit,\\n    IERC20 tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  ) external onlyOwner returns (uint256) {\\n    return\\n      IStreamable(collector).createStream(\\n        recipient,\\n        deposit,\\n        address(tokenAddress),\\n        startTime,\\n        stopTime\\n      );\\n  }\\n\\n  /// @inheritdoc IHopeLendEcosystemReserveController\\n  function withdrawFromStream(\\n    address collector,\\n    uint256 streamId,\\n    uint256 funds\\n  ) external onlyOwner returns (bool) {\\n    return IStreamable(collector).withdrawFromStream(streamId, funds);\\n  }\\n\\n  /// @inheritdoc IHopeLendEcosystemReserveController\\n  function cancelStream(address collector, uint256 streamId) external onlyOwner returns (bool) {\\n    return IStreamable(collector).cancelStream(streamId);\\n  }\\n}\\n\",\"keccak256\":\"0x04af563c41c6fe21241c675c93ffaa8fcab0384ac1d11762a9401030b37c4837\",\"license\":\"MIT\"},\"lend-periphery/contracts/treasury/interfaces/IAdminControlledEcosystemReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from 'lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\n\\ninterface IAdminControlledEcosystemReserve {\\n  /** @notice Emitted when the funds admin changes\\n   * @param fundsAdmin The new funds admin\\n   **/\\n  event NewFundsAdmin(address indexed fundsAdmin);\\n\\n  /** @notice Returns the mock ETH reference address\\n   * @return address The address\\n   **/\\n  function ETH_MOCK_ADDRESS() external pure returns (address);\\n\\n  /**\\n   * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\\n   * @return address The address of the funds admin\\n   **/\\n  function getFundsAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Function for the funds admin to give ERC20 allowance to other parties\\n   * @param token The address of the token to give allowance from\\n   * @param recipient Allowance's recipient\\n   * @param amount Allowance to approve\\n   **/\\n  function approve(\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Function for the funds admin to transfer ERC20 tokens to other parties\\n   * @param token The address of the token to transfer\\n   * @param recipient Transfer's recipient\\n   * @param amount Amount to transfer\\n   **/\\n  function transfer(\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa673bcc991049ce626539e92e5958c14fd14ff39feca135dcfdca61dc5e4925a\",\"license\":\"GPL-3.0\"},\"lend-periphery/contracts/treasury/interfaces/IHopeLendEcosystemReserveController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from 'lend-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\n\\ninterface IHopeLendEcosystemReserveController {\\n  /**\\n   * @notice Proxy function for ERC20's approve(), pointing to a specific collector contract\\n   * @param collector The collector contract with funds (HopeLend ecosystem reserve)\\n   * @param token The asset address\\n   * @param recipient Allowance's recipient\\n   * @param amount Allowance to approve\\n   **/\\n  function approve(\\n    address collector,\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Proxy function for ERC20's transfer(), pointing to a specific collector contract\\n   * @param collector The collector contract with funds (HopeLend ecosystem reserve)\\n   * @param token The asset address\\n   * @param recipient Transfer's recipient\\n   * @param amount Amount to transfer\\n   **/\\n  function transfer(\\n    address collector,\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Proxy function to create a stream of token on a specific collector contract\\n   * @param collector The collector contract with funds (HopeLend ecosystem reserve)\\n   * @param recipient The recipient of the stream of token\\n   * @param deposit Total amount to be streamed\\n   * @param tokenAddress The ERC20 token to use as streaming asset\\n   * @param startTime The unix timestamp for when the stream starts\\n   * @param stopTime The unix timestamp for when the stream stops\\n   * @return uint256 The stream id created\\n   **/\\n  function createStream(\\n    address collector,\\n    address recipient,\\n    uint256 deposit,\\n    IERC20 tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Proxy function to withdraw from a stream of token on a specific collector contract\\n   * @param collector The collector contract with funds (HopeLend ecosystem reserve)\\n   * @param streamId The id of the stream to withdraw tokens from\\n   * @param funds Amount to withdraw\\n   * @return bool If the withdrawal finished properly\\n   **/\\n  function withdrawFromStream(\\n    address collector,\\n    uint256 streamId,\\n    uint256 funds\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Proxy function to cancel a stream of token on a specific collector contract\\n   * @param collector The collector contract with funds (HopeLend ecosystem reserve)\\n   * @param streamId The id of the stream to cancel\\n   * @return bool If the cancellation happened correctly\\n   **/\\n  function cancelStream(address collector, uint256 streamId) external returns (bool);\\n}\\n\",\"keccak256\":\"0x2fe573b20ece2c5b8447d132fe986f88aaf16ede900b82fdcb9f1a48e908b203\",\"license\":\"MIT\"},\"lend-periphery/contracts/treasury/interfaces/IStreamable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IStreamable {\\n  struct Stream {\\n    uint256 deposit;\\n    uint256 ratePerSecond;\\n    uint256 remainingBalance;\\n    uint256 startTime;\\n    uint256 stopTime;\\n    address recipient;\\n    address sender;\\n    address tokenAddress;\\n    bool isEntity;\\n  }\\n\\n  event CreateStream(\\n    uint256 indexed streamId,\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 deposit,\\n    address tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  );\\n\\n  event WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);\\n\\n  event CancelStream(\\n    uint256 indexed streamId,\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 senderBalance,\\n    uint256 recipientBalance\\n  );\\n\\n  function balanceOf(uint256 streamId, address who) external view returns (uint256 balance);\\n\\n  function getStream(uint256 streamId)\\n    external\\n    view\\n    returns (\\n      address sender,\\n      address recipient,\\n      uint256 deposit,\\n      address token,\\n      uint256 startTime,\\n      uint256 stopTime,\\n      uint256 remainingBalance,\\n      uint256 ratePerSecond\\n    );\\n\\n  function createStream(\\n    address recipient,\\n    uint256 deposit,\\n    address tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  ) external returns (uint256 streamId);\\n\\n  function withdrawFromStream(uint256 streamId, uint256 funds) external returns (bool);\\n\\n  function cancelStream(uint256 streamId) external returns (bool);\\n\\n  function initialize(address fundsAdmin) external;\\n}\\n\",\"keccak256\":\"0x746cd12d5312b5525b44339a717363f34a45d12061c1ad630bd615737a8e5269\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a4a380380610a4a83398101604081905261002f916100be565b61003833610047565b61004181610047565b506100ee565b600180546001600160a01b031916905561006b8161006e602090811b61065f17901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d057600080fd5b81516001600160a01b03811681146100e757600080fd5b9392505050565b61094d806100fd6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063f18d03cc1161005b578063f18d03cc14610180578063f2fde38b14610193578063fd59e134146101a657600080fd5b80638da5cb5b14610123578063e30c39781461016257600080fd5b8063715018a6116100a7578063715018a61461010057806379ba5097146101085780637dc14a8e1461011057600080fd5b80632f436bfa146100c357806359eba454146100eb575b600080fd5b6100d66100d13660046107a8565b6101c7565b60405190151581526020015b60405180910390f35b6100fe6100f93660046107dd565b610271565b005b6100fe610310565b6100fe610324565b6100d661011e36600461082e565b6103de565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e2565b60015473ffffffffffffffffffffffffffffffffffffffff1661013d565b6100fe61018e3660046107dd565b610480565b6100fe6101a136600461085a565b6104eb565b6101b96101b4366004610877565b61059b565b6040519081526020016100e2565b60006101d16106d4565b6040517f7a9b2c6c000000000000000000000000000000000000000000000000000000008152600481018490526024810183905273ffffffffffffffffffffffffffffffffffffffff851690637a9b2c6c906044016020604051808303816000875af1158015610245573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026991906108dc565b949350505050565b6102796106d4565b6040517fe1f21c6700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905285169063e1f21c67906064015b600060405180830381600087803b1580156102f257600080fd5b505af1158015610306573d6000803e3d6000fd5b5050505050505050565b6103186106d4565b6103226000610755565b565b600154339073ffffffffffffffffffffffffffffffffffffffff1681146103d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e6572000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103db81610755565b50565b60006103e86106d4565b6040517f6db9241b0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff841690636db9241b906024016020604051808303816000875af1158015610455573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047991906108dc565b9392505050565b6104886106d4565b6040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905285169063beabacc8906064016102d8565b6104f36106d4565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561055660005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60006105a56106d4565b6040517fcc1b4bf600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790528581166044830152606482018590526084820184905288169063cc1b4bf69060a4016020604051808303816000875af1158015610630573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065491906108fe565b979650505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c9565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556103db8161065f565b73ffffffffffffffffffffffffffffffffffffffff811681146103db57600080fd5b6000806000606084860312156107bd57600080fd5b83356107c881610786565b95602085013595506040909401359392505050565b600080600080608085870312156107f357600080fd5b84356107fe81610786565b9350602085013561080e81610786565b9250604085013561081e81610786565b9396929550929360600135925050565b6000806040838503121561084157600080fd5b823561084c81610786565b946020939093013593505050565b60006020828403121561086c57600080fd5b813561047981610786565b60008060008060008060c0878903121561089057600080fd5b863561089b81610786565b955060208701356108ab81610786565b94506040870135935060608701356108c281610786565b9598949750929560808101359460a0909101359350915050565b6000602082840312156108ee57600080fd5b8151801515811461047957600080fd5b60006020828403121561091057600080fd5b505191905056fea26469706673582212202ee4c38e1f18763b6dcd0a5caf0c31b77871880d13c600475819b5bfa2313c2b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063f18d03cc1161005b578063f18d03cc14610180578063f2fde38b14610193578063fd59e134146101a657600080fd5b80638da5cb5b14610123578063e30c39781461016257600080fd5b8063715018a6116100a7578063715018a61461010057806379ba5097146101085780637dc14a8e1461011057600080fd5b80632f436bfa146100c357806359eba454146100eb575b600080fd5b6100d66100d13660046107a8565b6101c7565b60405190151581526020015b60405180910390f35b6100fe6100f93660046107dd565b610271565b005b6100fe610310565b6100fe610324565b6100d661011e36600461082e565b6103de565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e2565b60015473ffffffffffffffffffffffffffffffffffffffff1661013d565b6100fe61018e3660046107dd565b610480565b6100fe6101a136600461085a565b6104eb565b6101b96101b4366004610877565b61059b565b6040519081526020016100e2565b60006101d16106d4565b6040517f7a9b2c6c000000000000000000000000000000000000000000000000000000008152600481018490526024810183905273ffffffffffffffffffffffffffffffffffffffff851690637a9b2c6c906044016020604051808303816000875af1158015610245573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026991906108dc565b949350505050565b6102796106d4565b6040517fe1f21c6700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905285169063e1f21c67906064015b600060405180830381600087803b1580156102f257600080fd5b505af1158015610306573d6000803e3d6000fd5b5050505050505050565b6103186106d4565b6103226000610755565b565b600154339073ffffffffffffffffffffffffffffffffffffffff1681146103d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e6572000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103db81610755565b50565b60006103e86106d4565b6040517f6db9241b0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff841690636db9241b906024016020604051808303816000875af1158015610455573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047991906108dc565b9392505050565b6104886106d4565b6040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905285169063beabacc8906064016102d8565b6104f36106d4565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915561055660005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60006105a56106d4565b6040517fcc1b4bf600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152602482018790528581166044830152606482018590526084820184905288169063cc1b4bf69060a4016020604051808303816000875af1158015610630573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065491906108fe565b979650505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c9565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556103db8161065f565b73ffffffffffffffffffffffffffffffffffffffff811681146103db57600080fd5b6000806000606084860312156107bd57600080fd5b83356107c881610786565b95602085013595506040909401359392505050565b600080600080608085870312156107f357600080fd5b84356107fe81610786565b9350602085013561080e81610786565b9250604085013561081e81610786565b9396929550929360600135925050565b6000806040838503121561084157600080fd5b823561084c81610786565b946020939093013593505050565b60006020828403121561086c57600080fd5b813561047981610786565b60008060008060008060c0878903121561089057600080fd5b863561089b81610786565b955060208701356108ab81610786565b94506040870135935060608701356108c281610786565b9598949750929560808101359460a0909101359350915050565b6000602082840312156108ee57600080fd5b8151801515811461047957600080fd5b60006020828403121561091057600080fd5b505191905056fea26469706673582212202ee4c38e1f18763b6dcd0a5caf0c31b77871880d13c600475819b5bfa2313c2b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "approve(address,address,address,uint256)": {
        "params": {
          "amount": "Allowance to approve*",
          "collector": "The collector contract with funds (HopeLend ecosystem reserve)",
          "recipient": "Allowance's recipient",
          "token": "The asset address"
        }
      },
      "cancelStream(address,uint256)": {
        "params": {
          "collector": "The collector contract with funds (HopeLend ecosystem reserve)",
          "streamId": "The id of the stream to cancel"
        },
        "returns": {
          "_0": "bool If the cancellation happened correctly*"
        }
      },
      "constructor": {
        "params": {
          "hopeLendGovShortTimelock": "The address of the HopeLend's governance executor, owning this contract"
        }
      },
      "createStream(address,address,uint256,address,uint256,uint256)": {
        "params": {
          "collector": "The collector contract with funds (HopeLend ecosystem reserve)",
          "deposit": "Total amount to be streamed",
          "recipient": "The recipient of the stream of token",
          "startTime": "The unix timestamp for when the stream starts",
          "stopTime": "The unix timestamp for when the stream stops",
          "tokenAddress": "The ERC20 token to use as streaming asset"
        },
        "returns": {
          "_0": "uint256 The stream id created*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address,address,address,uint256)": {
        "params": {
          "amount": "Amount to transfer*",
          "collector": "The collector contract with funds (HopeLend ecosystem reserve)",
          "recipient": "Transfer's recipient",
          "token": "The asset address"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "withdrawFromStream(address,uint256,uint256)": {
        "params": {
          "collector": "The collector contract with funds (HopeLend ecosystem reserve)",
          "funds": "Amount to withdraw",
          "streamId": "The id of the stream to withdraw tokens from"
        },
        "returns": {
          "_0": "bool If the withdrawal finished properly*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,address,address,uint256)": {
        "notice": "Proxy function for ERC20's approve(), pointing to a specific collector contract"
      },
      "cancelStream(address,uint256)": {
        "notice": "Proxy function to cancel a stream of token on a specific collector contract"
      },
      "constructor": {
        "notice": "Constructor."
      },
      "createStream(address,address,uint256,address,uint256,uint256)": {
        "notice": "Proxy function to create a stream of token on a specific collector contract"
      },
      "transfer(address,address,address,uint256)": {
        "notice": "Proxy function for ERC20's transfer(), pointing to a specific collector contract"
      },
      "withdrawFromStream(address,uint256,uint256)": {
        "notice": "Proxy function to withdraw from a stream of token on a specific collector contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2484,
        "contract": "lend-periphery/contracts/treasury/HopeLendEcosystemReserveController.sol:HopeLendEcosystemReserveController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2597,
        "contract": "lend-periphery/contracts/treasury/HopeLendEcosystemReserveController.sol:HopeLendEcosystemReserveController",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}